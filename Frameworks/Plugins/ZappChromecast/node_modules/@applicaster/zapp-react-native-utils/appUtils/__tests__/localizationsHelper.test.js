import {
  getLocale,
  getLanguageCode,
  getCountryCode,
} from "../localizationsHelper";

describe("getLocale", () => {
  it("returns correct locale from window.navigator object", () => {
    const locale = "en-gb";
    global.window = { navigator: { language: locale } };
    const expectedValue = locale;
    const currentValue = getLocale();

    expect(currentValue).toEqual(expectedValue);
  });
  it("returns locale in lower case", () => {
    const locale = "EN-GB";
    global.window = { navigator: { language: locale } };
    const expectedValue = "en-gb";
    const currentValue = getLocale();

    expect(currentValue).toEqual(expectedValue);
  });
  it("returns undefined if locale or navigator doesn't exist", () => {
    global.window = {};
    const currentValue = getLocale();
    expect(currentValue).not.toBeDefined();
  });
});

describe("getLanguageCode", () => {
  it("returns correct language code from window.navigator object", () => {
    const locale = "en-gb";
    global.window = { navigator: { language: locale } };
    const expectedValue = "en";
    const currentValue = getLanguageCode();

    expect(currentValue).toEqual(expectedValue);
  });
  it("returns language code in lower case", () => {
    const locale = "EN-GB";
    global.window = { navigator: { language: locale } };
    const expectedValue = "en";
    const currentValue = getLanguageCode();

    expect(currentValue).toEqual(expectedValue);
  });
  it("returns undefined if locale or navigator doesn't exist", () => {
    global.window = {};
    const currentValue = getLanguageCode();
    expect(currentValue).not.toBeDefined();
  });
});

describe("getCountryCode", () => {
  it("returns correct country code from window.navigator object", () => {
    const locale = "en-gb";
    global.window = { navigator: { language: locale } };
    const expectedValue = "gb";
    const currentValue = getCountryCode();

    expect(currentValue).toEqual(expectedValue);
  });
  it("returns country code in lower case", () => {
    const locale = "EN-GB";
    global.window = { navigator: { language: locale } };
    const expectedValue = "gb";
    const currentValue = getCountryCode();

    expect(currentValue).toEqual(expectedValue);
  });
  it("returns undefined if locale or navigator doesn't exist", () => {
    global.window = {};
    const currentValue = getCountryCode();
    expect(currentValue).not.toBeDefined();
  });
});
