import * as R from "ramda";
import { ZappPipesAdapter } from "../zappPipesAdapter";

const mock_zappPipesGetter = jest.fn();
const zappPipesBoostrapper = jest.fn(() => ({ get: mock_zappPipesGetter }));
const cachedProviders = ["provider1", "provider2"];
const dataSourceUrl = "provider://fetchData?type=type&url=url";
const callback = jest.fn();

const INIT_ERROR = new Error(
  "ZappPipesAdapter requires a bootstrapper function as argument"
);

const GET_ERROR = new Error(
  "ZappPipes engine is not bootstrapped - did you forget to call this.bootstrap(cachedProviders) ?"
);

function clearAllMocks() {
  zappPipesBoostrapper.mockClear();
  mock_zappPipesGetter.mockClear();
  callback.mockClear();
}

describe("ZappPipesAdapter", () => {
  describe("when it is constructed without a boostrapper", () => {
    it("throws an error", () => {
      expect(() => new ZappPipesAdapter()).toThrow(INIT_ERROR);
    });
  });

  describe("when it is constructed with a bootstrapper which isn't a function", () => {
    it("throws an error", () => {
      const bootstrapper = "foo";
      expect(() => new ZappPipesAdapter({ bootstrapper })).toThrow(INIT_ERROR);
    });
  });

  describe("when it is initialized properly", () => {
    let zappPipesAdapter;

    beforeEach(() => {
      zappPipesAdapter = new ZappPipesAdapter({
        bootstrapper: zappPipesBoostrapper,
      });
    });

    afterEach(clearAllMocks);

    it("is identified as a ZappPipesAdapter", () => {
      expect(R.is(ZappPipesAdapter, zappPipesAdapter)).toBe(true);
    });

    it("has a bootstrap function", () => {
      expect(zappPipesAdapter).toHaveProperty("bootstrap");
      expect(zappPipesAdapter.bootstrap).toBeFunction();
    });

    it("bootstrapping the adapter calls the provided bootstrapper function", () => {
      zappPipesAdapter.bootstrap(cachedProviders);
      expect(zappPipesBoostrapper).toHaveBeenCalledWith(cachedProviders);
    });

    it("sets the private _get property when calling the boostrapper", () => {
      expect(zappPipesAdapter._get).toBeUndefined();
      zappPipesAdapter.bootstrap(cachedProviders);
      expect(zappPipesAdapter._get).not.toBeUndefined();
      expect(zappPipesAdapter._get).toBeFunction();
    });

    it("has a get method", () => {
      expect(zappPipesAdapter).toHaveProperty("get");
      expect(zappPipesAdapter.get).toBeFunction();
    });

    it("throws when calling the get method before bootstrap", () => {
      expect(() => zappPipesAdapter.get(dataSourceUrl, callback)).toThrow(
        GET_ERROR
      );
    });

    it("invokes the getter when calling the get method", () => {
      zappPipesAdapter.bootstrap(cachedProviders);
      zappPipesAdapter.get(dataSourceUrl, callback);
      expect(mock_zappPipesGetter).toHaveBeenCalledWith(
        dataSourceUrl,
        callback
      );
    });
  });
});
