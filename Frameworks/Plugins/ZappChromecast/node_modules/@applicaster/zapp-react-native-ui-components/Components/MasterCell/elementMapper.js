// @flow
import * as React from "react";

type ElementProps = {
  type: string,
  style: any,
  props: any,
  elements: ?[any],
  key: string,
};

export function mapElementWithKey(fn) {
  return function (element, key) {
    return fn({ ...element, key });
  };
}

/**
 * Maps a provided node in a master cell configuration to a React Component tree with appropriate props & styles
 * Curried function of the form elementMapper(components)(element)
 * @param {Object} components map of primitive React components to use to render the elements
 * @param {Object} element element in the current master cell configuration
 * @param {String} element.type type of the component to render. Should match an entry in the components map
 * @param {Object} element.style style object for the component
 * @param {Object} element.props React props to pass to the component
 * @param {?[Object]} element.elements Optional array of nested elements to render within the current node
 * @returns {Object} React component
 */
export function elementMapper(components) {
  return function Element({ type, style, props, elements, key }: ElementProps) {
    const Component = components[type];

    const children =
      type === "View" && elements && elements.length
        ? elements.map(mapElementWithKey(elementMapper(components)))
        : null;

    const componentProps = {
      key,
      style: style,
      ...props,
    };

    return <Component {...componentProps}>{children}</Component>;
  };
}
