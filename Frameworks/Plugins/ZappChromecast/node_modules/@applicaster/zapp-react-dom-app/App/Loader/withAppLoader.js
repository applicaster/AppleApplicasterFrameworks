// @flow
/* global tizen */
import * as React from "react";
import * as R from "ramda";

import { connectToStore } from "@applicaster/zapp-react-native-redux";
import { QUICK_BRICK_EVENTS } from "@applicaster/zapp-react-native-bridge/QuickBrick";

import { QuickBrickEvents } from "../../Polyfills/QuickBrickCommunicationModule";
import { Splash } from "../Splash";

type Props = {
  appReady: boolean,
};

export function withAppLoader(Component) {
  class WrappedWithAppLoader extends React.Component<Props> {
    constructor(props) {
      super(props);

      this.state = {
        splash: !this.props.appReady,
      };

      this.quickBrickEventListener = this.quickBrickEventListener.bind(this);
    }

    componentDidMount() {
      this._isMounted = true;

      if (WrappedWithAppLoader.shouldShowSplash) {
        this.unsubscribe = QuickBrickEvents.subscribe(
          this.quickBrickEventListener
        );
      } else {
        setTimeout(() => this.setState({ splash: false }), 1);
      }
    }

    componentWillUnmount() {
      this._isMounted = false;
      if (this.unsubscribe) {
        this.unsubscribe();
      }
    }

    quickBrickEventListener(event, payload) {
      if (event === QUICK_BRICK_EVENTS.QUICK_BRICK_READY) {
        if (this._isMounted) {
          this.setState({ splash: false });
        } else {
          WrappedWithAppLoader.shouldShowSplash = false;
        }
      }

      if (event === QUICK_BRICK_EVENTS.MOVE_APP_TO_BACKGROUND) {
        try {
          tizen.application.getCurrentApplication().exit();
        } catch (e) {
          // eslint-disable-next-line no-console
          console.warn("Cannot exit application", e);
        }
      }
    }

    render() {
      const { splash } = this.state;
      return splash ? <Splash /> : <Component {...this.props} />;
    }
  }

  WrappedWithAppLoader.shouldShowSplash = true;

  return connectToStore(
    R.compose(
      R.assoc("appReady", R.__, {}),
      R.path(["appState", "appReady"])
    )
  )(WrappedWithAppLoader);
}
