// @flow
import * as React from "react";
import { FlatList } from "react-native";
import { focusableItemId } from "@applicaster/zapp-react-native-ui-components/Helpers/ComponentsHelper";
import { noop } from "@applicaster/zapp-react-native-utils/functionUtils";

type Props = {
  data: [any],
  horizontal: boolean,
  customFlatListParams: {},
  renderItem: (
    (number) => void
  ) => ({ item: any, index: number }) => React.ComponentType<any>,
  contentInset: {},
  contentOffset: {},
  numColumns: number,
  contentContainerStyle: {},
  onScroll: () => void,
  onMomentumScrollEnd: () => void,
  extraData: () => void,
  getItemLayout: () => void,
  onContentSizeChange: (contentWidth: number, contentHeight: number) => void,
  onLayout: (layoutFrame: {}) => void,
  scrollEnabled: boolean,
  style: {},
  renderCell: () => void,
  setFlatListRef: () => void,
};

export class FixedFocusScrollableList extends React.PureComponent<Props> {
  +flatList: React.ComponentType<any>;

  constructor(props) {
    super(props);

    this.viewFrame = { x: 0, y: 0, width: 0, height: 0 };
    this.contentWidth = 0;
    this._assignFlatListRef = this._assignFlatListRef.bind(this);
    this.onContentSizeChange = this.onContentSizeChange.bind(this);
    this.onLayout = this.onLayout.bind(this);
    this.onMomentumScrollEnd = this.onMomentumScrollEnd.bind(this);
  }

  _assignFlatListRef(flatList) {
    const { setFlatListRef = noop } = this.props;
    this.flatList = flatList;
    setFlatListRef(flatList);
  }

  onContentSizeChange(contentWidth, contentHeight) {
    const { onContentSizeChange = noop } = this.props;
    this.contentWidth = contentWidth;
    onContentSizeChange(contentWidth, contentHeight);
  }

  onLayout(event) {
    const { onLayout = noop } = this.props;
    const { x, y, width, height } = event.nativeEvent.layout;
    this.viewFrame = { x, y, width, height };
    onLayout(event.nativeEvent.layout);
  }

  onMomentumScrollEnd({ nativeEvent }) {
    const { onMomentumScrollEnd = noop } = this.props;
    onMomentumScrollEnd(nativeEvent);
  }

  render() {
    const {
      data,
      extraData,
      getItemLayout,
      onScroll,
      renderCell,
      customFlatListParams,
      style,
      scrollEnabled = true,
      numColumns,
      contentContainerStyle,
      contentOffset,
      contentInset,
      horizontal = false,
    } = this.props;

    return (
      <FlatList
        style={style}
        extraData={extraData}
        getItemLayout={getItemLayout}
        onScroll={onScroll}
        onMomentumScrollEnd={this.onMomentumScrollEnd}
        onLayout={this.onLayout}
        ref={this._assignFlatListRef}
        keyExtractor={focusableItemId}
        data={data}
        renderItem={renderCell}
        onContentSizeChange={this.onContentSizeChange}
        numColumns={numColumns}
        contentContainerStyle={contentContainerStyle}
        contentOffset={contentOffset}
        contentInset={contentInset}
        {...customFlatListParams}
        scrollEnabled={scrollEnabled}
        horizontal={horizontal}
      />
    );
  }
}
