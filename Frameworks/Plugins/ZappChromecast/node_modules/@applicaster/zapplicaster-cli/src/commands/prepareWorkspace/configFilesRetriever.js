const R = require("ramda");
const {
  saveRemoteJsonToFile,
  saveFontFiles,
  saveAssets,
} = require("../../download");

const { renderConfigFile } = require("../../render");

/**
 * @typedef configuration
 * @type {Object}
 * @property {String} appVersionId: ID of the app version in Zapp
 * @property {Object} buildParams: zapp build params for the app
 * @property {String} platform: Platform of the app
 * @property {Boolean} openSdk: whether or not the app should use an open SDK
 * @property {Boolean} verbose: verbose output flag
 */

/**
 * Retrieves configuration files from S3 and copy them locally
 * to the matching (config|assets|fonts)/${platform} folder
 * @param {configuration} configuration
 */
async function configFilesRetriever(configuration) {
  const { buildParams, template } = configuration;

  const { configFiles = [], remoteFiles = () => [] } = template;

  if (Array.isArray(configFiles) && !R.propEq("length", 0, configFiles)) {
    await Promise.all(R.map(renderConfigFile(configuration), configFiles));
  }

  const configFilesUrls = R.compose(
    R.concat(remoteFiles(configuration)),
    R.filter(R.test(/(.json)$/i)),
    R.reject(R.isNil),
    R.map(R.prop(R.__, buildParams)),
    R.filter(R.test(/(_url)$/i)),
    R.keys
  )(buildParams);

  // download files & save json files
  await Promise.all(
    R.map(saveRemoteJsonToFile(configuration), configFilesUrls)
  );

  const { fonts_url, fonts, assets_url } = buildParams;
  saveFontFiles(configuration, fonts_url, fonts);
  saveAssets(configuration, assets_url);

  return true;
}

module.exports = { configFilesRetriever };
