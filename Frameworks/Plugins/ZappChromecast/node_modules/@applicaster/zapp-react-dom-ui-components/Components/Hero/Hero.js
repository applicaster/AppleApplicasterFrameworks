// @flow
import * as React from "react";
import * as R from "ramda";

import { Carousel } from "../Carousel";
import { FocusDirection } from "@applicaster/zapp-react-native-utils/appUtils/directionHelper";
import { FocusableGroup } from "@applicaster/zapp-react-native-ui-components/Components/FocusableGroup";
import { VariableOffsetContainer } from "../VariableOffsetContainer";

type Props = {
  zappPipesData: {
    data: { title: string, entry: [{}] },
  },
  setOffsetUpdater: any => void,
  component: {
    styles: { header: { visible: boolean } },
    id: string,
  },
  componentIndex: number,
  CellRenderer: React.componentType<{ item: Object, state: string }>,
  groupId: String,
  isScreenWrappedInContainer: boolean,
};

const componentMargin = -12;
const cellWidth = 1280;
const cellPadding = 48;

const initialHorizontalOffset = -(
  componentMargin +
  cellWidth +
  cellPadding -
  cellWidth / 4
);

const headerHeight = 41 + cellPadding / 2;

// This is where the top of the cell should be from the top of the screen
const baseAnimationOffsetWithoutContainer = 350;
const baseAnimationOffsetInContainer = 230;

// screen width - cellwidth / 2 => ensure the selected cell is in the middle of the screen
const horizontalAnimationOffset = (1920 - cellWidth) / 2;

const heroStyles = {
  display: "flex",
  flexDirection: "row",
  marginTop: -componentMargin,
  marginLeft: componentMargin,
  width: "100vw",
  transform: `translate3d(${initialHorizontalOffset}px, 0, 0)`,
};

const heroStyleOneItem = {
  display: "flex",
  flexDirection: "row",
  marginTop: -componentMargin,
  margin: "auto",
  width: "60vw",
  justifyContent: "center",
};

export function HeroComponent({
  zappPipesData,
  setOffsetUpdater,
  component,
  CellRenderer,
  groupId,
  componentIndex,
  isScreenWrappedInContainer,
}: Props) {
  const {
    data: { title, entry },
  } = zappPipesData;

  if (entry.length === 0) {
    return null;
  }

  const {
    styles: { header },
    id,
  } = component;

  const headerData = R.merge(header, { title });
  const headerOffset = header.visible ? headerHeight : 0;
  const baseAnimationOffset = isScreenWrappedInContainer
    ? baseAnimationOffsetInContainer
    : baseAnimationOffsetWithoutContainer;

  const verticalAnimationOffset = baseAnimationOffset + headerOffset;

  return (
    <FocusableGroup
      id={id}
      groupId={groupId}
      preferredFocus={componentIndex === 0}
      prioritiseFocusOn={FocusDirection.LEFT | FocusDirection.RIGHT}
      shouldUsePreferredFocus
    >
      <VariableOffsetContainer
        initialHorizontalOffset={
          entry.length === 1 ? null : initialHorizontalOffset
        }
        baseStyles={entry.length === 1 ? heroStyleOneItem : heroStyles}
        saveUpdaterFunction={setOffsetUpdater}
      >
        {styles => (
          <Carousel
            componentId={id}
            component={component}
            CellRenderer={CellRenderer}
            items={entry}
            header={headerData}
            styles={styles}
            shouldScrollHorizontally={R.T}
            shouldScrollVertically={R.T}
            verticalAnimationOffset={verticalAnimationOffset}
            horizontalAnimationOffset={horizontalAnimationOffset}
          />
        )}
      </VariableOffsetContainer>
    </FocusableGroup>
  );
}
