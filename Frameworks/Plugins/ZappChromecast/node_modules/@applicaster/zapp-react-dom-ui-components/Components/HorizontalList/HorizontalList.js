// @flow
import * as React from "react";
import * as R from "ramda";

import { Collection } from "../Collection";
import { FocusableGroup } from "@applicaster/zapp-react-native-ui-components/Components/FocusableGroup";
import { VariableOffsetContainer } from "../VariableOffsetContainer";
import { focusManager } from "@applicaster/zapp-react-native-utils/appUtils/focusManager";

const railsStyle = isScreenWrappedInContainer => ({
  display: "flex",
  flexDirection: "row",
  marginTop: 48,
  marginLeft: isScreenWrappedInContainer ? 0 : 114,
  width: "100vw",
  transition: "all 400ms cubic-bezier(0, 1, 0.5, 1)",
});

type Props = {
  component: { id: string, styles: { header: {} } },
  componentIndex: number,
  CellRenderer: React.ComponentType<{ item: Object, state: string }>,
  setOffsetUpdater: (string, number) => number,
  zappPipesData: {
    data: {
      entry: [{}],
    },
  },
  setCurrentContent: any,
  setPlayerAction: any,
  navDefault: any,
  selectCurrentContent: any,
  content: any,
  groupId: string,
  isScreenWrappedInContainer: ?boolean,
};

export class HorizontalListComponent extends React.Component<Props> {
  constructor(props: Props) {
    super(props);

    this.shouldScrollHorizontally = this.shouldScrollHorizontally.bind(this);
  }

  shouldScrollHorizontally(focusable, itemId) {
    const { isScreenWrappedInContainer } = this.props;
    if (focusable) {
      const parent = focusManager.getGroupById(focusable.props.groupId);
      if (parent) {
        const itemRect = focusable.getRect();

        // temporary fix to allow rails to scroll properly inside screen picker
        const availableWidth = isScreenWrappedInContainer ? 1400 : 1920;

        const maxScroll = Math.floor(availableWidth / itemRect.width);

        const {
          zappPipesData: {
            data: { entry },
          },
        } = this.props;

        const itemIndex = R.findIndex(R.propEq("id", itemId))(entry);

        return entry.length - itemIndex >= maxScroll;
      }
    }
  }

  render() {
    const {
      zappPipesData,
      component,
      componentIndex,
      CellRenderer,
      setOffsetUpdater,
      groupId,
      isScreenWrappedInContainer,
    } = this.props;

    const {
      id,
      styles: { header },
    } = component;

    const title = R.path(["data", "title"], zappPipesData);
    const items = R.path(["data", "entry"], zappPipesData);

    if (items.length === 0) {
      return null;
    }

    const headerData = R.merge(header, { title });

    return (
      <FocusableGroup
        id={id}
        groupId={groupId}
        preferredFocus={componentIndex === 0}
        shouldUsePreferredFocus
      >
        <VariableOffsetContainer
          baseStyles={railsStyle(isScreenWrappedInContainer)}
          saveUpdaterFunction={setOffsetUpdater}
        >
          {styles => (
            <Collection
              componentId={id}
              component={component}
              CellRenderer={CellRenderer}
              items={items}
              header={headerData}
              styles={styles}
              shouldScrollHorizontally={this.shouldScrollHorizontally}
              shouldScrollVertically={R.T}
              isScreenWrappedInContainer={isScreenWrappedInContainer}
            />
          )}
        </VariableOffsetContainer>
      </FocusableGroup>
    );
  }
}
