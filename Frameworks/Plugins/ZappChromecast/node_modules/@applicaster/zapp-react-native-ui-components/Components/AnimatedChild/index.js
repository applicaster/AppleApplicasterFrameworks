// @flow
import * as React from "react";
import { Animated, View } from "react-native";
import * as R from "ramda";

type Props = {
  children: React.Element<any>,
  initialAnimatedValue: ?Animated,
  animationType: ?string,
  animationConfig: any,
  currentStyles: any,
  nextStyles: any,
  containerStyles: any,
};

type State = {
  currentChildren: React.Element<any>,
  nextChildren: React.Element<any> | null,
  animatedValue: Animated,
};

const initialState = (props: Props): State => ({
  currentChildren: props.children,
  nextChildren: null,
  animatedValue: new Animated.Value(props.initialAnimatedValue || 0),
});

export class AnimatedChild extends React.Component<Props, State> {
  +animationEnded: () => void;

  constructor(props: Props) {
    super(props);
    this.animationEnded = this.animationEnded.bind(this);
    this.state = initialState(props);
  }

  childHasChanged(prevProps: Props, currentProps: Props) {
    return prevProps.children.key !== currentProps.children.key;
  }

  componentDidUpdate(prevProps: Props) {
    if (this.childHasChanged(prevProps, this.props)) {
      this.setState(
        R.merge(R.__, {
          nextChildren: this.props.children,
        }),
        this.animate
      );
    }
  }

  animate() {
    const { animationType = "timing", animationConfig } = this.props;
    Animated[animationType](this.state.animatedValue, animationConfig).start(
      this.animationEnded
    );
  }

  animationEnded() {
    this.state.animatedValue.setValue(0);
    this.setState(
      R.merge(R.__, {
        currentChildren: this.props.children,
      })
    );
  }

  render() {
    const { currentStyles, nextStyles, containerStyles } = this.props;
    const { currentChildren, nextChildren, animatedValue } = this.state;
    const absolute = { position: "absolute" };

    return (
      <View style={containerStyles}>
        <Animated.View style={[absolute, currentStyles(animatedValue)]}>
          {currentChildren}
        </Animated.View>
        {nextChildren && (
          <Animated.View style={[absolute, nextStyles(animatedValue)]}>
            {nextChildren}
          </Animated.View>
        )}
      </View>
    );
  }
}
