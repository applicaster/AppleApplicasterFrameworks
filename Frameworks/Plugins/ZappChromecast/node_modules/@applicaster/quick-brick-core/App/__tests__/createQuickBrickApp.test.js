/* eslint-disable indent */
import * as React from "react";
import { View } from "react-native";
import ReactTestRenderer from "react-test-renderer";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";

import { createQuickBrickApp } from "../index";

function createComponentMock(mockName, hasChildren = false) {
  return hasChildren
    ? jest.fn(({ children }) => (
        <View comp={mockName}>
          {typeof children === "function" ? children() : children}
        </View>
      ))
    : jest.fn(() => <View comp={mockName} />);
}

function createDecoratorMock({ mockName, mockComp = View, mockProps = {} }) {
  return jest.fn(Component =>
    jest.fn(props => (
      <mockComp comp={mockName}>
        <Component {...props} {...mockProps} />
      </mockComp>
    ))
  );
}

const Layout = createComponentMock("Layout");
const Router = createComponentMock("Router", true);
const useLocation = jest.fn(() => ({ pathname: "foo" }));
const useHistory = jest.fn();

const navigations = { Router, useLocation, useHistory };

const InteractionManager = createDecoratorMock({
  mockName: "interactionManager",
});

const QuickBrickManager = {
  sendQuickBrickEvent: jest.fn(),
};

const ContextProvider = {
  withProvider: createDecoratorMock({ mockName: "withProvider" }),
};

const ContextProviders = [ContextProvider.withProvider];

const options = {
  InteractionManager,
  Layout,
  navigations,
  QuickBrickManager,
  ContextProviders,
};

const initialState = {
  styles: {},
  remoteConfigurations: {
    styles: {},
  },
  components: {
    River: createComponentMock("river"),
    AppContainer: createComponentMock("appContainer", true),
    DisplayError: createComponentMock("displayError"),
  },
  rivers: [{ id: "A1234", home: true }],
  appSettings: {},
  plugins: [],
  appState: { appReady: true },
};

const store = configureStore([])(initialState);

describe("createQuickBrickApp", () => {
  it("is a function", () => {
    expect(createQuickBrickApp).toBeFunction();
  });

  it("returns a react component and it renders correctly", () => {
    const QuickBrickApp = createQuickBrickApp(options);
    const wrapper = ReactTestRenderer.create(
      <Provider store={store}>
        <QuickBrickApp store={store} />
      </Provider>
    );
    expect(wrapper.toJSON()).toMatchSnapshot();
  });

  describe("with no InteractionManager", () => {
    it("renders correctly", () => {
      const { InteractionManager, ...otherOptions } = options;
      const QuickBrickApp = createQuickBrickApp(otherOptions);
      const wrapper = ReactTestRenderer.create(
        <Provider store={store}>
          <QuickBrickApp store={store} />
        </Provider>
      );
      expect(wrapper.toJSON()).toMatchSnapshot();
    });
  });

  describe("with no ContextProviders", () => {
    it("renders correctly", () => {
      const { ContextProviders, ...otherOptions } = options;
      const QuickBrickApp = createQuickBrickApp(otherOptions);
      const wrapper = ReactTestRenderer.create(
        <Provider store={store}>
          <QuickBrickApp store={store} />
        </Provider>
      );
      expect(wrapper.toJSON()).toMatchSnapshot();
    });
  });
});
