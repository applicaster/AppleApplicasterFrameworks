// @flow
import * as R from "ramda";
import camelize from "camelize";
global.Buffer = global.Buffer || require("buffer").Buffer;

/**
 * sets the first letter of the string as uppercase
 * @param {String} string to capitalize
 * @return {String} capitalized string
 */
export const capitalize: string => string = R.compose(
  R.join(""),
  R.juxt([
    R.compose(
      R.toUpper,
      R.head
    ),
    R.tail,
  ])
);

export const toCamelCase = camelize;

/**
 * transforms a string from snake_case to PascalCase
 * @param {String} string to be transformed
 * @return {String} transformed string
 */
export const toPascalCase: string => string = R.compose(
  capitalize,
  camelize
);

/**
 * transforms a string to base 64
 * @param {string} string to be converted
 * @return {string} base64 string
 */
export function to64(string) {
  return Buffer.from(string).toString("base64");
}

/**
 * transforms a string from base 64
 * @param {string} string base 64 base string to convert
 * @return {string}
 */
export function from64(string) {
  return Buffer.from(string, "base64").toString();
}

/**
 * create random uuid
 * @return {string}
 */
export function createUUID() {
  var dt = new Date().getTime();
  var uuid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(
    c
  ) {
    var r = (dt + Math.random() * 16) % 16 | 0;
    dt = Math.floor(dt / 16);
    return (c === "x" ? r : (r & 0x3) | 0x8).toString(16);
  });
  return uuid;
}
