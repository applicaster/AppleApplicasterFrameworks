// @flow
import * as React from "react";
import * as R from "ramda";
import TVEventHandler from "react-native/Libraries/Components/AppleTV/TVEventHandler";
import { wrapInThrottlerIfNeeded } from "./throttle";

type Props = {
  tvEventHandler: (any, any) => void,
  children: React.ComponentType<any>,
  throttle: ?number,
};

const noop = () => ({});

export class TVEventHandlerComponent extends React.Component<Props> {
  tvEventHandler: any;

  componentDidMount() {
    this.enableTVHandlers();
  }

  componentWillUnmount() {
    this.disableTVHandlers();
  }

  enableTVHandlers() {
    this.tvEventHandler = new TVEventHandler();
    const { throttle, tvEventHandler } = this.props;

    const handler = R.unless(R.is(Function), noop)(tvEventHandler);

    this.tvEventHandler.enable(
      this,
      wrapInThrottlerIfNeeded(handler, throttle, this)
    );
  }

  disableTVHandlers() {
    if (this.tvEventHandler) {
      this.tvEventHandler.disable();
      delete this.tvEventHandler;
    }
  }

  render() {
    return this.props.children;
  }
}
