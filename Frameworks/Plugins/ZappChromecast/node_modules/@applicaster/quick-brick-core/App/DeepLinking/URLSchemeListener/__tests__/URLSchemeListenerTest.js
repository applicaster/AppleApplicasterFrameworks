import * as React from "react";
import { View, Text } from "react-native";
import { shallow } from "enzyme";
import { shallowToJson } from "enzyme-to-json";

import { URLSchemeListener } from "../index";

const URL = "url";

jest.mock("react-native");

const TestComponent = () => (
  <View>
    <Text>I'm a test component</Text>
  </View>
);

const ReactNative = require("react-native");
const { Linking } = ReactNative;

const navigator = {
  push: jest.fn(),
  replace: jest.fn(),
};

jest.spyOn(console, "warn").mockImplementation(() => jest.fn());

function clearMocks() {
  navigator.push.mockClear();
  navigator.replace.mockClear();
  console.warn.mockClear(); // eslint-disable-line no-console
  Linking.__resetListeners();
  Linking.__clearInitialURL();
  Linking.addEventListener.mockClear();
  Linking.removeEventListener.mockClear();
  Linking.getInitialURL.mockClear();
  Linking.openURL.mockClear();
}

describe("URLSchemeHandler", () => {
  const getWrapper = props =>
    shallow(
      <URLSchemeListener navigator={navigator} {...props}>
        <TestComponent />
      </URLSchemeListener>
    );

  beforeEach(clearMocks);

  it("renders correctly", () => {
    const wrapper = getWrapper();
    expect(shallowToJson(wrapper)).toMatchSnapshot();
  });

  describe("linking registration", () => {
    beforeEach(clearMocks);

    it("registers the listener when the component mounts", () => {
      const wrapper = getWrapper();
      const instance = wrapper.instance();

      expect(shallowToJson(wrapper)).toMatchSnapshot();

      expect(Linking.addEventListener).toHaveBeenCalledWith(
        URL,
        instance.handleOpenUrl
      );
    });

    it("unregisters the listener when the component unmounts", () => {
      const wrapper = getWrapper();
      const instance = wrapper.instance();
      wrapper.unmount();

      expect(Linking.removeEventListener).toHaveBeenCalledWith(
        URL,
        instance.handleOpenUrl
      );
    });
  });

  describe("initial url", () => {
    beforeEach(clearMocks);

    it("tries to get the initial url", () => {
      const listenerSpy = jest.fn();
      const wrapper = getWrapper({ listenerSpy });

      expect(shallowToJson(wrapper)).toMatchSnapshot();
      expect(listenerSpy).toHaveBeenCalledWith("getInitialURL");
      expect(Linking.getInitialURL).toHaveBeenCalled();
    });

    it("gets the initial url and redirect to it if it exists", async () => {
      const listenerSpy = jest.fn();
      const url = "http://foo.com";
      Linking.__setInitialURL(url);

      const wrapper = getWrapper({ listenerSpy });
      const instance = wrapper.instance();

      await instance.componentDidMount();

      expect(listenerSpy).toHaveBeenCalledWith("getInitialURL");

      expect(navigator.replace).toHaveBeenCalledWith(
        expect.objectContaining({ url })
      );
    });

    it("doesn't try to navigate if there is no initial url", async () => {
      const listenerSpy = jest.fn();

      const wrapper = getWrapper({ listenerSpy });
      const instance = wrapper.instance();
      jest.spyOn(instance, "handleOpenUrlError");

      await instance.componentDidMount();

      expect(listenerSpy).toHaveBeenCalledWith("getInitialURL");
      expect(listenerSpy).not.toHaveBeenCalledWith("canOpenURL");
      expect(navigator.replace).not.toHaveBeenCalled();
    });
  });

  describe("url scheme handler", () => {
    beforeEach(clearMocks);

    it("invokes the listener when a url is triggered", () => {
      const listenerSpy = jest.fn();
      const wrapper = getWrapper({ listenerSpy });
      const url = "http://foo.com";

      Linking.__callUrl(url);

      expect(shallowToJson(wrapper)).toMatchSnapshot();

      expect(listenerSpy).toHaveBeenCalledWith(
        "handleOpenUrl",
        expect.objectContaining({ url })
      );
    });

    it("invokes the navigator if a url is triggered and the url is valid", async () => {
      const listenerSpy = jest.fn();
      const wrapper = getWrapper({ listenerSpy });
      const instance = wrapper.instance();
      const spy = jest.spyOn(instance, "handleOpenUrl");
      const url = "http://foo.com";

      Linking.__callUrl(url);

      await spy;

      expect(navigator.replace).toHaveBeenCalledWith(
        expect.objectContaining({ url })
      );
    });

    it("doesn't invoke the navigator if a url is triggered and the url is undefined", async () => {
      const listenerSpy = jest.fn();
      const wrapper = getWrapper({ listenerSpy });
      const instance = wrapper.instance();
      const spy = jest.spyOn(instance, "handleOpenUrl");
      const url = undefined; // eslint-disable no-undefined

      Linking.__callUrl(url);

      await spy;

      expect(listenerSpy).toHaveBeenCalledWith(
        "handleOpenUrl",
        expect.objectContaining({ url })
      );

      expect(navigator.replace).not.toHaveBeenCalled();
    });
  });
});
