import React from "react";
import { shallow } from "enzyme";
import { shallowToJson } from "enzyme-to-json";
import configureStore from "redux-mock-store";

import { ComponentsMap } from "../ComponentsMap";
import { FeedLoader } from "../../FeedLoader";
import { River } from "../index";
import { RiverComponent } from "../River";
import { ScreenResolver } from "../../ScreenResolver";

const river = {
  home: true,
  id: "A1234",
  name: "foo",
  type: "general_content",
  ui_components: [
    {
      component_type: "hero",
    },
    {
      component_type: "grid",
    },
  ],
};

const riverWithScreenPlugin = {
  home: false,
  id: "C0987",
  name: "Some-Screen-Plugin",
  type: "some-screen-plugin",
  ui_components: [],
};

const rivers = {
  A1234: river,
  B4567: { id: "B4567" },
  C0987: riverWithScreenPlugin,
};

const contexts = {
  setScreenTitle: () => {},
  setScreenSummary: () => {},
  setIsScreenWrappedInContainer: () => {},
};

const riverProps = {
  river,
  ...contexts,
  groupId: "ZF-C4",
};

const store = configureStore()({ rivers });

describe("When River has a general_content type", () => {
  const wrapper = shallow(<RiverComponent {...riverProps} />);

  describe("<RiverComponent />", () => {
    it("renders correctly", () => {
      expect(shallowToJson(wrapper)).toMatchSnapshot();
    });

    it("it returns a ComponentsMap", () => {
      expect(wrapper.find(ComponentsMap).length).toBe(1);
    });
  });

  describe("<River />", () => {
    const wrapper = shallow(<River screenId="A1234" />, { context: { store } });

    it("renders correctly", () => {
      expect(shallowToJson(wrapper)).toMatchSnapshot();
    });
  });
});

describe("When River has any other type other than general_content", () => {
  const riverPropsWithScreenPlugin = {
    river: riverWithScreenPlugin,
    ...contexts,
  };
  const wrapper = shallow(<RiverComponent {...riverPropsWithScreenPlugin} />);

  describe("<RiverComponent />", () => {
    it("renders correctly", () => {
      expect(shallowToJson(wrapper)).toMatchSnapshot();
    });

    it("it returns a ScreenResolver", () => {
      expect(wrapper.find(ScreenResolver).length).toBe(1);
    });
  });
});

describe("When River has feed url", () => {
  const riverPropsWithFeedUrl = {
    river,
    ...contexts,
    feedUrl: "https://some-feed-url.net",
  };
  const wrapper = shallow(<RiverComponent {...riverPropsWithFeedUrl} />);

  describe("<RiverComponent />", () => {
    it("renders correctly", () => {
      expect(shallowToJson(wrapper)).toMatchSnapshot();
    });

    it("it returns a FeedLoader", () => {
      expect(wrapper.find(FeedLoader).length).toBe(1);
    });
  });
});
