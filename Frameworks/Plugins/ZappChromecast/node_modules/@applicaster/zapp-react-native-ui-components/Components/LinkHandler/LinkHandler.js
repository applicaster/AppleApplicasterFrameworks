import * as React from "react";
import * as R from "ramda";
import { View, Linking, ActivityIndicator } from "react-native";

import { withNavigator } from "@applicaster/zapp-react-native-ui-components/Decorators/Navigator";
import { findPluginByIdentifier } from "@applicaster/zapp-react-native-utils/pluginUtils";

type Props = {
  screenData: {
    type: {
      value: string,
    },
    link: {
      href: string,
    },
  },
  plugins: [],
};

function LinkHandlerComponent(props: Props) {
  const screenData = props?.screenData;
  const plugins = props?.plugins;
  const ScreenPlugin = findPluginByIdentifier("webview_screen_qb", plugins);
  const Component =
    R.path(["module", "Component"], ScreenPlugin) ||
    R.prop("module", ScreenPlugin) ||
    ScreenPlugin;

  const [link, setLink] = React.useState({ target: null, isSupported: null });
  React.useEffect(() => {
    // on iOS canOpenURL looks through list of LSApplicationQueriesSchemes
    // you can add more schemes via the URL Schemes section on Zapp
    async function getLink() {
      if (screenData && screenData?.type?.value === "link") {
        const target = screenData?.link?.href;
        const isSupported = await Linking.canOpenURL(target);

        setLink({ target, isSupported });
      }
    }

    getLink();
  }, []);

  async function openUrl(targetLink) {
    await Linking.openURL(targetLink);
  }

  function renderLoading() {
    const loadingStyle = { flex: 1, backgroundColor: "transparent" };
    props?.navigator?.goBack();
    return (
      <View style={loadingStyle}>
        <ActivityIndicator size="large" color="#00ff00" />
      </View>
    );
  }

  // If we have a WebView plugin and it is a weblink, render using webview
  // otherwise render using browser
  function renderLink() {
    const target = link?.target;
    const isWebLink = target.startsWith("http");

    if (Component && isWebLink) {
      return <Component screenData={screenData} />;
    } else {
      // Todo: think of another way to frame this
      setTimeout(() => {
        openUrl(target);
      }, 1);

      return renderLoading();
    }
  }
  return link?.isSupported ? renderLink() : null;
}

export const LinkHandler = R.compose(withNavigator)(LinkHandlerComponent);
