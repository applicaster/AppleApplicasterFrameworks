const { resolve } = require("path");
jest.mock("aws-sdk");

describe("when credentials are defined as env vars", () => {
  const ENV = process.env;

  const ENV_VAR_AWS_ACCESS_KEY_ID = "ENV_VAR_AWS_ACCESS_KEY_ID";
  const ENV_VAR_AWS_SECRET_ACCESS_KEY = "ENV_VAR_AWS_SECRET_ACCESS_KEY";

  beforeEach(() => {
    jest.resetModules();
    process.env = { ...ENV };
    process.env.AWS_ACCESS_KEY_ID = ENV_VAR_AWS_ACCESS_KEY_ID;
    process.env.AWS_SECRET_ACCESS_KEY = ENV_VAR_AWS_SECRET_ACCESS_KEY;
  });

  afterEach(() => {
    process.env = ENV;
    require("aws-sdk").S3.mockClear();
  });

  it("gets credentials from env vars", async () => {
    await require("../index").list("SOME_PATH");

    expect(require("aws-sdk").S3).toHaveBeenCalledWith(
      expect.objectContaining({
        accessKeyId: ENV_VAR_AWS_ACCESS_KEY_ID,
        secretAccessKey: ENV_VAR_AWS_SECRET_ACCESS_KEY,
      })
    );
  });
});

describe("when credentials are defined in the aws config", () => {
  const ENV = process.env;

  const AWS_ACCESS_KEY_ID_FROM_CONFIG = "AWS_ACCESS_KEY_ID_FROM_CONFIG";
  const AWS_SECRET_ACCESS_KEY_FROM_CONFIG = "AWS_SECRET_ACCESS_KEY_FROM_CONFIG";

  beforeEach(() => {
    jest.resetModules();
    process.env = { ...ENV };
    delete process.env.AWS_ACCESS_KEY_ID;
    delete process.env.AWS_SECRET_ACCESS_KEY;
    process.env.HOME = resolve(__dirname, "./fixtures/withValidCredentials");
  });

  afterEach(() => {
    process.env = ENV;
    require("aws-sdk").S3.mockClear();
  });

  it("gets the credentials from the aws config", async () => {
    await require("../index").list("SOME_PATH");

    expect(require("aws-sdk").S3).toHaveBeenCalledWith(
      expect.objectContaining({
        accessKeyId: AWS_ACCESS_KEY_ID_FROM_CONFIG,
        secretAccessKey: AWS_SECRET_ACCESS_KEY_FROM_CONFIG,
      })
    );
  });
});

describe("when credentials are not defined in the aws config", () => {
  const ENV = process.env;

  beforeEach(() => {
    jest.resetModules();
    process.env = { ...ENV };
    process.env.HOME = resolve(__dirname, "./fixtures/withoutValidCredentials");
    delete process.env.AWS_ACCESS_KEY_ID;
    delete process.env.AWS_SECRET_ACCESS_KEY;
  });

  afterEach(() => {
    process.env = ENV;
    require("aws-sdk").S3.mockClear();
  });

  it("throws an error", async () => {
    expect(() =>
      require("../index").list("SOME_PATH")
    ).toThrowErrorMatchingSnapshot();
  });
});
