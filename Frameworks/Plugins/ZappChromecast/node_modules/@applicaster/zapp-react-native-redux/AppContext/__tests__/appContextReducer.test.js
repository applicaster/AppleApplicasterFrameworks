jest.mock("../riversLoader", () => ({
  riversLoader: jest.fn(x => x),
}));

import R from "ramda";
import { iosStyles } from "./iosStyles.json";

const reducer = require("../index").default;
const { LOAD_APP_CONTEXT, loadAppContext } = require("../index");
const { riversLoader } = require("../riversLoader");

const context = "styles";
const contextData = iosStyles;

const contextConst = LOAD_APP_CONTEXT(context);
const contextLoader = loadAppContext(context);
const contextReducer = reducer(context);

describe("constant", () => {
  it("returns a constant with the context", () => {
    expect(contextConst).toBe(`LOAD_${context.toUpperCase()}`);
  });
});

describe("actions", () => {
  let identitySpy;

  beforeAll(() => {
    identitySpy = jest.spyOn(R, "identity");
  });

  afterAll(() => {
    identitySpy.mockReset();
  });

  it("returns an action function to load the context", () => {
    const action = contextLoader(contextData);
    expect(action).toHaveProperty("type", LOAD_APP_CONTEXT(context));
    expect(action).toHaveProperty("payload", contextData);
  });

  it("invokes riversLoader function when loading rivers", () => {
    loadAppContext("rivers")(contextData);
    expect(riversLoader).toHaveBeenCalledWith(contextData);
  });

  it("context loader is ramda's identity if no loader is defined", () => {
    loadAppContext("foo")(contextData);
    expect(identitySpy).toHaveBeenCalledWith(contextData);
  });

  it("context loader is ramda's identity when loading styles", () => {
    loadAppContext("styles")(contextData);
    expect(identitySpy).toHaveBeenCalledWith(contextData);
  });
});

describe("reducer", () => {
  it("creates a reducer", () => {
    const initialState = {};
    const newState = contextReducer(initialState, contextLoader(contextData));
    expect(newState).toEqual(contextData);
  });

  it("returns the state if an unknown action is dispatched", () => {
    const initialState = {};
    const newState = contextReducer(initialState, { Type: "NOOP" });
    expect(newState).toEqual(initialState);
  });
});
