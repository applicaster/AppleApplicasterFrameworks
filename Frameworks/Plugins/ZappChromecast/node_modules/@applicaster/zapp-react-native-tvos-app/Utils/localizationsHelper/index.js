/* global window */
import * as R from "ramda";
import { NativeModules } from "react-native";

const {
  QuickBrickCommunicationModule: { languageLocale, countryLocale },
} = NativeModules;

/**
 * helper function which returns the first entry in an object
 * @param {Object}
 * @returns {Any}
 */
const getFirstObjectValue = R.compose(R.head, R.values);

/**
 * gets the app's locale.
 * @return {string} example: en-gb
 */
export function getLocale() {
  return R.toLower(`${languageLocale}-${countryLocale}`);
}

/**
 *
 * Gets country code from the locale string and returns it's lowercase value
 * @returns {string} example: en
 */
export function getLanguageCode() {
  return languageLocale ? R.toLower(languageLocale) : null;
}

/**
 *
 * Gets country code from the locale string and returns it's lowercase value
 * @returns {string} example: gb
 */
export function getCountryCode() {
  return R.toLower(countryLocale);
}

/**
 * returns the localization for the app based on the locale. If the locale is null
 * or undefined, or if the given locale doesn't exist in the localizations,
 * it will return the first locale available in the localizations dictionary
 * @param {Object} options
 * @param {Object} options.localizations dictionary of localized strings
 * indexed by their respective locale
 * @returns {Object} dictionary of localized strings for the given locale
 */
export function getLocalizations({ localizations }) {
  const languageCode = getLanguageCode();
  if (!languageCode) {
    return getFirstObjectValue(localizations);
  }
  return R.ifElse(
    R.has(languageCode),
    R.prop(languageCode),
    getFirstObjectValue
  )(localizations);
}
