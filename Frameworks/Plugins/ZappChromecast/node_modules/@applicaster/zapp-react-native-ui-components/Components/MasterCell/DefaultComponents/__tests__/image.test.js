import React from "react";
import TestRenderer from "react-test-renderer";
import CustomImage from "../Image";
import { Image } from "react-native";

describe("image with no source", () => {
  it("Uses provided placeholder image string", () => {
    const testRenderer = TestRenderer.create(
      <CustomImage placeholderImage={"foo"} />
    );
    const testInstance = testRenderer.root;
    expect(testInstance.findByType(Image).props.source).toEqual({
      uri: "foo",
    });
  });

  it("Uses provided placeholder image object", () => {
    const testRenderer = TestRenderer.create(
      <CustomImage placeholderImage={{ uri: "foo" }} />
    );
    const testInstance = testRenderer.root;
    expect(testInstance.findByType(Image).props.source).toEqual({
      uri: "foo",
    });
  });

  it("Uses provided placeholder image with correct aspect ratio", () => {
    const style = { aspectRatio: 3.2 };

    const testRenderer = TestRenderer.create(<CustomImage {...{ style }} />);
    const testInstance = testRenderer.root;
    expect(testInstance.findByType(Image).props.source).toEqual({
      uri: "placeholder_3.2",
    });
  });

  it("Returns null if no image or placeholder defined", () => {
    const testRenderer = TestRenderer.create(
      <CustomImage placeholderImage={null} />
    );
    const testInstance = testRenderer.root;
    expect(testInstance.findByType(Image).props.source).toEqual(null);
  });

  it("Uses default source if no image or placeholder defined", () => {
    const style = { aspectRatio: 3.2 };

    const testRenderer = TestRenderer.create(
      <CustomImage defaultSource={"default"} {...{ style }} />
    );
    const testInstance = testRenderer.root;
    expect(testInstance.findByType(Image).props.defaultSource).toEqual(
      "default"
    );
  });
});
