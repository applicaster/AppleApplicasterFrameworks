const {
  runtimeConfigurationUrlsCreator,
} = require("../runtimeConfigurationUrlsCreator");

const R = require("ramda");

jest.mock("../../../render", () => ({
  saveConfigFile: jest.fn(),
}));

const { saveConfigFile } = require("../../../render");

const appVersionId = "A1234";
const { build_params: buildParams } = require("./fixtures/buildParams.json");

const configuration = {
  buildParams,
  appVersionId,
};

const { cell_styles_url, ...restOfBuildParams } = buildParams;

const configurationWithNoCellStylesUrl = {
  buildParams: restOfBuildParams,
  appVersionId,
};

const runtimeConfigurationUrls = R.pick(
  [
    "styles_url",
    "remote_configurations_url",
    "plugin_configurations_url",
    "rivers_url",
    "cell_styles_url",
  ],
  buildParams
);

const runtimeConfigurationUrlsWithoutCellStylesUrl = R.pick(
  [
    "styles_url",
    "remote_configurations_url",
    "plugin_configurations_url",
    "rivers_url",
  ],
  buildParams
);

describe("runtimeConfigurationUrlsCreator", () => {
  beforeEach(() => {
    saveConfigFile.mockClear();
  });

  it("gets the runtime configuration urls from the build params and saves them to a file", async () => {
    await runtimeConfigurationUrlsCreator(configuration);

    expect(saveConfigFile).toHaveBeenCalledWith(
      configuration,
      "runtime_configuration_urls.json",
      runtimeConfigurationUrls
    );
  });

  it("discards null urls", async () => {
    await runtimeConfigurationUrlsCreator(configurationWithNoCellStylesUrl);

    expect(saveConfigFile).toHaveBeenCalledWith(
      configurationWithNoCellStylesUrl,
      "runtime_configuration_urls.json",
      runtimeConfigurationUrlsWithoutCellStylesUrl
    );
  });
});
