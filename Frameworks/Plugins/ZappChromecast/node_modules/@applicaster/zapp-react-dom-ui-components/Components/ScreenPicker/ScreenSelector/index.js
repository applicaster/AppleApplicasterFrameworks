// @flow
import * as R from "ramda";
import * as React from "react";

import { Dimensions } from "react-native";
import { screenSelectorStyle } from "../styles";
import { ScreenSelectorCell } from "./ScreenSelectorCell";
import { VariableOffsetContainer } from "../../VariableOffsetContainer";

type Props = {
  style: {},
  selectedItem: {},
  selectItem: (any) => void,
  onFocus: ({}) => void,
  onBlur: ?({}) => void,
  hasReceivedFocus: ({}) => void,
  hasPreferredFocu: ({}) => void,
  entry: [],
  cellStyle: ?Array<any>,
  CellRenderer: React.componentType<{ item: Object, state: string }>,
  componentId: string,
  preferredFocus: ?boolean,
  groupId: ?string,
};

const componentType = "screenSelector";
const { height: SCREEN_HEIGHT } = Dimensions.get("screen") || {
  height: "1080",
};

const MENU_HEIGHT = 120;
const SCREEN_PICKER_PADDING = 110;

function shouldScrollDown(itemRect) {
  return SCREEN_HEIGHT - itemRect.top < itemRect.height * 2;
}

function shouldScrollUp(itemRect) {
  return itemRect.top < MENU_HEIGHT + SCREEN_PICKER_PADDING;
}

export class ScreenSelector extends React.Component<Props> {
  constructor(props) {
    super(props);
    this.onPress = this.onPress.bind(this);
    this.onFocus = this.onFocus.bind(this);
    this.assignOffsetUpdater = this.assignOffsetUpdater.bind(this);
    this.scrollVerticallyIfNeeded = this.scrollVerticallyIfNeeded.bind(this);
  }

  scrollVerticallyIfNeeded(index, focusable) {
    const itemRect = focusable.getRect();

    if (shouldScrollDown(itemRect)) {
      this.offsetUpdater("vertical", -itemRect.height);
    }

    if (shouldScrollUp(itemRect)) {
      this.offsetUpdater("vertical", itemRect.height);
    }
  }

  assignOffsetUpdater(offsetUpdater) {
    this.offsetUpdater = offsetUpdater;
  }

  onPress(item, index) {
    const { selectItem } = this.props;
    selectItem(item, index);
  }

  onFocus(item, index, focusable) {
    this.scrollVerticallyIfNeeded(index, focusable);
  }

  renderItems() {
    const { entry, CellRenderer, componentId, selectedItem } = this.props;

    return entry.map((item, index) => (
      <ScreenSelectorCell
        componentId={componentId}
        item={item}
        key={index}
        index={index}
        componentType={componentType}
        CellRenderer={CellRenderer}
        hasPreferredFocus={index === 0}
        navigator={navigator}
        onPress={this.onPress}
        onFocus={this.onFocus}
        selected={R.equals(item, selectedItem)}
      />
    ));
  }

  render() {
    return (
      <VariableOffsetContainer
        saveUpdaterFunction={this.assignOffsetUpdater}
        baseStyles={screenSelectorStyle}
        initialHorizontalOffset={0}
        initialVerticalOffset={0}
      >
        {(styles) => <div style={styles}>{this.renderItems()}</div>}
      </VariableOffsetContainer>
    );
  }
}
