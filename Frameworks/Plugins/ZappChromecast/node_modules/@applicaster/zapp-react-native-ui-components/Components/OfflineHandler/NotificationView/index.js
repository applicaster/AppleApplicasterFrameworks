// @flow
import * as React from "react";
import { View, Text, Animated, StyleSheet } from "react-native";
import { getStatusBarHeight } from "react-native-status-bar-height";
const { useEffect, useState } = React;
const isIphoneX = getStatusBarHeight() === 44;
const notificationHeight = isIphoneX ? 70 : 36;

const offlineBackgroundColor = "rgba(2, 121, 255, 1)";
const onlineBackgroundColor = "rgba(33, 33, 33, 0.9)";
const onlineFontColor = offlineBackgroundColor;
const offlineFontColor = "white";

export const onlinePhrase = "You are back online";
export const offlinePhrase = "No internet connection";
const styles = StyleSheet.create({
  container: {
    flex: 1,
    position: "relative",
  },
  notificationView: {
    flex: 1,
    position: "absolute",
    alignItems: "center",
    justifyContent: "center",
    bottom: 0,
    left: 0,
    right: 0,
  },
  text: {
    fontWeight: "500",
    lineHeight: 16,
    fontSize: 12,
    letterSpacing: -0.18,
  },
  iphoneXSpacer: {
    height: 34,
  },
});

type Props = {
  children: React.Node,
  hidden?: boolean,
  online: ?boolean,
};

type NumberBoolean = 0 | 1;

type NotificationState = [
  NumberBoolean,
  ((NumberBoolean => NumberBoolean) | NumberBoolean) => void
];

export const NotificationView = ({
  children,
  hidden = true,
  online = true,
}: Props): React.Node => {
  const [
    notificationOpacity,
    setNotificationOpacity,
  ]: NotificationState = useState(0);
  const [yPosition] = useState(new Animated.Value(notificationHeight));

  useEffect(() => {
    hidden ? hideNotification() : showNotification();
  }, [hidden]);

  const showNotification = () => {
    setNotificationOpacity(1);
    Animated.timing(yPosition, {
      toValue: 0,
      useNativeDriver: true,
      duration: 300,
    }).start();
  };

  const hideNotification = () => {
    Animated.timing(yPosition, {
      toValue: notificationHeight,
      useNativeDriver: true,
      duration: 300,
    }).start(() => {
      setNotificationOpacity(0);
    });
  };

  const backgroundColor = online
    ? onlineBackgroundColor
    : offlineBackgroundColor;

  const animatedViewStyles = {
    ...styles.notificationView,
    transform: [{ translateY: yPosition }],
    opacity: notificationOpacity,
    height: notificationHeight,
    backgroundColor,
  };

  const textStyles = {
    ...styles.text,
    color: online ? onlineFontColor : offlineFontColor,
  };

  return (
    <View style={styles.container}>
      {children}
      <Animated.View style={animatedViewStyles}>
        <Text style={textStyles}>{online ? onlinePhrase : offlinePhrase}</Text>
        {isIphoneX && <View style={styles.iphoneXSpacer} />}
      </Animated.View>
    </View>
  );
};
