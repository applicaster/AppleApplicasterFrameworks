// @flow
import * as ReactNative from "react-native";
import {
  sendQuickBrickEvent,
  QUICK_BRICK_EVENTS,
} from "@applicaster/zapp-react-native-bridge/QuickBrick";

type OrientationTypes = 1 | 2 | 4 | 6 | 7 | 8 | 15;

/**
 * @enum {Orientations}
 */
export const ORIENTATIONS = {
  portrait: 1,
  landscapeRight: 2,
  landscapeLeft: 4,
  landscapeSensor: 6,
  allButUpsideDown: 7,
  portraitUpsideDown: 8,
  all: 15,
};

/**
 * This events sets the allowed screen orientations for current screen
 * example for portrait and both landscape: allowedOrientationsForScreen(ORIENTATIONS.allButUpsideDown)
 * (use enum provided in this module)
 * Example of forcing landscape right: allowedOrientationsForScreen(ORIENTATIONS.landscapeRight)
 * (use enum provided in this module)
 * @param {OrientationTypes} orientation - Allowed orientations
 */
export const allowedOrientationsForScreen = (
  orientation: OrientationTypes
): void => {
  sendQuickBrickEvent(QUICK_BRICK_EVENTS.ALLOWED_ORIENTATIONS_FOR_SCREEN, {
    orientation,
  });
};

/**
 * This event releases the recent allowedOrientationsForScreen and sets it to the previous state.
 * It's recommended to call it on componentWillUnmount or in the useEffect hook cleanup
 */
export const releaseOrientationsForScreen = (): void => {
  sendQuickBrickEvent(QUICK_BRICK_EVENTS.RELEASE_ORIENTATIONS_FOR_SCREEN);
};

/**
 *
 * @callback orientationChangeCallback
 * @param {Object}: response
 * @param {Orientations}: response.toOrientation - Current orientation
 * @param {Orientations}: response.fromOrientation - Previous orientation
 */

/**
 * Sets and return orientationChange listener
 * @param {orientationChangeCallback} callback - called on orientation change with the new and old orientation
 * @return {*} - orientationChange Listener instance
 */
export const addOrientationChangeListener = (callback: {
  toOrientation: OrientationTypes,
  fromOrientation: OrientationTypes,
}): any => {
  try {
    const { DeviceEventEmitter } = ReactNative;
    return DeviceEventEmitter.addListener("orientationChange", callback);
  } catch (err) {
    /* eslint-disable-next-line */
    console.warn("There was a problem adding orientationChange listener", err);
  }
};

/**
 * Removes listener by calling remove method on the provided orientationChange listener instance
 * @param {*} listener - orientationChange listener instance
 */
export const removeOrientationChangeListener = (listener: any): void => {
  try {
    listener.remove();
  } catch (err) {
    /* eslint-disable-next-line */
    console.warn(
      "There was a problem removing orientationChange listener",
      err
    );
  }
};
