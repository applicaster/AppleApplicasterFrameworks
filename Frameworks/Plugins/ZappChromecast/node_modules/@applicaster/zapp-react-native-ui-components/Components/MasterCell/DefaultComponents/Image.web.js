// @flow
import * as React from "react";
import * as R from "ramda";
import { Image as RnImage } from "react-native";
type Props = {
  style: any,
  uri: ?string,
  remoteConfigurations: {},
  [string]: any,
  placeholderImage: ?string,
};

const placeholders = {
  "3.2": "placeholder_3.2",
};

function getPlaceholderUri(style, remoteConfigurations) {
  // If local SDK assets exist return that if not return remote assets
  const localAssets = R.prop("sdkAssets");
  const remoteAssets = R.path(["assets", "universal"]);
  const assets = R.either(localAssets, remoteAssets);
  // If style object has a key of aspectRatio return the value, if not False
  const aspectRatio = R.propOr(R.F, "aspectRatio")(style);
  // If placeholders object has a key for the specified aspect ratio return key
  const key = R.prop(aspectRatio)(placeholders);

  const placeholderUri = R.compose(
    R.either(R.prop(key), R.prop("placeholder")),
    assets
  )(remoteConfigurations);
  return placeholderUri;
}

function getDefaultSource(placeholderImage, style, remoteConfigurations) {
  const defaultSource =
    placeholderImage === undefined
      ? getPlaceholderUri(style, remoteConfigurations)
      : placeholderImage;
  return { uri: defaultSource };
}

function Image({
  style,
  uri,
  remoteConfigurations,
  placeholderImage,
  ...otherProps
}: Props) {
  return (
    <RnImage
      defaultSource={getDefaultSource(
        placeholderImage,
        style,
        remoteConfigurations
      )}
      style={style}
      source={uri ? { uri } : null}
      {...otherProps}
    />
  );
}

export default Image;
