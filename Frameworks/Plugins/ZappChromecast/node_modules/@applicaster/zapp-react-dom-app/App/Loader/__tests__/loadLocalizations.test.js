import { loadLocalizations } from "../loadLocalizations";
import nock from "nock";

function getLocalizedString(locale) {
  const localizedStrings = {
    fr: {
      welcome_message: "Bonjour !",
    },
    en: {
      welcome_message: "Hello there !",
    },
  };
  return localizedStrings[locale];
}

const dispatch = jest.fn();
const localizations = {
  en: "http://example.com/en.json",
  fr: "http://example.com/fr.json",
};

nock("http://example.com:80", { encodedQueryParams: true })
  .get("/en.json")
  .reply(200, getLocalizedString("en"));

nock("http://example.com:80", { encodedQueryParams: true })
  .get("/fr.json")
  .reply(200, getLocalizedString("fr"));

describe("loadLocalizations", () => {
  it("loads the localizations and dispatches the action to update the store", async () => {
    const resolver = jest.fn();
    const rejecter = jest.fn();

    await loadLocalizations(localizations, dispatch)
      .then(resolver)
      .catch(rejecter);

    expect(resolver).toHaveBeenCalled();
    expect(rejecter).not.toHaveBeenCalled();
    expect(dispatch).toHaveBeenCalled();
    expect(dispatch.mock.calls).toMatchSnapshot();
  });
});
