// @flow
import * as React from "react";
import * as R from "ramda";
import { View, StyleSheet } from "react-native";

import { Cell } from "../Cell";

import { Header } from "../Header";
import { itemLimitForData } from "@applicaster/zapp-react-native-ui-components/Helpers/DataSourceHelper";
import { FocusableList } from "@applicaster/zapp-react-native-ui-components/Components/FocusableList";

type Props = {
  component: React.ComponentType<any>,
  CellRenderer: React.componentType<{ item: Object, state: string }>,
  zappPipesData: {
    data: {
      title: string,
      entry: [{}],
    },
    loading: boolean,
    error: ?{},
  },
  componentIndex: number,
  parentFocus: {
    nextFocusDown: React.Ref,
    nextFocusRight: React.Ref,
    nextFocusLeft: React.Ref,
    nextFocusUp: React.Ref,
  },
  navigator: {
    push: (any) => void,
  },
  focused: boolean,
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 48,
    paddingLeft: 114,
  },
  flatList: { flex: 1 },
  cellWrapper: { flex: 1 },
});

function HorizontalList(props: Props) {
  const { component, CellRenderer, zappPipesData, parentFocus = {} } = props;

  const {
    styles: { header },
  } = component;

  const {
    data: { title, entry },
  } = zappPipesData;

  const dataSource = itemLimitForData(entry, component);
  const headerData = R.merge(header, { title });
  const flatListRef = React.useRef(null);

  const onListElementFocus = (element, { index }) => {
    flatListRef?.current?.scrollToIndex?.({
      animated: true,
      index: index,
    });
  };

  const onListElementPress = (element, { item }) => {
    const { navigator } = props;
    const screen_type =
      R.prop("screen_type", item) || R.path(["data", "target"], component);

    const newRoute = R.merge(item, { screen_type });
    navigator.push(newRoute);
  };

  // eslint-disable-next-line react/prop-types
  const renderItem = ({ item, index, focused, parentFocus }) => {
    return (
      <Cell
        style={styles.cellWrapper}
        focused={focused}
        CellRenderer={CellRenderer}
        item={item}
      />
    );
  };

  return (
    <View style={styles.container}>
      <Header {...headerData} />
      <FocusableList
        focused={props.focused}
        ref={flatListRef}
        style={styles.flatList}
        horizontal
        removeClippedSubviews
        renderItem={renderItem}
        showsHorizontalScrollIndicator={false}
        keyExtractor={R.prop("id")}
        data={dataSource}
        onListElementFocus={onListElementFocus}
        onListElementPress={onListElementPress}
        {...{ ...parentFocus, initialNumToRender: 6 }}
      />
    </View>
  );
}

export const HorizontalListComponent = HorizontalList;
