const template = require("../index");
const packageJson = require("../package.json");
const R = require("ramda");

jest.mock("path", () => ({
  ...require.requireActual("path"),
  resolve: (...args) => {
    const pathJoin = require.requireActual("path").join;
    const actualPath = pathJoin(process.cwd(), "..");
    return pathJoin(...args).replace(actualPath, "");
  },
}));

describe("appTemplate", () => {
  it("is properly structured", () => {
    const { files, dependencies, scripts } = template;
    expect(files).toMatchSnapshot();
    expect(scripts).toMatchSnapshot();

    expect(dependencies.length).toBe(12);

    const [coreDependencies, otherDependencies] = R.partition(
      d => d.name.includes("@applicaster/"),
      dependencies
    );

    expect(otherDependencies).toMatchSnapshot();

    coreDependencies.forEach(dependency => {
      expect(dependency).toHaveProperty("type");
      expect(dependency).toHaveProperty("name", dependency.name);
      expect(dependency).toHaveProperty(
        "version",
        packageJson.dependencies[dependency.name]
      );
    });
  });

  it("forms the path for the config file", () => {
    const {
      files: { filesToRender },
    } = template;

    const { filePath: filePathFn } = filesToRender[1];
    expect(filePathFn({ platform: "ios" })).toBe("config/index.ios.js");
  });
});
