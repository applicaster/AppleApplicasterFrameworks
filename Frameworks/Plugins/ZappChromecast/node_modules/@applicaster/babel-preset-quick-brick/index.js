const defaultPlugins = [
  ["@babel/plugin-proposal-decorators", { legacy: true }],
];

function webConfig(options = {}) {
  const { env } = options;

  return {
    compact: true,
    presets: [["@babel/preset-env", env]],
    plugins: [
      "react-hot-loader/babel",
      ["@babel/plugin-syntax-dynamic-import"],
      ["@babel/plugin-proposal-optional-chaining"],
      ["@babel/plugin-transform-react-jsx"],
      ["babel-plugin-react-native-web"],
      "@babel/plugin-transform-flow-strip-types",
      [
        "@babel/plugin-proposal-class-properties",
        // use `this.foo = bar` instead of `this.defineProperty('foo', ...)`
        { loose: true },
      ],
    ],
  };
}

function nativeConfig() {
  return {
    presets: ["module:metro-react-native-babel-preset"],
    plugins: [],
  };
}

const VALID_PLATFORMS = ["web", "native"];

module.exports = function(babel, options) {
  const { platform } = options;

  if (!platform) {
    throw new Error(
      "you need to provide a platform property in your quick-brick preset options (web | native)"
    );
  }

  if (!VALID_PLATFORMS.includes(platform)) {
    throw new Error(
      `${platform} is not a valid platform for @applicaster/quick-brick preset. Set it to either \`web\` or \`mobile\``
    );
  }

  const platformConfig =
    platform === "web" ? webConfig(options) : nativeConfig(options);

  return {
    compact: true,
    presets: platformConfig.presets,
    overrides: [
      {
        plugins: [...defaultPlugins, ...platformConfig.plugins],
      },
    ],
  };
};
