// @flow
import * as React from "react";
import { View, LayoutAnimation, Platform, UIManager } from "react-native";

if (Platform.OS === "android") {
  if (UIManager.setLayoutAnimationEnabledExperimental) {
    UIManager.setLayoutAnimationEnabledExperimental(true);
  }
}
type Props = {
  baseStyles: {},
  saveUpdaterFunction: () => {},
  children: ({}, () => {}) => React.ComponentType<any>,
  transitionDelay: ?number,
  transitionDuration: ?number,
  easing: ?string,
  initialHorizontalOffset: ?Number,
  initialVerticalOffset: ?Number,
};
type State = {
  styles: {},
  verticalOffset: number,
  horizontalOffset: number,
};

export class VariableOffsetContainer extends React.Component<Props, State> {
  constructor(props) {
    super(props);

    const {
      baseStyles,
      initialHorizontalOffset = 0,
      initialVerticalOffset = 0,
    } = this.props;

    this.state = {
      styles: baseStyles,
      verticalOffset: initialVerticalOffset,
      horizontalOffset: initialHorizontalOffset,
    };

    this.setOffset = this.setOffset.bind(this);
  }

  animate(verticalOffset, horizontalOffset, animated, cb) {
    const { transitionDuration = 90 } = this.props;
    if (animated) {
      const CustomLayoutAnimation = {
        duration: transitionDuration,
        update: {
          type: LayoutAnimation.Types.easeInEaseOut,
        },
      };
      LayoutAnimation.configureNext(CustomLayoutAnimation);
    }
    this.setState({ verticalOffset, horizontalOffset }, cb);
  }

  offsetDirectionIs(direction, match) {
    if (direction === "both") {
      return true;
    }

    return direction === match;
  }

  setOffset(direction, value = 0, animated = true, cb) {
    const val = isNaN(value) ? 0 : value;

    const verticalOffset = this.offsetDirectionIs(direction, "vertical")
      ? val
      : 0;
    const horizontalOffset = this.offsetDirectionIs(direction, "horizontal")
      ? val
      : 0;

    this.animate(
      this.state.verticalOffset + verticalOffset,
      this.state.horizontalOffset + horizontalOffset,
      animated,
      cb
    );
  }

  render() {
    const { styles, verticalOffset, horizontalOffset } = this.state;
    const { children } = this.props;
    return (
      <View
        style={{
          marginTop: verticalOffset,
          marginLeft: horizontalOffset,
        }}
      >
        {children(styles, this.setOffset)}
      </View>
    );
  }
}
