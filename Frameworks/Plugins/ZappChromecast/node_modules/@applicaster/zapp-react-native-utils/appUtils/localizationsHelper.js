/* global window */
import * as R from "ramda";

/**
 * helper function which returns the first entry in an object
 * @param {Object}
 * @returns {Any}
 */
const getFirstObjectValue = R.compose(R.head, R.values);

/**
 * gets the app's locale. Current function is based on the navigator's
 * language settings. Other scenarios can be added for other platforms
 * @return {string}
 */
export function getLocale() {
  return R.compose(
    R.unless(R.isNil, R.toLower),
    R.path(["navigator", "language"])
  )(window);
}

/**
 *
 * Gets country code from the locale string and returns it's lowercase value
 * @returns {string} example: en
 */
export function getLanguageCode() {
  const locale = getLocale();
  return R.unless(R.isNil, R.compose(R.head, R.split("-")))(locale);
}

/**
 *
 * Gets country code from the locale string and returns it's lowercase value
 * @returns {string} example: gb
 */
export function getCountryCode() {
  const locale = getLocale();
  return R.unless(R.isNil, R.compose(R.last, R.split("-")))(locale);
}

/**
 * returns the localization for the app based on the locale. If the locale is null
 * or undefined, or if the given locale doesn't exist in the localizations,
 * it will return the first locale available in the localizations dictionary
 * @param {Object} options
 * @param {Object} options.localizations dictionary of localized strings
 * indexed by their respective locale
 * @returns {Object} dictionary of localized strings for the given locale
 */
export function getLocalizations({ localizations }) {
  const locale = getLanguageCode();

  if (!locale) {
    return getFirstObjectValue(localizations);
  }

  return R.ifElse(
    R.has(locale),
    R.prop(locale),
    getFirstObjectValue
  )(localizations);
}
