// @flow
import * as R from "ramda";
import * as React from "react";

import { ThemeContext } from "@applicaster/zapp-react-native-utils/theme";

type Plugin = {
  name: string,
  identifier: string,
  module: any,
  type: String,
  configuration: { [string]: any },
};

type Props = {
  children: React.Node,
  plugins: [Plugin],
};

const DEFAULT_THEME_ID = "base-theme";

function populateTheme(plugin) {
  const { id, getProps } = plugin?.module || {};

  if (!id || !getProps) {
    return null;
  }

  return [id, getProps(plugin?.configuration || {})];
}

const selectThemes = R.compose(
  R.fromPairs,
  R.reject(R.isNil),
  R.map(populateTheme),
  R.filter(R.pathEq(["module", "isTheme"], true))
);

export function ThemeManager({ children, plugins }: Props): React.Node {
  const [themes, setThemes] = React.useState(selectThemes(plugins));
  const [selectedThemeId, setSelectedThemeId] = React.useState(
    DEFAULT_THEME_ID
  );

  React.useEffect(() => {
    const themePlugins = selectThemes(plugins);
    setThemes(themePlugins);
  }, [plugins]);

  return (
    <ThemeContext.Provider
      value={{ themes, selectedThemeId, setSelectedThemeId }}
    >
      {children}
    </ThemeContext.Provider>
  );
}
