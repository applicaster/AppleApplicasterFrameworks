// @flow
import * as React from "react";
import { View, Text, Image } from "react-native";
import * as R from "ramda";
import { Focusable } from "@applicaster/zapp-react-native-ui-components/Components/Focusable";

import {
  navItemImageOnlyStyle,
  navItemContent,
  navItemContentFocused,
  navItemContentText,
  navItemContentTextSelected,
  navItemIcon,
  navItemIconFocused,
  navItemContentTextProps,
} from "../styles";
import { focusableItemIdByData, menuGroupId } from "../helpers.js";
import { fixColorHexCode } from "@applicaster/zapp-react-native-utils/stylesUtils";

type NavItemProps = {
  item: any,
  index: number,
  homeItemId: string,
  shouldHaveFocus: boolean,
  onNavigationItemFocus: any => void,
  onNavigationItemBlur: any => void,
  navigationType: string,
  shouldHideNavigationButtons: boolean,
  isSelected: boolean,
  menuStyles: {
    item_color: string,
    item_selected_color: string,
    item_font_size: string,
    item_selected_font_size: string,
    item_underline_color: string,
    rtl: boolean,
  },
  isFocusableDisabled: boolean,
  preferredFocus: boolean,
};

export function NavItem({
  item,
  index,
  homeItemId,
  preferredFocus,
  shouldHaveFocus,
  onNavigationItemFocus,
  onNavigationItemBlur,
  navigationType,
  shouldHideNavigationButtons,
  isSelected,
  menuStyles,
  isFocusableDisabled,
}: NavItemProps) {
  const { navigationItem } = item;
  const { title, type } = navigationItem;
  const icon = R.path(["assets", "icon"], navigationItem);
  const iconSelected = R.path(["assets", "icon_selected"], navigationItem);
  const iconFocused = R.path(["assets", "icon_focused"], navigationItem);

  const targetId = R.path(["data", "target"], navigationItem);
  const checkIfImageOnlyType = arg =>
    R.or(R.equals(arg, "tv_right_image"), R.equals(arg, "tv_left_image"));

  const isImageOnly = checkIfImageOnlyType(type);
  const itemId = focusableItemIdByData(item);

  const isHome = itemId === homeItemId;

  const buttonState = R.path(["styles", "state"])(navigationItem);
  const isImageButton = buttonState && buttonState === "image";
  function iconForState(focused) {
    if (focused) {
      return iconFocused;
    } else if (isSelected) {
      return iconSelected;
    } else {
      return icon;
    }
  }

  function presentFocusableItem() {
    return (
      <Focusable
        preferredFocus={preferredFocus}
        focusable={
          !!(
            shouldHaveFocus === true ||
            isFocusableDisabled === false ||
            isSelected === true
          )
        }
        groupId={menuGroupId}
        id={itemId}
        opacity={shouldHideNavigationButtons === false ? 1 : 0}
        onFocus={e => {
          onNavigationItemFocus({
            e,
            item,
            index,
            isHome,
          });
        }}
        onBlur={e => onNavigationItemBlur({ e, item, index, targetId })}
        isParallaxDisabled={true}
      >
        {focused =>
          isImageButton
            ? presentImageButton(focused)
            : presentTextButton(focused)
        }
      </Focusable>
    );
  }
  function presentTextButton(focused) {
    const {
      item_color = "#ff686868",
      item_selected_color = "#ff9a9a9a",
      item_font_size = 20,
      item_selected_font_size = 20,
      item_underline_color = "#ffffffff",
      rtl = false,
    } = menuStyles;

    const navItemStyleFocused = {
      ...navItemContentFocused,
      borderColor: fixColorHexCode(item_underline_color),
    };

    const navItemStyleTextSelected = {
      ...navItemContentTextSelected,
      color: fixColorHexCode(item_selected_color),
      fontSize: parseInt(item_selected_font_size, 10),
      writingDirection: rtl ? "rtl" : "ltr",
    };

    const navItemStyleText = {
      ...navItemContentText,
      color: fixColorHexCode(item_color),
      fontSize: parseInt(item_font_size, 10),
      writingDirection: rtl ? "rtl" : "ltr",
    };

    const { maxCharactersAllowed, tailString } = navItemContentTextProps;
    const correctedTitle =
      title && title.length > maxCharactersAllowed
        ? title.slice(0, maxCharactersAllowed) + tailString
        : title;
    return (
      <View
        style={
          shouldHaveFocus && focused && isFocusableDisabled === false
            ? navItemStyleFocused
            : navItemContent
        }
      >
        <Text
          style={
            isSelected || shouldHaveFocus
              ? navItemStyleTextSelected
              : navItemStyleText
          }
        >
          {correctedTitle}
        </Text>
      </View>
    );
  }
  function presentImageButton(focused) {
    return (
      <View style={focused}>
        <Image
          style={shouldHaveFocus ? navItemIconFocused : navItemIcon}
          source={{ uri: iconForState(focused) }}
        />
      </View>
    );
  }
  return isImageOnly ? (
    <Image source={{ uri: icon }} style={navItemImageOnlyStyle} />
  ) : targetId && shouldHideNavigationButtons === false ? (
    presentFocusableItem()
  ) : null;
}
