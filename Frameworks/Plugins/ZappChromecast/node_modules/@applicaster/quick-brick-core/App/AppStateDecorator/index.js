// @flow
import * as React from "react";
import { AppState } from "react-native";
import * as R from "ramda";

import { connectToStore } from "@applicaster/zapp-react-native-redux";
import { setAppState } from "@applicaster/zapp-react-native-redux/appState";

type Props = {
  Component: () => React.ComponentType<any>,
  plugins: [{}],
  dispatch: () => void,
};

function withAppManagerDecorator(
  Component: React.ComponentType<any>
): React.ComponentType<any> {
  return class AppStateManagerComponent extends React.Component<Props> {
    constructor(props: Props) {
      super(props);

      this.currentState = AppState.currentState;
      this.isAvailable = AppState.isAvailable;
      this.plugins = [];
    }

    componentDidMount() {
      this.plugins = this.getAppStatePlugins();
      AppState.addEventListener("change", this.onChange);
    }

    componentWillUnmount() {
      AppState.removeEventListener("change", this.onChange);
    }

    dispatchAction(nextState, eventType) {
      const { isAvailable, currentState } = this;
      const { dispatch } = this.props;

      this.currentState = nextState;
      this.sendAppStateToPlugins(this.plugins, nextState);

      dispatch(
        setAppState({
          isAvailable,
          currentState,
          nextState,
          eventType,
        })
      );
    }

    getAppStatePlugins() {
      return R.compose(
        R.sortBy(R.path(["module", "weight"])),
        R.filter(R.pathEq(["module", "isAppStateListener"], true)),
        R.prop("plugins")
      )(this.props);
    }

    onChange = nextState => {
      this.dispatchAction(nextState, "change");
    };

    sendAppStateToPlugins([currentPlugin, ...remainingPlugins], appState) {
      if (currentPlugin && currentPlugin.module) {
        return currentPlugin.module
          .run(appState, currentPlugin.configuration)
          .then(next => {
            if (next) {
              if (remainingPlugins && remainingPlugins.length) {
                return this.sendAppStateToPlugins(remainingPlugins, appState);
              }
            }
          });
      }
    }

    render() {
      return <Component {...this.props} />;
    }
  };
}

export const withAppManager = R.compose(
  connectToStore(R.pick(["plugins"])),
  withAppManagerDecorator
);
