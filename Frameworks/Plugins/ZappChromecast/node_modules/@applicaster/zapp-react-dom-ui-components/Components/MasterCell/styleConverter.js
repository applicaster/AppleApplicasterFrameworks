import * as R from "ramda";

const BASE_WIDTH = 320;

function getTargetStyle([key, value]) {
  switch (key) {
    case "paddingHorizontal":
      return {
        paddingLeft: value,
        paddingRight: value,
      };

    case "paddingVertical":
      return {
        paddingTop: value,
        paddingBottom: value,
      };

    case "marginHorizontal":
      return {
        marginLeft: value,
        marginRight: value,
      };

    case "marginVertical":
      return {
        marginTop: value,
        marginBottom: value,
      };

    case "numberOfLines":
      return {
        textOverflow: "ellipsis",
        overflow: "hidden",
        display: "-webkit-box",
        WebkitLineClamp: value,
        WebkitBoxOrient: "vertical",
      };

    case "lineHeight":
      return { lineHeight: `${value}px` };

    case "aspectRatio":
      return {
        width: BASE_WIDTH,
        height: Math.round(BASE_WIDTH / Number(value || 1), 0),
      };

    default:
      return { [key]: value };
  }
}

function convertStyles(styles, currentStyle) {
  return R.compose(
    R.merge(styles),
    getTargetStyle
  )(currentStyle);
}

export function styleConverter(originStyles, baseStyles, otherProps) {
  return R.compose(
    R.merge(baseStyles),
    R.reduce(convertStyles, {}),
    R.toPairs,
    R.unless(() => R.isNil(otherProps), R.merge(otherProps))
  )(originStyles);
}
