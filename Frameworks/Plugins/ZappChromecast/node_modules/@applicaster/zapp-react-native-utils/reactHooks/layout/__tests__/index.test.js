import { useDimensions } from "../";
import { renderHook, cleanup } from "@testing-library/react-hooks";
import { Dimensions } from "react-native";

jest.mock("Dimensions");
describe("useDimensions", () => {
  it("renders", () => {
    const { result } = renderHook(() => useDimensions("window", true));
    expect(result).toBeDefined();
  });

  it("sets event listener", () => {
    renderHook(() => useDimensions("window", true));
    expect(Dimensions.addEventListener).toBeCalledWith(
      "change",
      expect.any(Function)
    );
  });
  it("removes event listener", () => {
    renderHook(() => useDimensions("window", true));
    cleanup();
    expect(Dimensions.removeEventListener).toBeCalledWith("change");
  });
  it("Returns full dimensions object", () => {
    const {
      result: { current: dimensions },
    } = renderHook(() => useDimensions("window", true));

    expect(dimensions).toHaveProperty("height");
    expect(dimensions).toHaveProperty("width");
    expect(dimensions).toHaveProperty("scale");
    expect(dimensions).toHaveProperty("fontScale");
  });

  it("Returns shorthand dimensions object", () => {
    const {
      result: { current: dimensions },
    } = renderHook(() => useDimensions("window"));

    expect(dimensions).toHaveProperty("height");
    expect(dimensions).toHaveProperty("width");
    expect(dimensions).not.toHaveProperty("scale");
    expect(dimensions).not.toHaveProperty("fontScale");
  });

  it("updates the ", () => {
    renderHook(() => useDimensions("window", true));
    cleanup();
    expect(Dimensions.removeEventListener).toBeCalledWith("change");
  });
});
