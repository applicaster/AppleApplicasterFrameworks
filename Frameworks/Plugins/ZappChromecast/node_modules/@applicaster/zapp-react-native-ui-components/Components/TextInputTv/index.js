// @flow
import React from "react";
import * as R from "ramda";
import { TextInput, Platform, StyleSheet } from "react-native";
import { isFunction } from "@applicaster/zapp-react-native-utils/functionUtils";

type Props = {
  style: any,
  onChangeText: any,
  onChange: any,
  secureTextEntry: bool,
  onEndEditing: any,
  onBlur: any,
  onPress: any
};

function textInputTV (props: Props, ref: any) {
  const { onChangeText, onChange, style, secureTextEntry, onEndEditing, onBlur, onPress } = props;
  const isSamsung = Platform.OS === "samsung_tv";

  const onChangeTextPolyfill = (onChange: function):function =>
    R.compose(
      onChange,
      R.path(["target", "value"])
    );

  const getOnChangeText = () => {
    if (isSamsung) return undefined;
    return { onChangeText };
  };

  const getOnChange = () => {
    if (isSamsung) {
      if (onChange) return { onChange };
      if (onChangeText) {
        return { onChange: onChangeTextPolyfill(onChangeText) };
      }
    }
    return undefined;
  };

  const getStyle = () => {
    if (!style) return undefined;
    if (isSamsung) {
      if (StyleSheet && isFunction(StyleSheet.flatten)) {
        return { style: StyleSheet.flatten(style) };
      }
    }
    return { style };
  };

  const getSecureTextEntry = () => {
    if (typeof secureTextEntry === "undefined") return undefined;
    if (isSamsung) {
      if (secureTextEntry === true) {
        return { type: "password" };
      }
      return undefined;
    }
    return { secureTextEntry };
  };

  const getOnEndEditing = () => {
    if (!onEndEditing) return undefined;
    if (isSamsung) {
      return { onBlur: onBlur || onEndEditing };
    }
    return { onEndEditing };
  };

  const getOnPress = () => {
    if (!onPress) return undefined;
    if (isSamsung) {
      return { onClick: onPress };
    }
    return { onPress };
  };

  const getProps = () =>
    R.when(
      R.always(isSamsung),
      R.omit([
        "onChangeText",
        "secureTextEntry",
        "onEndEditing",
        "onPress"
      ])
    )(props);
  
  const inputProps = {
    ...getProps(),
    ...getStyle(),
    ...getOnChange(),
    ...getOnChangeText(),
    ...getSecureTextEntry(),
    ...getOnEndEditing(),
    ...getOnPress()
  };

  return isSamsung ? <input ref={ref} { ...inputProps } /> : <TextInput ref={ref} { ...inputProps } />;
}
// $FlowFixMe
export const TextInputTv = React.forwardRef(textInputTV);
