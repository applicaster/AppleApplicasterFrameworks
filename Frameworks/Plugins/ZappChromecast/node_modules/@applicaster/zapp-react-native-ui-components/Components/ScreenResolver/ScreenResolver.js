// @flow
import * as React from "react";
import * as R from "ramda";

import {
  findPluginByType,
  findPluginByIdentifier,
} from "@applicaster/zapp-react-native-utils/pluginUtils";
import { toPascalCase } from "@applicaster/zapp-react-native-utils/stringUtils";
import { HookRenderer } from "../HookRenderer";
import { LinkHandler } from "../LinkHandler";
import { Favorites } from "../Favorites";

type Props = {
  components: {
    [string]: React.ComponentType<{ screenId: string, locationState: any }>,
    River: React.ComponentType<any>,
    PlayerController: React.ComponentType<any>,
  },
  plugins: {
    [string]: React.ComponentType<{ screenId: string, locationState: any }>,
  },
  screenType: string,
  screenId: string,
  screenData: any,
};

export function ScreenResolverComponent(props: Props) {
  const { components, plugins, screenType, screenId, screenData } = props;
  const { hookPlugin } = screenData || {};
  const ScreenPlugin =
    findPluginByType(screenType, plugins) ||
    findPluginByIdentifier(screenType, plugins) ||
    findPluginByIdentifier(hookPlugin && hookPlugin.identifier, plugins) ||
    components[toPascalCase(screenType)];

  if (screenType === "favorites") {
    return <Favorites screenData={screenData} />;
  }

  if (screenType === "link") {
    return <LinkHandler screenData={screenData} plugins={plugins} />;
  }

  if (screenType === "playable") {
    const { PlayerController } = components;

    return <PlayerController Player={ScreenPlugin} item={screenData} />;
  }

  if (hookPlugin) {
    return <HookRenderer screenData={screenData} />;
  }

  const ScreenComponent =
    R.path(["module", "Component"], ScreenPlugin) ||
    R.prop("module", ScreenPlugin) ||
    ScreenPlugin;

  const configuration =
    R.prop("configuration", ScreenPlugin) ||
    R.prop("__plugin_configuration", ScreenComponent);

  if (ScreenComponent) {
    return (
      <ScreenComponent
        screenId={screenId}
        screenData={screenData}
        configuration={configuration}
        {...props}
      />
    );
  }

  return null;
}
