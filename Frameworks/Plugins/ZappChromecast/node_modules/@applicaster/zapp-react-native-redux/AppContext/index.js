import { actionCreator } from "../helpers";
import { identity } from "ramda";
import { riversLoader } from "./riversLoader";
import { pluginConfigurationsLoader } from "./pluginConfigurationsLoader";
import { pluginsLoader } from "./pluginsLoader";

export const LOAD_APP_CONTEXT = context => `LOAD_${context.toUpperCase()}`;

/**
 * Returns a custom loader for a specific context
 * returns identity function for now see {@link https://ramdajs.com/docs/#identity}
 * @param {String} context
 * @returns {Function} specific loader for the context
 */
function applyLoader(context) {
  switch (context) {
    case "rivers":
      return riversLoader;

    case "pluginConfigurations":
      return pluginConfigurationsLoader;

    case "plugins":
      return pluginsLoader;
    case "styles":
    default:
      return identity;
  }
}

/**
 * returns an action creator to load data from a specific context
 *
 * @export
 * @param {string} context
 * @returns {function} action creator to load data for that specific context
 */
export function loadAppContext(context) {
  const loader = applyLoader(context);

  return function(payload) {
    return actionCreator(LOAD_APP_CONTEXT(context), loader(payload));
  };
}

/**
 * returns a reducer to handle data from a specific context
 *
 * @param {string} context
 * @returns {function} reducer function to handle data for that specific context
 */
function reducer(context) {
  // create a `LOAD_${context}` constant for reducer to catch the proper action type
  const CONTEXT_LOADER_CONST = LOAD_APP_CONTEXT(context);

  return function(state = {}, { type, payload }) {
    switch (type) {
      case CONTEXT_LOADER_CONST:
        return payload;

      default:
        return state;
    }
  };
}

export default reducer;
