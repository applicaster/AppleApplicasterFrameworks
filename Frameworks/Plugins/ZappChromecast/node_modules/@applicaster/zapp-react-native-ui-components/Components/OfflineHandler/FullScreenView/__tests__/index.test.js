import React from "react";
import { shallow } from "enzyme";
import { testIDEquals } from "@applicaster/zapp-react-native-utils/testUtils";
import { FullScreenView, offlinePhrase, onlinePhrase } from "../";

describe("FullScreenView", () => {
  const TestComponent = () => null;
  it("renders without props", () => {
    shallow(<FullScreenView />);
  });
  it("Just renders children if hidden is true", () => {
    const wrapper = shallow(
      <FullScreenView hidden>
        <TestComponent testID="test" />
      </FullScreenView>
    );
    const testComponent = wrapper.findWhere(testIDEquals("test"));

    expect(testComponent.exists()).toBe(true);
  });
  it("renders Screen With SafeAreView when hidden is false", () => {
    const wrapper = shallow(
      <FullScreenView hidden={false}>
        <TestComponent testID="test" />
      </FullScreenView>
    );
    const FullScreenContainer = wrapper.findWhere(testIDEquals("container"));
    expect(FullScreenContainer.exists()).toBe(true);
  });
  it("says online and shows button if online", () => {
    const wrapper = shallow(
      <FullScreenView online={true} hidden={false}>
        <TestComponent testID="test" />
      </FullScreenView>
    );
    const textComponent = wrapper.findWhere(testIDEquals("text")).shallow();
    expect(textComponent.props().children).toBe(onlinePhrase);
  });
  it("says offline and hides button when offline", () => {
    const wrapper = shallow(
      <FullScreenView online={false} hidden={false}>
        <TestComponent testID="test" />
      </FullScreenView>
    );
    const textComponent = wrapper.findWhere(testIDEquals("text")).shallow();

    expect(textComponent.props().children).toBe(offlinePhrase);
  });
  it("calls onClose prop on button Press", () => {
    const onClose = jest.fn();
    const wrapper = shallow(
      <FullScreenView online={true} hidden={false} onClose={onClose}>
        <TestComponent testID="test" />
      </FullScreenView>
    );
    const buttonComponent = wrapper.findWhere(testIDEquals("button"));
    buttonComponent.props().onPress();
    expect(onClose).toBeCalledWith();
  });
});
