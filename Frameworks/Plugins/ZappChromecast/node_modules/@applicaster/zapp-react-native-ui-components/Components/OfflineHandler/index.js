// @flow
import * as React from "react";
import { View, StyleSheet } from "react-native";
import { NotificationView } from "./NotificationView";
import { FullScreenView } from "./FullScreenView";
import { useConnectionInfo } from "@applicaster/zapp-react-native-utils/reactHooks/connection";
import { usePrevious } from "@applicaster/zapp-react-native-utils/reactHooks/utils";

const { useEffect, useState } = React;

type Props = {
  children: React.Node,
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    position: "relative",
  },
});
export const OfflineHandler = ({ children }: Props): React.Node => {
  const online: ?boolean = useConnectionInfo(true);
  const [hidden, setHidden]: [boolean, Function] = useState(true);
  const [fullScreen, setFullScreen]: [boolean, Function] = useState(false);
  const previousOnline: boolean = usePrevious(online);

  useEffect(() => {
    const wentOffline = previousOnline && !online;
    const wentOnline = !previousOnline && online;
    const renderedOffline = !online && previousOnline === null;
    if (renderedOffline) {
      setFullScreen(true);
    }
    if (wentOffline) {
      setHidden(false);
    }
    if (wentOnline) {
      setTimeout(() => {
        setHidden(true);
      }, 2000);
    }
  }, [online]);

  const onFullScreenClosePress = () => {
    setFullScreen(false);
  };
  return (
    <View style={styles.container}>
      {fullScreen ? (
        <FullScreenView
          hidden={!fullScreen}
          online={online}
          onClose={onFullScreenClosePress}
        >
          {children}
        </FullScreenView>
      ) : (
        <NotificationView hidden={hidden} online={online}>
          {children}
        </NotificationView>
      )}
    </View>
  );
};
