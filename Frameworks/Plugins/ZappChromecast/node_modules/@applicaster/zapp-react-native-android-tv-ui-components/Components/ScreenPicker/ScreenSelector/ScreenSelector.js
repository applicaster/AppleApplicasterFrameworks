/* eslint-disable */
// @flow
import * as React from "react";
import * as R from "ramda";
import { View, Text, Dimensions, StyleSheet } from "react-native";
import { screenSelectorStyle } from "../styles";
import { menuItemStyle, screenSelectorItemStyle } from "./styles";
import { FocusableList } from "@applicaster/zapp-react-native-ui-components/Components/FocusableList";

type Props = {
  selectedItem: {},
  selectItem: (any) => void,
  onBlur: ?({}) => void,
  willReceiveFocus: ({}) => void,
  hasReceivedFocus: ({}) => void,
  hasPreferredFocu: ({}) => void,
  entry: [],
  cellStyle: ?Array<any>,
  componentId: string,
  component: {},
  cellStyles: {},
  focused: boolean,
  parentFocus: {
    nextFocusDown: React.Ref,
    nextFocusRight: React.Ref,
    nextFocusLeft: React.Ref,
    nextFocusUp: React.Ref,
  },
};

const { height: SCREEN_HEIGHT } = Dimensions.get("window") || {
  height: "1080",
};

const MENU_HEIGHT = 150;
const SCREEN_PICKER_PADDING = 110;

const styles = StyleSheet.create({
  container: { flex: 1 },
});

export function ScreenSelectorComponent(props: Props) {
  const { parentFocus, component, cellStyles, entry, selectedItem } = props;

  const flatListRef = React.useRef(null);

  const getCellStyles = () => {
    const { cell_plugin_configuration_id } = component?.styles;

    if (
      cell_plugin_configuration_id &&
      cellStyles[cell_plugin_configuration_id]
    ) {
      const styles = R.path(
        ["configuration", "styles"],
        cellStyles[cell_plugin_configuration_id]
      );

      return {
        mainColor: styles.text_color_default,
        highlightColor: styles.text_color_focused,
      };
    }

    return {
      mainColor: "white",
      highlightColor: "red",
    };
  };

  const onPress = (element, { item }) => {
    const { selectItem } = props;
    // Not sure whats going on here
    selectItem(item);
  };

  const onFocus = (element, { index }) => {
    flatListRef?.current?.scrollToIndex({
      index: index,
      viewPosition: 1,
      animated: true,
    });
    // this.scrollVerticallyIfNeeded(index, focusable);
  };

  // eslint-disable-next-line react/prop-types
  const renderItem = ({ item, index, focused }) => {
    const itemStyles = getCellStyles();
    return (
      <View style={screenSelectorItemStyle}>
        <Text
          style={menuItemStyle(
            R.equals(item, selectedItem) || false,
            focused
          )(itemStyles)}
          key={item.id}
        >
          {item.title}
        </Text>
      </View>
    );
  };

  return (
    <View style={styles.container}>
      <FocusableList
        listKey={"screen-selector-list-key"}
        extraData={selectedItem}
        focused={props.focused}
        ref={flatListRef}
        removeClippedSubviews
        renderItem={renderItem}
        showsHorizontalScrollIndicator={false}
        showsVerticalScrollIndicator={false}
        keyExtractor={R.prop("id")}
        data={entry}
        onListElementFocus={onFocus}
        onListElementPress={onPress}
        {...{ ...parentFocus }}
      />
    </View>
  );
}
