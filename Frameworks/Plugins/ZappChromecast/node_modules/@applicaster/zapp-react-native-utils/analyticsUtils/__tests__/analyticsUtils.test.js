const mock_QuickBrickCommunicationModule = {
  accountId: "123",
  bundleIdentifier: "com.bundle",
  riversConfigurationId: "B0987",
};

jest.mock("react-native", () => ({
  NativeModules: {
    QuickBrickCommunicationModule: mock_QuickBrickCommunicationModule,
  },
}));

const mock_postAnalyticEvent = jest.fn();
const mock_startAnalyticsTimedEvent = jest.fn();
const mock_endAnalyticsTimedEvent = jest.fn();

jest.mock("../manager", () => ({
  postAnalyticEvent: mock_postAnalyticEvent,
  startAnalyticsTimedEvent: mock_startAnalyticsTimedEvent,
  endAnalyticsTimedEvent: mock_endAnalyticsTimedEvent,
}));

const analyticsManager = require("../manager");
const analyticsUtils = require("../index");

const item = {
  title: "title",
  id: "A1234",
  content: { src: "http://stream.com/url.m3u8" },
  type: { value: "video" },
  extensions: {},
};

const freeItem = {
  ...item,
  extensions: {
    free: true,
  },
};

const program = {
  ...item,
  type: { value: "program" },
};

const channel = {
  ...item,
  type: { value: "channel" },
};

const component = {
  id: "component_1",
  component_type: "horizontal_list",
  styles: {
    cell_style: [],
    family: "FAMILY_1",
    header: "HEADER_STYLE",
  },
  data: {
    source: { url: "applicaster://fetchData?type=feed&url=url" },
    type: "feed",
  },
  rules: {},
};

const headerTitle = item.title;
const itemIndex = 1;

function clearAllMocks() {
  mock_postAnalyticEvent.mockClear();
  mock_startAnalyticsTimedEvent.mockClear();
  mock_endAnalyticsTimedEvent.mockClear();
}

describe("sendSelectCellEvent", () => {
  beforeEach(clearAllMocks);

  it("sends the tap_cell event", () => {
    analyticsUtils.sendSelectCellEvent(item, component, headerTitle, itemIndex);
    expect(analyticsManager.postAnalyticEvent).toHaveBeenCalled();
    expect(analyticsManager.postAnalyticEvent.mock.calls).toMatchSnapshot();
  });
});

describe("sendVideoItemPlayStartTimedEvent", () => {
  beforeEach(clearAllMocks);

  it("sends video start event", () => {
    analyticsUtils.sendVideoItemPlayStartTimedEvent(item, 60 * 60 * 1000);
    expect(analyticsManager.startAnalyticsTimedEvent).toHaveBeenCalled();
    expect(mock_startAnalyticsTimedEvent.mock.calls).toMatchSnapshot();
  });

  it("sends video start event for free item", () => {
    analyticsUtils.sendVideoItemPlayStartTimedEvent(freeItem, 60 * 60 * 1000);
    expect(analyticsManager.startAnalyticsTimedEvent).toHaveBeenCalled();
    expect(mock_startAnalyticsTimedEvent.mock.calls).toMatchSnapshot();
  });
});

describe("sendVideoItemPlayStopTimedEvent", () => {
  beforeEach(clearAllMocks);

  it("sends video stop event", () => {
    analyticsUtils.sendVideoItemPlayStopTimedEvent(item, 60 * 60 * 1000);
    expect(analyticsManager.endAnalyticsTimedEvent).toHaveBeenCalled();
    expect(mock_endAnalyticsTimedEvent.mock.calls).toMatchSnapshot();
  });

  it("sends video stop event for free item", () => {
    analyticsUtils.sendVideoItemPlayStopTimedEvent(freeItem, 60 * 60 * 1000);
    expect(analyticsManager.endAnalyticsTimedEvent).toHaveBeenCalled();
    expect(mock_endAnalyticsTimedEvent.mock.calls).toMatchSnapshot();
  });
});

describe("sendVideoItemPlayEvent", () => {
  beforeEach(clearAllMocks);

  it("sends the video event", () => {
    analyticsUtils.sendVideoItemPlayEvent(item);
    expect(analyticsManager.postAnalyticEvent).toHaveBeenCalled();
    expect(mock_postAnalyticEvent.mock.calls).toMatchSnapshot();
  });

  it("sends the video event with appropriate type for program", () => {
    analyticsUtils.sendVideoItemPlayEvent(program);
    expect(analyticsManager.postAnalyticEvent).toHaveBeenCalled();
    expect(mock_postAnalyticEvent.mock.calls).toMatchSnapshot();
  });

  it("sends the video event with appropriate type for channel", () => {
    analyticsUtils.sendVideoItemPlayEvent(channel);
    expect(analyticsManager.postAnalyticEvent).toHaveBeenCalled();
    expect(mock_postAnalyticEvent.mock.calls).toMatchSnapshot();
  });

  it("sends the video event with appropriate type for free item", () => {
    analyticsUtils.sendVideoItemPlayEvent(freeItem);
    expect(analyticsManager.postAnalyticEvent).toHaveBeenCalled();
    expect(mock_postAnalyticEvent.mock.calls).toMatchSnapshot();
  });
});

describe("sendLaunchEvent", () => {
  beforeEach(clearAllMocks);

  it("sends launch event", () => {
    analyticsUtils.sendLaunchEvent();
    expect(analyticsManager.postAnalyticEvent).toHaveBeenCalled();
    expect(mock_postAnalyticEvent.mock.calls).toMatchSnapshot();
  });
});
