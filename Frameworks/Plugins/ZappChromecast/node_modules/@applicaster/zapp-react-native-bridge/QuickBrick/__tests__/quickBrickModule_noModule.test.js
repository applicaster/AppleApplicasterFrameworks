const mock_NativeModules = {
  Foo: jest.fn(),
};

jest.mock("react-native", () => ({
  NativeModules: mock_NativeModules,
}));

const {
  sendQuickBrickEvent,
  getAppData,
  getLegacyInitialProps,
} = require("../index");

const eventName = "event";
const payload = {};

describe("when QuickBrickCommunication Module is undefined", () => {
  describe("sendQuickBrickEvent", () => {
    it("throws an error", () => {
      expect(() => sendQuickBrickEvent(eventName, payload)).toThrow();
    });
  });

  describe("getAppData", () => {
    it("returns the default values", () => {
      expect(getAppData()).toMatchSnapshot();
    });
  });

  describe("getLegacyInitialProps", () => {
    let consoleSpy;

    beforeEach(() => {
      consoleSpy = jest
        .spyOn(console, "warn")
        .mockImplementation(() => jest.fn());
    });

    afterEach(() => {
      consoleSpy.mockRestore();
    });

    it("returns an empty object", () => {
      expect(getLegacyInitialProps()).toEqual({});
    });

    it("warns in the console that the module is missing", () => {
      getLegacyInitialProps();
      expect(consoleSpy).toHaveBeenCalledWith(
        "QuickBrickCommunicationModule not found"
      );
    });
  });
});
