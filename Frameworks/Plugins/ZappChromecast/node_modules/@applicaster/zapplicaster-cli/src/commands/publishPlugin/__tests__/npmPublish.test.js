const mock_publish_error = new Error("Failed to publish package");

jest.mock("../../../shell", () => ({
  runInShellAsync: jest.fn(command => {
    return command.includes("fail")
      ? Promise.reject(mock_publish_error)
      : Promise.resolve();
  }),
}));

jest.mock("../../../logger", () => ({
  log: jest.fn(),
}));

const getConfig = (conf = {}) => ({
  dryRun: false,
  yarn: false,
  next: false,
  version: "1.5.0",
  pluginPath: "plugins/my-plugin",
  ...conf,
});

const { npmPublish } = require("../npmPublish");
const { runInShellAsync } = require("../../../shell");
const logger = require("../../../logger");

function clearMocks() {
  logger.log.mockClear();
  runInShellAsync.mockClear();
}

describe("npm publish step", () => {
  describe("with default options", () => {
    beforeEach(clearMocks);

    it("publishes the plugin to npm", async () => {
      const configuration = getConfig();
      expect(await npmPublish(configuration)).toEqual(true);
      expect(runInShellAsync).toHaveBeenCalledTimes(2);

      expect(runInShellAsync).toHaveBeenNthCalledWith(
        1,
        `npm version ${configuration.version}`,
        expect.objectContaining({ cwd: configuration.pluginPath })
      );

      expect(runInShellAsync).toHaveBeenNthCalledWith(
        2,
        "npm publish",
        expect.objectContaining({ cwd: configuration.pluginPath })
      );

      expect(logger.log.mock.calls).toMatchSnapshot();
    });

    it("throws if the npm command fails", async () => {
      const configuration = getConfig({ version: "fail" });
      expect(npmPublish(configuration)).rejects.toMatchSnapshot();
    });
  });

  describe("with yarn flag", () => {
    beforeEach(clearMocks);

    it("uses yarn instead of npm", async () => {
      const configuration = getConfig({ yarn: true });

      expect(await npmPublish(configuration)).toEqual(true);

      expect(runInShellAsync).toHaveBeenCalledTimes(1);

      expect(runInShellAsync).toHaveBeenCalledWith(
        `yarn publish --no-git-tag-version --new-version ${configuration.version}`,
        expect.objectContaining({ cwd: configuration.pluginPath })
      );

      expect(logger.log.mock.calls).toMatchSnapshot();
    });
  });

  describe("with dry run flag", () => {
    beforeEach(clearMocks);

    it("performs a dry run", async () => {
      const configuration = getConfig({ dryRun: true });

      expect(await npmPublish(configuration)).toEqual(true);
      expect(runInShellAsync).toHaveBeenCalledTimes(2);

      expect(runInShellAsync).toHaveBeenNthCalledWith(
        1,
        `npm version ${configuration.version}`,
        expect.objectContaining({ cwd: configuration.pluginPath })
      );

      expect(runInShellAsync).toHaveBeenNthCalledWith(
        2,
        "npm publish --dry-run",
        expect.objectContaining({ cwd: configuration.pluginPath })
      );
    });

    it("throws if used with the yarn flag as well", async () => {
      const configuration = getConfig({ dryRun: true, yarn: true });
      expect(npmPublish(configuration)).rejects.toMatchSnapshot();
    });
  });

  describe("with next flag", () => {
    beforeEach(clearMocks);

    it("adds the next flag in the cli command", async () => {
      const configuration = getConfig({ next: true });

      expect(await npmPublish(configuration)).toEqual(true);

      expect(runInShellAsync).toHaveBeenCalledTimes(2);

      expect(runInShellAsync).toHaveBeenNthCalledWith(
        1,
        `npm version ${configuration.version}`,
        expect.objectContaining({ cwd: configuration.pluginPath })
      );

      expect(runInShellAsync).toHaveBeenNthCalledWith(
        2,
        "npm publish --tag next",
        expect.objectContaining({ cwd: configuration.pluginPath })
      );

      expect(logger.log.mock.calls).toMatchSnapshot();
    });

    it("adds the next flag when using yarn as well", async () => {
      const configuration = getConfig({ next: true, yarn: true });

      expect(await npmPublish(configuration)).toEqual(true);
      expect(runInShellAsync).toHaveBeenCalledTimes(1);

      expect(runInShellAsync).toHaveBeenCalledWith(
        `yarn publish --no-git-tag-version --tag next --new-version ${configuration.version}`,
        expect.objectContaining({ cwd: configuration.pluginPath })
      );

      expect(logger.log.mock.calls).toMatchSnapshot();
    });
  });
});
