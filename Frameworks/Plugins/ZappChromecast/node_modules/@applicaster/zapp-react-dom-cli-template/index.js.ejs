
// Wrapper for importing only the configurations matching the platform
// so both platforms can be served using the same dev packager.
import {
  rivers,
  styles,
  pluginConfigurations,
  remoteConfigurations,
  runtimeConfigurationUrls,
  <% if (configuration.buildParams.cell_styles_url) { %>cellStyles,<% } %>
} from "./config/index.<%= configuration.platform %>.js";

// setting up App Data
import * as AppDataPolyfill from "@applicaster/zapp-react-dom-app/Polyfills/AppData";
import appData from "./config/<%= configuration.platform %>/appData.json";

AppDataPolyfill.setAppData(appData);

// Adding SDK image assets to remoteConfigurations
remoteConfigurations.sdkAssets = <%- JSON.stringify(configuration.sdkAssets) %>;

// This imports defined SDK assets into the final QuickBrick project
// Without this yarn build:web will not import any assets 
<%_ const replaceInvalidChars = (key) => {
    const newImg = key.replace(".", "")
    return newImg;
}_%>
<%_ Object.keys(configuration.sdkAssets).forEach(key => { %>
import <%= replaceInvalidChars(key) %> from "<%= configuration.sdkAssets[key] %>" <% }); %> 

const {
  registerNativeModulesPolyfills,
  overloadReactNativePlatform,
  addReactNativeModules,
 } = require("@applicaster/zapp-react-dom-app/Polyfills");
const ReactNative = require("react-native")
const { NativeModules, AppRegistry, Platform } = ReactNative;

addReactNativeModules(ReactNative);
registerNativeModulesPolyfills(NativeModules);
overloadReactNativePlatform(Platform, "<%= configuration.platform %>")

const React = require("react");
const ReactDOM = require("react-dom");

<% plugins.forEach(function(plugin) { %>const <%= plugin.moduleName %> = require("<%= plugin.packageName %>");
<%}); %>
const { createZappApp, renderZappApp } = require("@applicaster/quick-brick-core");

const domComponents = require("@applicaster/zapp-react-dom-ui-components").default;

const { ZappApp } = require("@applicaster/zapp-react-dom-app");

const plugins = [];

<% plugins.forEach(function(plugin) { %>plugins.push({
  module: <%= plugin.moduleName %>,
  name: "<%= plugin.moduleName %>",
  identifier: "<%= plugin.identifier %>",
  type: "<%= plugin.type %>"
});
<%}); %>
const additionalMiddlewares = [];

if (__DEV__) {
  const { createLogger } = require("redux-logger");
  const logger = createLogger({
    // add options here to customize loader
    // see https://www.npmjs.com/package/redux-logger
  });

  additionalMiddlewares.push(logger);
}

const ZappDOMApp = createZappApp({
  components: domComponents,
  rivers,
  styles,
  pluginConfigurations,
  remoteConfigurations,
  plugins,
  appSettings: {
    runtimeConfigurationUrls
  },
  reduxStoreOptions: {
    additionalMiddlewares,
  },
  ZappApp,
  <% if (configuration.buildParams.cell_styles_url) { %>cellStyles,<% } %>
});

const App = props => <ZappDOMApp {...props} />;

renderZappApp({ AppRegistry, App, appMountId: "zapp_app_container" });
