import React from "react";
import { TouchableOpacity, View } from "react-native";
import { shallow } from "enzyme";
import { shallowToJson } from "enzyme-to-json";
import * as R from "ramda";

import { Grid } from "../index";

const feedData = {
  type: { value: "feed" },
  title: "feed title",
  entry: [
    {
      id: 123,
      title: "feed entry",
    },
  ],
};

const componentProps = {};
const componentPropsWithData = {
  CellRenderer: jest.fn(),
  component: { styles: { header: true } },
  zappPipesData: {
    loading: false,
    data: feedData,
  },
  onLoadFinished: jest.fn(),
  navigator: { push: jest.fn() },
};

describe("<Grid />", () => {
  it("renders the placeholder correctly", () => {
    const wrapper = shallow(<Grid {...componentProps} />);
    expect(shallowToJson(wrapper)).toMatchSnapshot();
  });

  it("renders correctly with the data", () => {
    const wrapper = shallow(<Grid {...componentPropsWithData} />);
    expect(shallowToJson(wrapper)).toMatchSnapshot();
  });

  it("renders the header", () => {
    const wrapper = shallow(<Grid {...componentPropsWithData} />);
    const _wrapper = wrapper.instance().renderHeader();
    expect(shallowToJson(_wrapper)).toMatchSnapshot();
  });

  it("renders an item", () => {
    const item = feedData.entry[0];
    const index = 1;
    const wrapper = shallow(<Grid {...componentPropsWithData} />);
    const _wrapper = shallow(wrapper.instance().renderItem({ item, index }));
    expect(shallowToJson(_wrapper)).toMatchSnapshot();
  });

  it("navigates to an item when pressing on it", () => {
    const item = feedData.entry[0];
    const wrapper = shallow(<Grid {...componentPropsWithData} />);
    const navigateToSpy = jest.spyOn(wrapper.instance(), "navigateTo");
    const _wrapper = shallow(
      <View>{wrapper.instance().renderItem({ item, index: 1 })}</View>
    );

    _wrapper.find(TouchableOpacity).simulate("press");

    expect(navigateToSpy).toHaveBeenCalledWith(item);
    expect(componentPropsWithData.navigator.push).toHaveBeenCalledWith(item);
  });

  it("renders an empty list if feed has no entries", () => {
    const zappPipesData = {
      loaded: true,
      data: R.merge(feedData, { entry: null }),
    };
    const wrapper = shallow(
      <Grid zappPipesData={zappPipesData} onLoadFinished={jest.fn()} />
    );

    const _wrapper = shallow(wrapper.instance().renderComponent(zappPipesData));
    expect(shallowToJson(_wrapper)).toMatchSnapshot();
  });

  it("extracts the index and id for any item as a string", () => {
    const item = { id: 1234 };
    const id = 0;
    const wrapper = shallow(<Grid {...componentPropsWithData} />);
    expect(wrapper.instance()._keyExtractor(item, id)).toBe(`${id}${item.id}`);
  });
});
