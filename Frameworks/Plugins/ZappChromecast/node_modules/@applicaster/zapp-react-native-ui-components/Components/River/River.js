// @flow
import * as React from "react";
import * as R from "ramda";

import { ComponentsMap } from "./ComponentsMap";
import { FeedLoader } from "../FeedLoader";
import { ScreenResolver } from "../ScreenResolver";

import type { ZappScreenProps } from "@applicaster/zapp-react-native-flow-types";

import {
  allowedOrientationsForScreen,
  releaseOrientationsForScreen,
  ORIENTATIONS,
} from "@applicaster/zapp-react-native-utils/appUtils/orientationHelper";

type Props = ZappScreenProps & {
  feedUrl: ?string,
  isInsideContainer: ?boolean,
  screenData: {},
  setScreenTitle: (string) => void,
  setScreenSummary: (string) => void,
  setIsScreenWrappedInContainer: (any) => void,
  groupId: string,
  scrollViewExtraProps: {},
};

export class RiverComponent extends React.Component<Props> {
  constructor(props) {
    super(props);
    this.applyContexts();
  }

  componentDidMount() {
    allowedOrientationsForScreen(ORIENTATIONS.portrait);
  }

  componentWillUnmount() {
    releaseOrientationsForScreen();
  }

  applyContexts() {
    const {
      isInsideContainer = false,
      setIsScreenWrappedInContainer,
    } = this.props;

    setIsScreenWrappedInContainer(isInsideContainer);
  }

  componentDidUpdate(prevProps) {
    const {
      navigator: { setScreenTitle, setScreenSummary },
      isInsideContainer,
    } = this.props;

    if (!isInsideContainer) {
      if (this.props.screenTitle !== prevProps.screenTitle) {
        setScreenTitle(this.currentScreenTitle);
      }
      if (this.props.screenSummary !== prevProps.screenSummary) {
        setScreenSummary(this.currentScreenSummary);
      }
    }
  }

  render() {
    const {
      river,
      feedUrl,
      screenData,
      isInsideContainer,
      groupId,
      scrollViewExtraProps,
    } = this.props;
    const { id, ui_components, type } = river;

    const connectedFeedURL = R.path(["content", "src"], screenData);
    const _feedUrl = feedUrl || connectedFeedURL;

    if (type !== "general_content") {
      if (_feedUrl) {
        river.data = R.merge(river.data || {}, { source: _feedUrl });
      }

      return (
        <ScreenResolver
          screenData={R.merge(river, { groupId })}
          screenId={id}
          screenType={type}
        />
      );
    }

    if (!_feedUrl) {
      this.currentScreenTitle = (screenData && screenData.title) || null;

      return (
        <ComponentsMap
          isScreenWrappedInContainer={isInsideContainer}
          riverComponents={river.ui_components}
          groupId={groupId}
          scrollViewExtraProps={scrollViewExtraProps}
        />
      );
    }

    return (
      <FeedLoader feedUrl={_feedUrl}>
        {(feed) => {
          this.currentScreenSummary = (feed && feed.summary) || null;
          this.currentScreenTitle =
            (feed && feed.title) || (screenData && screenData.title) || null;

          return (
            <ComponentsMap
              groupId={groupId}
              feed={feed}
              isScreenWrappedInContainer={isInsideContainer}
              riverComponents={ui_components}
              scrollViewExtraProps={scrollViewExtraProps}
            />
          );
        }}
      </FeedLoader>
    );
  }
}
