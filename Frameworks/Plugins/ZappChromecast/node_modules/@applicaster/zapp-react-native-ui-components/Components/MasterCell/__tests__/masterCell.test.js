import * as React from "react";
import { View } from "react-native";
import { shallow } from "enzyme";
import { shallowToJson } from "enzyme-to-json";
import ReactTestRenderer from "react-test-renderer";
import { masterCellBuilder } from "../index";
import { testCellStyle } from "./TestCellStyle";
import { singleView } from "./SingleView";
import { entry } from "./testEntry";
import { singleElement } from "./testElements";

const mock_singleElement = singleElement;

describe("masterCellBuilder", () => {
  describe("when using default options", () => {
    const MasterCell = masterCellBuilder({ cellConfiguration: testCellStyle });

    it("returns a function", () => {
      expect(MasterCell).toBeFunction();
    });

    it("renders correctly", () => {
      const wrapper = shallow(
        <View>{MasterCell({ item: entry })}</View>
      );

      expect(shallowToJson(wrapper)).toMatchSnapshot();
    });

    it("can be invoked as a React Component", () => {
      const wrapper = shallow(
        <MasterCell item={entry} state={null} />
      );

      expect(shallowToJson(wrapper)).toMatchSnapshot();
    });
  });

  describe("when using custom containerStyle", () => {
    const MasterCell = masterCellBuilder({
      cellConfiguration: singleView,
      containerStyle: { backgroundColor: "black" },
    });

    it("renders correctly", () => {
      const renderer = ReactTestRenderer.create(<MasterCell item={entry} />);
      expect(renderer.toJSON()).toMatchSnapshot();
    });
  });

  describe("when using a custom data adapter", () => {
    const dataAdapter = jest.fn(() => () => mock_singleElement);
    const MasterCell = masterCellBuilder({
      cellConfiguration: singleView,
      dataAdapter,
    });

    it("renders correctly", () => {
      const renderer = ReactTestRenderer.create(<MasterCell item={entry} />);
      expect(renderer.toJSON()).toMatchSnapshot();

      expect(dataAdapter).toHaveBeenCalledWith(singleView);
    });
  });

  describe("when using custom default components", () => {
    // the collapsable prop is added here to easily check from the snapshot that the mock
    // component is being used instead of the default one
    const CustomView = jest.fn(props => <View {...props} collapsable />);
    const components = { View: CustomView };
    const MasterCell = masterCellBuilder({
      cellConfiguration: singleView,
      components,
    });

    it("renders correctly", () => {
      const renderer = ReactTestRenderer.create(<MasterCell item={entry} />);
      expect(renderer.toJSON()).toMatchSnapshot();
      expect(CustomView).toHaveBeenCalled();
    });
  });
});
