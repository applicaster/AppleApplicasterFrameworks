const mock_postAnalyticEvent = jest.fn();

jest.mock("../manager", () => ({
  postAnalyticEvent: mock_postAnalyticEvent,
}));

const mock_NativeModules = {
  Foo: jest.fn(),
};

jest.mock("react-native", () => ({
  NativeModules: mock_NativeModules,
}));

const analyticsManager = require("../manager");
const analyticsUtils = require("../index");

function clearAllMocks() {
  mock_postAnalyticEvent.mockClear();
}

const consoleSpy = jest.spyOn(console, "warn").mockImplementation(() => ({}));

describe("sendLaunchEvent", () => {
  beforeEach(clearAllMocks);

  it("skips the event and sends a warning", () => {
    analyticsUtils.sendLaunchEvent();
    expect(analyticsManager.postAnalyticEvent).not.toHaveBeenCalled();
    expect(consoleSpy).toHaveBeenCalledWith(
      "failed to initialize QuickBrickCommunicationModule",
      { NativeModules: mock_NativeModules }
    );
    // expect(consoleSpy.mock.calls).toMatchSnapshot();
  });
});
