// @flow

import * as R from "ramda";
import { loadAppContextData } from "@applicaster/zapp-react-native-redux";

import { URL_KEYS } from "./consts";
import { getPromiseForKey } from "./helpers";

const fetchPluginConfiguration = pluginConfigurations => plugin => {
  const configuration = R.compose(
    R.unless(
      R.isNil,
      R.compose(
        R.tryCatch(JSON.parse, R.flip(R.identity)),
        R.prop("configuration_json")
      )
    ),
    R.defaultTo(null),
    R.find(R.pathEq(["plugin", "identifier"], plugin.identifier))
  )(pluginConfigurations);

  return {
    ...plugin,
    configuration,
  };
};

export async function getRemoteContextData(
  dispatch,
  runtimeConfigurationUrls,
  plugins
) {
  const promises = R.compose(
    R.map(getPromiseForKey(runtimeConfigurationUrls)),
    R.keys,
    R.pick(URL_KEYS)
  )(runtimeConfigurationUrls);

  try {
    const resolvedPromises = await Promise.all(promises);
    const remoteData = R.mergeAll(resolvedPromises);
    const { pluginConfigurations } = remoteData;

    const updatedPlugins = R.map(
      fetchPluginConfiguration(pluginConfigurations),
      plugins
    );

    loadAppContextData(dispatch, { ...remoteData, plugins: updatedPlugins });

    return;
  } catch (e) {
    throw e;
  }
}
