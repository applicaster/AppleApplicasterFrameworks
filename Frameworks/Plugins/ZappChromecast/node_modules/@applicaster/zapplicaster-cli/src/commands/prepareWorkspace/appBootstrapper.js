const R = require("ramda");
const { resolve } = require("path");

const {
  quickBrickDirectory,
  getFileDestinationPath,
} = require("../../settings/paths");

const { getCLIProperties } = require("../../settings");
const { copyFiles } = require("../../file");
const logger = require("../../logger");
const { exec } = require("shelljs");

const {
  gatherDependencies,
  getPluginDependencies,
  getDefaultPlugins,
  getFallbackPlugins,
  addMandatoryPlugins,
} = require("../../plugins");

const {
  injectDependencies,
  injectScripts,
  renderTemplateFile,
} = require("../../render");

const { buildMobileApp } = require("./buildMobile");

/**
 * {@typedef configuration
 * @type {Object}
 * @property {String} appVersionId: ID of the app version in Zapp
 * @property {Object} buildParams: zapp build params for the app
 * @property {String} platform: Platform of the app
 * @property {Boolean} openSdk: whether or not the app should use an open SDK
 * @property {Boolean} verbose: verbose output flag
 */

/**
 * Bootstraps the app
 * @param {configuration} configuration
 */
async function appBootstrapper(configuration) {
  const {
    destinationPath,
    platform,
    deviceTarget,
    yarn,
    zappReactNative,
    template,
    buildMobile,
  } = configuration;

  if (zappReactNative) {
    logger.log("Bootstrapping app for the Zapp React Native Repo");
    logger.log("Rendered files will be in ./development-app");
  }

  const quickBrickProjectPath = quickBrickDirectory(destinationPath);

  logger.log("copying templates files...");

  const { templatePath, filesToCopy } = template.files;

  copyFiles(templatePath, filesToCopy, quickBrickProjectPath);

  logger.log("injecting dependencies...");
  const { dependencies, scripts } = template;

  const pluginConfigurations = require(getFileDestinationPath({
    destinationPath,
    platform,
    folder: "config",
    fileName: "plugin_configurations.json",
  }));

  const { name, version } = getCLIProperties();

  dependencies.push({
    name,
    version,
    type: "devDependencies",
  });

  const plugins = R.uniq([
    ...gatherDependencies(pluginConfigurations),
    ...getDefaultPlugins(platform, deviceTarget),
    ...getFallbackPlugins(platform, deviceTarget, pluginConfigurations),
  ]);

  addMandatoryPlugins(plugins);

  const pluginDependencies = getPluginDependencies(plugins);

  await injectDependencies(pluginDependencies, resolve(quickBrickProjectPath));
  await injectDependencies(dependencies, resolve(quickBrickProjectPath));
  await injectScripts(scripts, resolve(quickBrickProjectPath));

  logger.log("rendering templates...");

  // Assets to import
  const remote = require(getFileDestinationPath({
    destinationPath,
    platform,
    folder: "config",
    fileName: "remote_configurations.json",
  }));
  const { universal: universalAssets } = remote.assets;
  const retrieveAssetFileName = R.compose(R.last, R.split("/"));
  const addPathToFile = fileName => `./assets/${platform}/${fileName}`;
  const sdkAssets = R.map(R.compose(addPathToFile, retrieveAssetFileName))(
    universalAssets
  );

  configuration.sdkAssets = sdkAssets;

  const { filesToRender } = template.files;

  await Promise.all(
    R.map(
      renderTemplateFile(configuration, quickBrickProjectPath, plugins),
      filesToRender
    )
  );

  logger.log("installing dependencies...");

  const npmInstallResult = zappReactNative
    ? exec("yarn")
    : exec(`cd ${quickBrickProjectPath} && ${yarn ? "yarn" : "npm i"}`);

  if (npmInstallResult.code > 0) {
    throw new Error("Couldn't not install npm dependencies !");
  }

  if (buildMobile) {
    await buildMobileApp(configuration);
  }

  return true;
}

module.exports = { appBootstrapper };
