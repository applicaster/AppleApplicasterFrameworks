// @flow
import * as React from "react";
import * as R from "ramda";
import { ComponentsMap } from "./ComponentsMap";

import { FeedLoader } from "@applicaster/zapp-react-native-ui-components/Components/FeedLoader";
import { ScreenResolver } from "@applicaster/zapp-react-native-ui-components/Components/ScreenResolver";

import type { ZappScreenProps } from "@applicaster/zapp-react-dom-native-types";

type Props = ZappScreenProps & {
  feedUrl: ?string,
  isInsideContainer: ?Boolean,
  screenData: {},
  setScreenTitle: string => void,
  setScreenSummary: string => void,
  setIsScreenWrappedInContainer: any => void,
  groupId: string,
};

export class RiverComponent extends React.Component<Props> {
  constructor(props) {
    super(props);
    this.applyContexts();
  }

  applyContexts() {
    const {
      isInsideContainer = false,
      setIsScreenWrappedInContainer,
    } = this.props;

    setIsScreenWrappedInContainer(isInsideContainer);
  }

  componentDidUpdate() {
    const {
      navigator: { setScreenTitle, setScreenSummary },
      isInsideContainer,
    } = this.props;

    if (!isInsideContainer) {
      setScreenTitle(this.currentScreenTitle);
      setScreenSummary(this.currentScreenSummary);
    }
  }

  render() {
    const {
      river,
      feedUrl,
      screenData,
      isInsideContainer,
      groupId,
    } = this.props;

    const { ui_components } = river;
    const { type, id } = river;

    if (type !== "general_content") {
      return (
        <ScreenResolver
          screenType={type}
          screenId={id}
          screenData={R.merge(river, { groupId })}
        />
      );
    }

    const connectedFeedURL = R.path(["content", "src"], screenData);
    const _feedUrl = feedUrl || connectedFeedURL;

    if (!_feedUrl) {
      this.currentScreenTitle = (screenData && screenData.title) || null;
      return (
        <ComponentsMap
          isScreenWrappedInContainer={isInsideContainer}
          riverComponents={river.ui_components}
          groupId={groupId}
        />
      );
    }

    return (
      <FeedLoader feedUrl={_feedUrl}>
        {feed => {
          this.currentScreenSummary = (feed && feed.summary) || null;
          this.currentScreenTitle =
            (feed && feed.title) || (screenData && screenData.title) || null;

          return (
            <ComponentsMap
              isScreenWrappedInContainer={isInsideContainer}
              feed={feed}
              riverComponents={ui_components}
              groupId={groupId}
            />
          );
        }}
      </FeedLoader>
    );
  }
}
