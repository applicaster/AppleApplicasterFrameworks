import {
  getLocale,
  getLanguageCode,
  getCountryCode,
  getLocalizations,
} from "../";

describe("getLocale", () => {
  it("returns correct locale from QB communication module", () => {
    const expectedValue = "en-gb";
    const currentValue = getLocale();

    expect(currentValue).toEqual(expectedValue);
  });
  it("returns locale in lower case", () => {
    const expectedValue = "en-gb";
    const currentValue = getLocale();

    expect(currentValue).toEqual(expectedValue);
  });
});

describe("getLanguageCode", () => {
  it("returns correct language locale from QB communication module", () => {
    const expectedValue = "en";
    const currentValue = getLanguageCode();

    expect(currentValue).toEqual(expectedValue);
  });
  it("returns language locale in lower case", () => {
    const expectedValue = "en";
    const currentValue = getLanguageCode();

    expect(currentValue).toEqual(expectedValue);
  });
});

describe("getCountryCode", () => {
  it("returns correct country locale from QB communication module", () => {
    const expectedValue = "gb";
    const currentValue = getCountryCode();

    expect(currentValue).toEqual(expectedValue);
  });
  it("returns country locale in lower case", () => {
    const expectedValue = "gb";
    const currentValue = getCountryCode();

    expect(currentValue).toEqual(expectedValue);
  });
});

describe("getLocalizations", () => {
  it("returns correct value for languageLocale", () => {
    const en = "en";
    const fr = "fr";
    const gb = "gb";
    const currentValue = getLocalizations({ localizations: { fr, en, gb } });

    expect(currentValue).toBe(en);
  });
  it("if localization for locale language doesn't exist it take the value of the first found localization", () => {
    const fr = "fr";
    const gb = "gb";
    const currentValue = getLocalizations({ localizations: { fr, gb } });

    expect(currentValue).toEqual(fr);
  });
});
