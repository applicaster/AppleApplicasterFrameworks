import { useConnectionInfo } from "../";
import { renderHook, cleanup } from "@testing-library/react-hooks";
import { NetInfo } from "react-native";

jest.mock("NetInfo", () => {
  const NetInfoMock = {
    connection: {
      type: "none",
    },
    addEventListener: jest.fn().mockImplementation((name, cb) => {
      cb(NetInfoMock.connection);
    }),
    removeEventListener: jest.fn(),
  };
  return NetInfoMock;
});

describe("useConnectionInfo", () => {
  it("renders", () => {
    const { result } = renderHook(() => useConnectionInfo());
    expect(result).toBeDefined();
    cleanup();
  });
  it("it sets eventlistener", () => {
    renderHook(() => useConnectionInfo());
    expect(NetInfo.addEventListener).toBeCalled();
    cleanup();
  });

  it("it removes eventlistener", () => {
    renderHook(() => useConnectionInfo());
    cleanup();
    expect(NetInfo.removeEventListener).toBeCalled();
  });
  it("it return connection type", () => {
    const {
      result: { current },
    } = renderHook(() => useConnectionInfo());
    expect(current.type).toEqual(NetInfo.connection.type);
    cleanup();
  });

  it("it return new connection type on network change", () => {
    const {
      result: { current },
    } = renderHook(() => useConnectionInfo());
    expect(current.type).toEqual(NetInfo.connection.type);
    const newConnectionType = "wifi";
    NetInfo.connection.type = newConnectionType;
    expect(current.type).toEqual(newConnectionType);
    cleanup();
  });

  it("Returns true if connection type is not none and justOnlineStatus is set", () => {
    NetInfo.connection.type = "wifi";
    const {
      result: { current },
    } = renderHook(() => useConnectionInfo(true));
    expect(current).toEqual(true);
  });

  it("Returns false if connection type is none and justOnlineStatus is set", () => {
    NetInfo.connection.type = "none";
    const {
      result: { current },
    } = renderHook(() => useConnectionInfo(true));
    expect(current).toEqual(false);
  });
});
