import * as R from "ramda";

import { localStorage } from "../ZappStorage/LocalStorage";
import { subscriber } from "@applicaster/zapp-react-native-utils/functionUtils";

const namespace = "local_favourites";
const key = "favourites";

export const favoritesListener = subscriber({});

export async function isFavorite(item) {
  try {
    const favourites = await getAllFavorites();
    return R.includes(item, favourites);
  } catch (e) {
    console.warn(e); // eslint-disable-line no-console
    throw e;
  }
}

export async function setAsFavorite(item) {
  const favourites = await getAllFavorites();

  if (!favourites) {
    throw new Error("Couldn't find favourites object");
  }

  if (R.includes(item, favourites)) {
    throw new Error(
      `entry with id ${item?.id} is already in the favourites list`
    );
  }

  const newFavourites = R.append(item, favourites);

  try {
    await localStorage.setItem(key, newFavourites, namespace);
    favoritesListener.invokeHandler("FAVORITES_CHANGED", newFavourites);
    return newFavourites;
  } catch (err) {
    // eslint-disable-next-line no-console
    console.warn(err);
    throw err;
  }
}

export async function removeFromFavorites(item) {
  try {
    const favourites = await getAllFavorites();

    if (!favourites) {
      throw new Error("Couldn't find favourites object");
    }

    if (!R.includes(item, favourites)) {
      throw new Error(
        `entry with id ${item?.id} is not in the favourites list`
      );
    }

    const newFavourites = R.without([item], favourites);

    await localStorage.setItem(key, newFavourites, namespace);
    favoritesListener.invokeHandler("FAVORITES_CHANGED", newFavourites);
    return newFavourites;
  } catch (err) {
    // eslint-disable-next-line no-console
    console.warn(err);
    throw err;
  }
}

export async function getAllFavorites() {
  try {
    const favourites = await localStorage.getItem(key, namespace);
    if (!favourites) {
      await localStorage.setItem(key, [], namespace);
      return [];
    }
    return favourites;
  } catch (err) {
    // eslint-disable-next-line no-console
    console.warn(err);
    throw err;
  }
}
