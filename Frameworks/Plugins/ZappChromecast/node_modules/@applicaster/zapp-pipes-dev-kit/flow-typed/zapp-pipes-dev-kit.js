// @flow

declare module 'zapp-pipes-dev-kit' {
  declare type Provider = {
    name: string,
    test: ProviderTestObject,
    manifest: ProviderManifest,
    handler: ProviderHandler,
  };

  declare type ProviderTestObject = {
    testCommand: string,
    requestMocks: Array<ProviderTestRequestMocks>,
  };

  declare type ProviderTestRequestMocks = {
    host: string,
    method: 'get' | 'post' | 'delete' | 'update',
    path: string,
    httpCode?: number,
    expectedResponse?: any,
  };

  declare type ProviderManifest = {
    handler: Array<String>,
    help: any,
  };

  declare type ProviderHandler = (
    NativeBridge
  ) => RequestParams => ProviderResponse;

  declare type ProviderResponse = {
    code: number,
    respose: any,
  };

  declare type NativeBridge = {
    log: string => void,
    throwError: string => ProviderResponse,
    sendResponse: (response: any, code: number) => ProviderResponse,
    appData: void => AppData,
  };

  declare type AppData = {
    platform: string,
    bundleIdentifier: string,
    accountId: string,
    broadcasterId: string,
    uuid: string,
  };

  declare type RequestParams = {
    type: string,
    url: string,
  };

  declare type Feed = {
    id: string,
    title: string,
    summary?: string,
    published?: string,
    updated?: string,
    author?: {
      name?: string,
    },
    type: FeedType,
    media_group?: Array<MediaGroup>,
    link?: EntryLink,
    extensions?: any,
    entry: Array<FeedEntry>,
  };

  declare type FeedType = {
    value: 'feed',
  };

  declare type AtomType = {
    value: 'article' | 'link' | 'imageGallery' | 'video' | 'image' | 'playlist',
  };

  declare type FeedEntry = {
    id: string,
    title: string,
    type: FeedType | AtomType,
    summary?: string,
    published: string,
    updated: string,
    author: {
      name: string,
    },
    media_group: Array<MediaGroup>,
    content?: EntryContent,
    link?: EntryLink,
    extensions?: any,
  };

  declare type MediaGroup = {
    type: 'image' | 'video' | 'audio',
    media_item: Array<MediaItem>,
  };

  declare type MediaItem = {
    src: string,
    key: string,
    type: 'image' | 'video' | 'audio',
  };

  declare type EntryContent = {
    type:
      | 'html'
      | 'image/png'
      | 'image/jpg'
      | 'image/jpeg'
      | 'video/hls'
      | 'youtube-id'
      | 'application/atom+xml',
    src?: string,
    content?: string,
  };

  declare type EntryLink = {
    type?: 'text/html',
    rel: 'self' | 'alternate',
    href: string,
  };
}
