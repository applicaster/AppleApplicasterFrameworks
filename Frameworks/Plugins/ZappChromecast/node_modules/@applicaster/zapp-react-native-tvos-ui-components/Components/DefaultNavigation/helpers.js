import * as R from "ramda";

export const defaultMenuItems = {
  CENTER: "center",
  LEFT: "left",
  RIGHT: "right",
  UNDEFINED: "undefined",
};
export const menuGroupId = "DefaultNavigation";

export function navItemsFromProps(props) {
  const {
    menuProps: { nav_items },
  } = props;
  return nav_items;
}

export function generateMappingData(selected, navItems) {
  function dataMapper(selected) {
    let selectedItemFound = false;

    return function(item, index) {
      const {
        data: { target },
        id,
      } = item;
      const isSelected = selected === target && selectedItemFound === false;
      if (isSelected && selectedItemFound === false) {
        selectedItemFound = true;
      }
      return {
        focused: isSelected,
        selected: isSelected,
        id: id,
        targetId: target,
        navigationType: navigationTypeOfItem(item),
        navigationItem: item,
        originalIndex: index,
      };
    };
  }

  return R.addIndex(R.map)(dataMapper(selected), navItems);
}

export function navigationTypeOfItem(item) {
  const { type } = item;
  switch (type) {
    case "tv_right_button":
      return defaultMenuItems.RIGHT;
    case "tv_right_image":
      return defaultMenuItems.RIGHT;
    case "tv_left_button":
      return defaultMenuItems.LEFT;
    case "tv_left_image":
      return defaultMenuItems.LEFT;
    case "label":
      return defaultMenuItems.CENTER;
    default:
      return defaultMenuItems.UNDEFINED;
  }
}

export function findItemToFocus(data, selected) {
  return (
    R.find(R.propEq("selected", true))(data) ||
    (selected && R.find(R.propEq("targetId", selected))(data))
  );
}

export function focusableItemIdByData(item) {
  const { targetId, id } = item;
  return targetId ? `${id}.${targetId}` : null;
}

export function isHomeItemSelected(data, homeId) {
  const homeItem = findItemByTarget(data, homeId);
  return homeItem && homeItem.selected;
}

export function isMenuFocused(data, navigator) {
  if (navigator.canGoBack()) {
    return false;
  }
  return !!R.find(R.propEq("focused", true))(data);
}

export function findItemByTarget(data, searchedTarget) {
  return searchedTarget && R.find(R.propEq("targetId", searchedTarget))(data);
}

export function findHomeItem(data, homeId) {
  return R.compose(R.find(R.propEq("targetId", homeId)))(data);
}
