// @flow

import * as React from "react";
import * as ReactNative from "react-native";
import { URLSchemeHandler } from "../URLSchemeHandler";

type Props = {
  listenerSpy?: ?(...any) => void,
  children: React.Element<any>,
};

type State = {
  url: string | null,
};
const URL_EVENT_TYPE = "url";

const { DeviceEventEmitter, Platform, Linking } = ReactNative;

export class URLSchemeListener extends React.PureComponent<Props, State> {
  constructor(props: Props) {
    super(props);
    this.getInitialURL = this.getInitialURL.bind(this);
    this.handleOpenUrl = this.handleOpenUrl.bind(this);
    this.handleOpenUrlError = this.handleOpenUrlError.bind(this);
    this.setUrlSchemeInvocation = this.setUrlSchemeInvocation.bind(this);
    this.state = { url: null };
    this.listener = null;
  }

  componentDidMount() {
    Linking.addEventListener(URL_EVENT_TYPE, this.handleOpenUrl);
    if (Platform.OS === "android") {
      this.listener = DeviceEventEmitter.addListener(
        "handleOpenUrl",
        this.handleOpenUrl
      );
    }
    return this.getInitialURL();
  }

  componentWillUnmount() {
    Linking.removeEventListener(URL_EVENT_TYPE, this.handleOpenUrl);
    if (Platform.OS === "android") {
      DeviceEventEmitter.removeListener(this.listener);
    }
  }

  /**
   * If an initial URL is found on app start, pass it to handleOpenURL
   */
  getInitialURL() {
    // the following is only relevant for test
    // spying on component methods can be complicated
    // so we pass this function as prop only in the test,
    // to be able to easily spy on this method
    this.props.listenerSpy && this.props.listenerSpy("getInitialURL");

    return Linking.getInitialURL()
      .then(url => url && this.handleOpenUrl({ url }))
      .catch(this.handleOpenUrlError);
  }

  handleOpenUrl({ url, ...args }: { url?: string } = {}) {
    // the following is only relevant for test
    // spying on component methods can be complicated
    // so we pass this function as prop only in the test,
    // to be able to easily spy on this method
    this.props.listenerSpy && this.props.listenerSpy("handleOpenUrl", { url });

    if (url) {
      return Linking.canOpenURL(url)
        .then(() => this.setUrlSchemeInvocation(url))
        .catch(this.handleOpenUrlError);
    }
  }

  handleOpenUrlError(error: Error) {
    console.warn("an error occurred while trying to open a url", { error }); // eslint-disable-line no-console
  }

  setUrlSchemeInvocation(url = null) {
    this.setState({ url });
  }

  render() {
    const { url } = this.state;

    // eslint-disable-next-line no-extra-boolean-cast
    return !!url ? (
      <URLSchemeHandler
        url={url}
        onFinish={() => this.setUrlSchemeInvocation()}
      />
    ) : (
      this.props.children
    );
  }
}
