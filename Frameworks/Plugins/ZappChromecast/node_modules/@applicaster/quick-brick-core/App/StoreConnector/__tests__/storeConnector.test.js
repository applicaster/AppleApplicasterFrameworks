import * as React from "react";
import * as ReactIs from "react-is";
import { View, Text } from "react-native";
import { shallow } from "enzyme";
import { shallowToJson } from "enzyme-to-json";
import configureStore from "redux-mock-store";

import { storeConnector } from "../index";

const styles = { foo: "bar" };
const components = { grid: jest.fn() };
const rivers = { A123: { name: "home", id: "A123" } };
const appSettings = { bundleIdentifier: "com.app.test" };

const Component = () => (
  <View>
    <Text>I'm a component</Text>
  </View>
);
const store = configureStore()({
  styles,
  components,
  rivers,
  appSettings,
});

describe("storeConnector", () => {
  it("returns a Component", () => {
    const WrappedComponent = storeConnector(Component);

    expect(ReactIs.isValidElementType(WrappedComponent)).toBe(true);

    expect(WrappedComponent).toEqual(
      expect.objectContaining({
        WrappedComponent: expect.any(Function),
        displayName: "Connect(Component)",
        childContextTypes: expect.any(Object),
        contextTypes: expect.any(Object),
        propTypes: expect.any(Object),
      })
    );
  });

  it("passes the props to the component", () => {
    const WrappedComponent = storeConnector(Component);
    const wrapper = shallow(<WrappedComponent />, { context: { store } });
    const wrapperProps = wrapper.props();

    expect(shallowToJson(wrapper)).toMatchSnapshot();
    expect(wrapperProps).toHaveProperty("styles", styles);
    expect(wrapperProps).toHaveProperty("components", components);
    expect(wrapperProps).toHaveProperty("rivers", rivers);
    expect(wrapperProps).toHaveProperty("appSettings", appSettings);
  });
});
