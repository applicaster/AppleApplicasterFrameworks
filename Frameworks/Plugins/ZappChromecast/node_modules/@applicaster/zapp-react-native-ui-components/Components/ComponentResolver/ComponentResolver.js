// @flow
import * as React from "react";
import { findComponentByType } from "@applicaster/zapp-react-native-utils/pluginUtils";

import { CellRendererResolver } from "../CellRendererResolver";

type Decorator = (React.ComponentType<any>) => React.ComponentType<any>;

type Props = {
  component: any,
  components: { [string]: React.componentType<any> },
  children: (React.ComponentType<any>) => React.ComponentType<any>,
  decorators: ?(Decorator | [Decorator]),
  plugins: [{ module: any, type: string, name: string }],
  styles: any,
  cellStyles: any,
};

export function ComponentResolver({
  component,
  components,
  decorators,
  children,
  plugins,
  styles,
  cellStyles,
}: Props) {
  const { component_type } = component;

  const Component = React.useMemo(
    () =>
      findComponentByType({
        components,
        componentType: component_type,
        decorators,
        plugins,
      }),
    []
  );

  const CellRenderer = React.useMemo(
    () =>
      CellRendererResolver({
        component,
        plugins,
        styles,
        cellStyles,
      }),
    []
  );

  if (!Component) {
    // eslint-disable-next-line no-console
    console.warn(
      `Component ${component_type} cannot be found - it is skipped from rendering`
    );

    return null;
  }

  return children(Component, CellRenderer);
}

export const ComponentResolverComponent = React.memo(ComponentResolver);
