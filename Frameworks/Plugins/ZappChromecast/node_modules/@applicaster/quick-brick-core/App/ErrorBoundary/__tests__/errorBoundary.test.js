// @flow
import React from "react";
import { View, Text } from "react-native";
import { shallow } from "enzyme";
import { shallowToJson } from "enzyme-to-json";
import configureStore from "redux-mock-store";

import { ErrorBoundaryComponent } from "../ErrorBoundary";
import { ErrorBoundary } from "../index";

const TestComponent = ({ error }: { error: any }) => {
  if (error) {
    throw new Error("error !!");
  }

  return (
    <View>
      <Text>all is good</Text>
    </View>
  );
};

const DisplayErrorPlugin = () => (
  <View>
    <Text>I'm a displayErrorPlugin</Text>
  </View>
);

const DisplayErrorComponent = () => (
  <View>
    <Text>I'm a displayErrorComponent</Text>
  </View>
);

const errorState = {
  hasError: true,
  error: new Error("oh no"),
  info: { componentStack: "error at ... \n ..." },
};

const pluginsWithDisplayErrorComponent = { DisplayError: DisplayErrorPlugin };
const components = { DisplayError: DisplayErrorComponent };

const store = configureStore()({
  components,
  plugins: pluginsWithDisplayErrorComponent,
});

describe("<ErrorBoundary />", () => {
  it("gets the components & plugin props from the store", () => {
    const wrapper = shallow(<ErrorBoundary />, { context: { store } });
    const wrapperProps = wrapper.props();

    expect(shallowToJson(wrapper)).toMatchSnapshot();
    expect(wrapperProps).toHaveProperty("components", components);
    expect(wrapperProps).toHaveProperty(
      "plugins",
      pluginsWithDisplayErrorComponent
    );
  });

  it("gets the DisplayError component from plugins", () => {
    const wrapper = shallow(
      <ErrorBoundaryComponent
        plugins={pluginsWithDisplayErrorComponent}
        components={components}
      >
        <TestComponent error />
      </ErrorBoundaryComponent>
    );

    wrapper.setState(errorState);
    expect(shallowToJson(wrapper)).toMatchSnapshot();
    expect(wrapper.state("DisplayErrorComponent")).toEqual(DisplayErrorPlugin);
  });

  it("gets the DisplayError component from components if not defined in plugins", () => {
    const wrapper = shallow(
      <ErrorBoundaryComponent plugins={{}} components={components}>
        <TestComponent error />
      </ErrorBoundaryComponent>
    );

    wrapper.setState(errorState);
    expect(shallowToJson(wrapper)).toMatchSnapshot();
    expect(wrapper.state("DisplayErrorComponent")).toEqual(
      DisplayErrorComponent
    );
  });

  describe("when there is no error", () => {
    const wrapper = shallow(
      <ErrorBoundaryComponent components={components} plugins={{}}>
        <TestComponent />
      </ErrorBoundaryComponent>
    );

    it("renders correctly", () => {
      expect(shallowToJson(wrapper)).toMatchSnapshot();
    });
  });

  describe("When an error is caught", () => {
    const _consoleLog = console.log; // eslint-disable-line no-console

    const didCatchSpy = jest.spyOn(
      ErrorBoundaryComponent.prototype,
      "componentDidCatch"
    );

    const wrapper = shallow(
      <ErrorBoundaryComponent components={components} plugins={{}}>
        <TestComponent error />
      </ErrorBoundaryComponent>
    );

    wrapper.setState(errorState);

    beforeAll(() => {
      console.log = jest.fn(); // eslint-disable-line no-console
    });

    afterAll(() => {
      console.log = _consoleLog; // eslint-disable-line no-console
    });

    it.skip("the componentDidCatch method is called", () => {
      // a current bug with enzyme doesn't allow this to be tested
      expect(didCatchSpy).toHaveBeenCalled();
    });

    it("renders correctly", () => {
      expect(shallowToJson(wrapper)).toMatchSnapshot();
    });
  });
});
