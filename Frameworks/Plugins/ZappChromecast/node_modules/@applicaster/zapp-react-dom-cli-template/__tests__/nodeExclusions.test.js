const R = require("ramda");

const NODE_EXCLUSIONS_REGEX_PATH = ["module", "rules", 0, "exclude"];

const nodeModulesExclusions = R.path(
  NODE_EXCLUSIONS_REGEX_PATH,
  require("../webpack.config.common.babel.js.ejs")
);

const testExclusion = modulePath =>
  R.cond([
    [Array.isArray, R.all(R.test(R.__, modulePath))],
    [R.is(Function), R.apply(R.__, [modulePath])],
    [R.is(RegExp), R.test(R.__, modulePath)],
  ])(nodeModulesExclusions);

describe("zapp react dom CLI template - node modules exclusions", () => {
  it("returns true for random node modules", () => {
    const modulePath = "../node_modules/some-foo-module";
    expect(testExclusion(modulePath)).toBe(true);
  });

  it("returns true for scoped packages not prefixed with quick-brick or zapp-react", () => {
    const modulePath = "../node_modules/@applicaster/zapp-pipes-provider-foo";
    expect(testExclusion(modulePath)).toBe(true);
  });

  it("return false for scoped packages prefixed with quick-brick", () => {
    const modulePath = "../node_modules/@applicaster/quick-brick-core";
    expect(testExclusion(modulePath)).toBe(false);
  });

  it("returns false for scoped packages prefixed with zapp-react-", () => {
    const modulePath =
      "../node_modules/@applicaster/zapp-react-native-ui-components";
    expect(testExclusion(modulePath)).toBe(false);
  });

  it("returns false for the non-transpiled query-string package", () => {
    const modulePath =
      "../node_modules/@applicaster/zapp-pipes-provider-foo/node_modules/query-string/index.js";
    expect(testExclusion(modulePath)).toBe(false);
  });

  it("returns false for the non-transpiled strict-uri-encode package", () => {
    const modulePath =
      "../node_modules/@applicaster/zapp-pipes-provider-foo/node_modules/strict-uri-encode/index.js";
    expect(testExclusion(modulePath)).toBe(false);
  });

  it("returns false for the non-transpiled split-on-first package", () => {
    const modulePath =
      "../node_modules/@applicaster/zapp-pipes-provider-foo/node_modules/split-on-first/index.js";
    expect(testExclusion(modulePath)).toBe(false);
  });
});
