import * as R from "ramda";
import { createSelector } from "reselect";

import { getPathAttributes } from "@applicaster/zapp-react-native-utils/navigationUtils";

const riverSelector = R.prop("rivers");
const pathnameSelector = R.prop("pathname");
const navigationStackSelector = R.prop("stack");

export const homeRiverSelector = createSelector(
  riverSelector,
  R.compose(R.find(R.propEq("home", true)), R.values)
);

export const activeRiverSelector = createSelector(
  riverSelector,
  pathnameSelector,
  (rivers, pathname) => {
    const homePathname = R.compose(
      R.find(R.propEq("home", true)),
      R.values
    )(rivers);

    if (pathname === "/") {
      return homePathname;
    }

    const activePath = R.compose(
      R.defaultTo(null),
      R.prop(R.__, rivers),
      R.prop("screenId"),
      R.findLast(({ screenId }) => !!R.path([screenId, "navigations"], rivers)),
      getPathAttributes
    )({ pathname });

    return activePath || homePathname;
  }
);

export const previousStackEntriesSelector = createSelector(
  navigationStackSelector,
  R.compose(R.reject(R.compose(R.test(/\/hooks\//), R.prop("route"))), R.init)
);

export const lastEntrySelector = createSelector(
  navigationStackSelector,
  R.last
);
