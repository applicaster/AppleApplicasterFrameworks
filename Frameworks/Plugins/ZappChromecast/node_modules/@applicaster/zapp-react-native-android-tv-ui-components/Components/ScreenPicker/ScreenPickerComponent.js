// @flow
import * as React from "react";
import * as R from "ramda";

import { View } from "react-native";
import { ScreenSelector } from "./ScreenSelector";
import { ScreenContainer } from "./ScreenContainer";
import { screenPickerStyle, screenSelectorStyle } from "./styles";
import { Focusable } from "@applicaster/zapp-react-native-ui-components/Components/Focusable";
import { useInitialFocus } from "@applicaster/zapp-react-native-utils/focusManager";

type Props = {
  onLoadFinished: () => void,
  zappPipesData: any,
  component: {
    id: string,
  },
  navigator: {},
  rivers: { [string]: {} },
  screenId: string,
  focused: boolean,
  parentFocus: {
    nextFocusDown: React.Ref,
    nextFocusRight: React.Ref,
    nextFocusLeft: React.Ref,
    nextFocusUp: React.Ref,
  },
};

export function ScreenPickerComponent(props: Props) {
  const {
    component,
    onLoadFinished,
    zappPipesData,
    focused,
    parentFocus,
  } = props;
  const screenSelectorRef = React.useRef(null);
  const containerSelectorRef = React.useRef(null);
  const [state, setState] = React.useState({
    targetRiverId: null,
    initialItemId: null,
    selectedItem: null,
  });

  React.useEffect(() => {
    setupInitialValue();
  });

  useInitialFocus(focused, screenSelectorRef);

  const getTargetRiverId = ({ screen_type }) => {
    const riverTargetFromComponent = R.path(["data", "target"], component);

    return screen_type || riverTargetFromComponent;
  };

  const selectItem = (item, index) => {
    const targetRiverId = getTargetRiverId(item);
    const initialItemId = item.id;

    setState({ selectedItem: item, targetRiverId, initialItemId });
  };

  const setupInitialValue = () => {
    const { entry: entries } = zappPipesData?.data;

    if (!state.selectedItem && entries) {
      const defaultIndex = (props?.component?.styles?.defaultTab || 1) - 1;
      const newDefaultIndex = entries.length > defaultIndex ? defaultIndex : 0;
      const defaultItem = entries[newDefaultIndex];

      selectItem(defaultItem, newDefaultIndex);
    }
  };

  const renderMainComponent = () => {
    onLoadFinished();
    const { entry: entries } = zappPipesData?.data;
    const { id } = component;

    return (
      <View style={screenPickerStyle}>
        <Focusable
          ref={screenSelectorRef}
          id="screen-picker-screen-selector"
          nextFocusUp={parentFocus.nextFocusUp}
          nextFocusRight={containerSelectorRef}
        >
          {(focused, parentFocus) => (
            <ScreenSelector
              {...state}
              focused={focused}
              parentFocus={parentFocus}
              style={screenSelectorStyle}
              selectItem={selectItem}
              entry={entries}
              component={component}
              componentId={`${id}.ScreenSelector`}
            />
          )}
        </Focusable>
        <Focusable
          nextFocusUp={parentFocus.nextFocusUp}
          ref={containerSelectorRef}
          id="screen-picker-screen-container"
          nextFocusLeft={screenSelectorRef}
        >
          {(focused, parentFocus) => (
            <ScreenContainer
              focused={focused}
              parentFocus={parentFocus}
              componentId={`${id}.ScreenSelector`}
              {...state}
            />
          )}
        </Focusable>
      </View>
    );
  };

  return renderMainComponent(zappPipesData.data);
}
