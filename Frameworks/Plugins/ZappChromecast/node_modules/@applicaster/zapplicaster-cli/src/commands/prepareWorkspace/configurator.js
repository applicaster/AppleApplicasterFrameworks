const R = require("ramda");
const { getAppVersionParams } = require("../../zapp");
const { resolveAppTemplate } = require("../../templates");
const { isZappReactNativeRepo } = require("../../settings");

const store_map = {
  amazon: "amazon",
  google_play: "android",
  apple_store: "ios",
  samsung_app_store: "samsung_tv",
  lg_content_store: "lg_tv",
};

function resolvePlatform(stylesUrl) {
  const urlParts = stylesUrl.split("/");
  const store = urlParts[urlParts.length - 4];

  return store_map[store];
}

/**
 * Creates the configuration object for the task
 * @param {any} args : app Version ID argument passed to the cli
 * @param {any} options : contains the options passed to the cli call
 * @returns {configuration}
 */
async function configurator({ cliArgs, cliOptions }) {
  const appVersionId = R.head(cliArgs) || cliOptions.appVersionId;
  const {
    openSdk = false,
    verbose = false,
    destinationPath = null,
    zappReactNative = isZappReactNativeRepo(),
    yarn,
    template,
    newWorkspace,
    buildMobile,
  } = cliOptions;

  const buildParams = await getAppVersionParams(appVersionId);
  const platform = resolvePlatform(buildParams.styles_url);
  const { device_target: deviceTarget } = buildParams;

  const _destinationPath = zappReactNative
    ? "development-app"
    : destinationPath;

  return {
    appVersionId,
    buildParams,
    platform,
    deviceTarget,
    openSdk,
    verbose,
    destinationPath: _destinationPath,
    zappReactNative,
    yarn,
    template: resolveAppTemplate(template, platform, deviceTarget),
    newWorkspace,
    buildMobile,
  };
}

module.exports = { configurator };
