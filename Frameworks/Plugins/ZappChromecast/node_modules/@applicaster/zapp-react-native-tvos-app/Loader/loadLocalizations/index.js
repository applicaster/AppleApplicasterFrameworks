import axios from "axios";
import * as R from "ramda";
import { getLanguageCode } from "../../Utils/localizationsHelper";

function performLoadLocalization(
  currentLanguageCode,
  currentLocaleURL,
  dispatch
) {
  if (R.isNil(currentLocaleURL)) {
    return Promise.reject(new Error("Locale URL is empty"));
  }

  return axios
    .get(currentLocaleURL)
    .then(R.prop("data"))
    .then(localizedStrings => {
      dispatch({
        type: "LOAD_LOCALIZATIONS",
        payload: {
          [currentLanguageCode]: localizedStrings,
        },
      });
    });
}
function retrieveLocaleURL(currentLanguageCode, localizations) {
  if (!currentLanguageCode && !localizations) {
    return null;
  }
  return (
    localizations[currentLanguageCode] ||
    localizations["en"] ||
    Object.values(localizations)[0]
  );
}
export function loadLocalizations(localizations, dispatch) {
  const currentLanguageCode = getLanguageCode();
  const currentLocaleURL = retrieveLocaleURL(
    currentLanguageCode,
    localizations
  );
  return performLoadLocalization(
    currentLanguageCode,
    currentLocaleURL,
    dispatch
  );
}
