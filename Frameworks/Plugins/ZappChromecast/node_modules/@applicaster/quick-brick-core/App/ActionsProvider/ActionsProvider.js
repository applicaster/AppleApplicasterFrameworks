import * as React from "react";
import * as R from "ramda";

import { ActionsContext } from "@applicaster/zapp-react-native-ui-components/Contexts/ActionsContext";

type Props = {
  children: React.Node,
  rivers: { [string]: {} },
  plugins: [{}],
  useLocation: () => {},
  useHistory: () => {},
};

const getActionPlugins = (plugins) =>
  R.filter(R.path(["module", "actionName"]))(plugins);

const abstractIdentifier = (actionPlugins) =>
  R.compose(
    R.mergeAll,
    R.map((plugin) => ({ [plugin.identifier]: plugin }))
  )(actionPlugins);

const ChildrenWrapper = ({ children }) => {
  return children;
};
const contextComposer = (context) => R.compose(...context)(ChildrenWrapper);

export function ActionsProvider(props: Props) {
  const { children, plugins } = props;

  const actionPlugins = React.useMemo(
    () =>
      R.ifElse(
        R.anyPass([R.isNil, R.isEmpty]),
        R.always([]),
        R.compose(abstractIdentifier, getActionPlugins)
      )(plugins),
    [plugins]
  );

  const contextProviders = React.useMemo(() => {
    try {
      const providers = R.compose(
        R.map(R.path(["module", "contextProvider"])),
        getActionPlugins
      )(plugins);

      return providers;
    } catch (err) {
      return false;
    }
  }, [plugins]);

  const Context = contextProviders?.length
    ? contextComposer(contextProviders)
    : React.Fragment;

  return (
    <ActionsContext.Provider value={{ actions: actionPlugins }}>
      <Context>{children}</Context>
    </ActionsContext.Provider>
  );
}
