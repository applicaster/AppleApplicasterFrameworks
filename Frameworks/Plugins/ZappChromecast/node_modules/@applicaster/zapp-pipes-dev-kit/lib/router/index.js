"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRouterForProviders = createRouterForProviders;

var _providers = require("../providers");

var _routerUtils = require("./routerUtils");

var _ramda = require("ramda");

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function createRouterForProviders(providers, nativeBridge) {
  var _this = this;

  var providersEngine = (0, _ramda.compose)((0, _providers.buildProviderEngine)(nativeBridge), (0, _ramda.reduce)(_providers.buildProviderMap, {}))(providers);

  var router = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(request, h) {
      var parserResult;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              parserResult = (0, _ramda.compose)(providersEngine, _routerUtils.parseRequest)(request);

              if (parserResult) {
                _context.next = 3;
                break;
              }

              return _context.abrupt("return", h.response("parser result is null or undefined").code(500));

            case 3:
              return _context.abrupt("return", (0, _routerUtils.forceAsync)(parserResult).then(function (_ref2) {
                var code = _ref2.code,
                    response = _ref2.response;

                return h.response(response).code(code);
              }));

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, _this);
    }));

    return function router(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();

  return {
    method: "GET",
    path: "/{provider}/{command?}",
    handler: router
  };
}