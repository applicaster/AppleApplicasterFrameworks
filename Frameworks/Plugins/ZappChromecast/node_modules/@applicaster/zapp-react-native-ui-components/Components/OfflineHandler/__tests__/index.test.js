import React from "react";
import { NetInfo } from "react-native";
import renderer, { act } from "react-test-renderer";
import { shallow } from "enzyme";
import { OfflineHandler } from "../";
import { FullScreenView } from "../FullScreenView";
import { NotificationView } from "../NotificationView";

jest.useFakeTimers();

jest.mock("NetInfo", () => {
  const NetInfoMock = {
    connection: {
      type: "none",
    },
    addEventListener: jest.fn().mockImplementation((name, cb) => {
      cb(NetInfoMock.connection);
    }),
    removeEventListener: jest.fn(),
  };
  return NetInfoMock;
});

describe("OfflineHandler", () => {
  it("renders", () => {
    shallow(<OfflineHandler />);
  });

  it("renders FullScreen mode if component was rendered while offline", () => {
    const instance = renderer.create(<OfflineHandler />);
    instance.update(<OfflineHandler />);

    const fullScreenView = instance.root.findByType(FullScreenView);
    expect(fullScreenView).toBeDefined();
  });

  it("renders Notification mode if component was rendered while online", () => {
    NetInfo.connection.type = "wifi";
    const instance = renderer.create(<OfflineHandler />);
    instance.update(<OfflineHandler />);

    const notificationsView = instance.root.findByType(NotificationView);
    expect(notificationsView).toBeDefined();
  });

  it("closes the FullScreen mode when onClose is invoked", () => {
    NetInfo.connection.type = "none";
    const instance = renderer.create(<OfflineHandler />);
    instance.update(<OfflineHandler />);

    const fullScreenView = instance.root.findByType(FullScreenView);
    expect(fullScreenView).toBeDefined();
    act(() => {
      fullScreenView.props.onClose();
    });

    const notificationsView = instance.root.findByType(NotificationView);
    expect(notificationsView).toBeDefined();
  });

  it("changes online status when going online", () => {
    NetInfo.connection.type = "none";
    const instance = renderer.create(<OfflineHandler />);
    instance.update(<OfflineHandler />);

    const fullScreenView = instance.root.findByType(FullScreenView);
    expect(fullScreenView.props.online).toBe(false);
    NetInfo.connection.type = "wifi";
    instance.update(<OfflineHandler />);

    expect(fullScreenView.props.online).toBe(true);
  });
});
