import * as R from "ramda";
import { NativeModules } from "react-native";

const { AnalyticsBridge } = NativeModules;

/**
 * this function will return true if the Analytics Bridge native module is missing. this
 * allows to skip execution and prevent a crash if this happens
 * @returns {Boolean}
 */
function guardAgainstUndefinedBridge() {
  if (!AnalyticsBridge) {
    // eslint-disable-next-line no-console
    console.warn("Analytics Bridge is missing - no event will be sent", {
      NativeModules,
    });
    return true;
  }

  return false;
}

/**
 * Post to application for event type and additional params
 *
 * @param {string} eventName Analytic event name
 * @param {Object} payload   Additonal parameters that will be passed with event
 */
export function postAnalyticEvent(eventName, payload) {
  if (isValidAnalyticsData(eventName, payload)) {
    if (guardAgainstUndefinedBridge()) {
      return;
    }
    AnalyticsBridge.postEvent(eventName, payload);
  }
}

export function providePlugins(plugins, configs, callback) {
  if (guardAgainstUndefinedBridge()) {
    return;
  }
  AnalyticsBridge.setPlugins(plugins, configs, callback);
}

/**
 * Notify application that timed event was started for event type and additional params.
 *
 * @param {string} eventName Analytic event name
 * @param {Object} payload   Additonal parameters that will be passed with event
 */
export function startAnalyticsTimedEvent(eventName, payload) {
  if (isValidAnalyticsData(eventName, payload)) {
    if (guardAgainstUndefinedBridge()) {
      return;
    }
    AnalyticsBridge.postTimedEvent(eventName, payload);
  }
}

/**
 * Notify application that timed event was finished for event type and additional params.
 *
 * @param {string} eventName Analytic event name
 * @param {Object} payload   Additonal parameters that will be passed with event
 */
export function endAnalyticsTimedEvent(eventName, payload) {
  if (isValidAnalyticsData(eventName, payload)) {
    if (guardAgainstUndefinedBridge()) {
      return;
    }
    AnalyticsBridge.endTimedEvent(eventName, payload);
  }
}

/**
 * Checks if analytics data to pass wass passsed expected values
 *
 * @param {string} eventName Analytic event name
 * @param {Object} payload   Additonal parameters that will be passed with event
 *
 * @returns {boolean} True in case if parameters suitable for manager to send, otherwise false
 */
export function isValidAnalyticsData(eventName, payload = null) {
  const eventExist = R.is(String, eventName);
  // we allow payload to be null, but we're leveraging here the fact that typeof null === "object"
  const payloadObjectOrNil = typeof payload === "object";

  return eventExist && payloadObjectOrNil;
}
