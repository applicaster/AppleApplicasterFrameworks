// @flow
import * as React from "react";
import { FocusableGroupNative } from "@applicaster/zapp-react-native-ui-components/Components/NativeFocusables";
import { BaseFocusable } from "@applicaster/zapp-react-native-ui-components/Components/BaseFocusable";
import { FocusableGroupContextWrapper } from "./FocusableGroupContextWrapper";
function noop() {}

type Props = {
  id: string,
  children: boolean => React.ComponentType<any>,
  onWillUpdateFocus: () => void,
  onDidUpdateFocus: () => void,
  isFocusDisabled: boolean,
  initialItemId: string,
  resetFocusToInitialValue: boolean,
  focusGroupRef: React.Component,
  shouldUsePreferredFocus: boolean,
};

type State = {
  isActive: boolean,
};

export class FocusableGroupComponent extends BaseFocusable<Props, State> {
  constructor(props) {
    super(props);
    this.focusableGroupNativeRef = null;
    this.state = {
      isActive: false,
    };
    this.onWillUpdateFocus = this.onWillUpdateFocus.bind(this);
    this.onDidUpdateFocus = this.onDidUpdateFocus.bind(this);
    this.isGroup = true;

    this.shouldUsePreferredFocus = this.shouldUsePreferredFocus.bind(this);
  }

  connectedScreenId() {
    const {
      screenData: { screenId, parentScreenId },
    } = this.props;
    if (screenId) {
      return null;
    }
    return parentScreenId ? `${parentScreenId}-${screenId}` : screenId;
  }

  /**
   * tells whether the group should give focus to a preferred item when it gains focus from another
   * group
   * @returns {boolean}
   */
  shouldUsePreferredFocus() {
    return this.props.shouldUsePreferredFocus || false;
  }

  /**
   * indicates whether the underlying component should claim preferred focus
   * when navigating into the group of this item
   * @returns {boolean}
   */
  isPreferredFocus() {
    return this.props.preferredFocus || false;
  }

  onWillUpdateFocus({ nativeEvent }) {
    const { isActive } = nativeEvent;
    this.setState({ isActive });
    const { onWillUpdateFocus = noop } = this.props;
    onWillUpdateFocus(nativeEvent);
  }

  onDidUpdateFocus({ nativeEvent }) {
    const { onWillUpdateFocus = noop } = this.props;
    onWillUpdateFocus(onWillUpdateFocus);
  }

  setFocusDisabled(isFocusDisabled) {
    if (this.ref) {
      this.ref.current.setNativeProps({
        isFocusDisabled,
      });
    }
  }

  render() {
    const {
      children,
      id,
      isFocusDisabled,
      initialItemId,
      resetFocusToInitialValue,
      ...otherProps
    } = this.props;
    return (
      <FocusableGroupNative
        groupId={id || null}
        ref={this.ref}
        isFocusDisabled={isFocusDisabled}
        initialItemId={initialItemId}
        onWillUpdateFocus={this.onWillUpdateFocus}
        onDidUpdateFocus={this.onDidUpdateFocus}
        resetFocusToInitialValue={resetFocusToInitialValue}
        onLayout={event => this.measureView(event)}
        {...otherProps}
      >
        <FocusableGroupContextWrapper parentGroupId={id}>
          {children}
        </FocusableGroupContextWrapper>
      </FocusableGroupNative>
    );
  }
}
