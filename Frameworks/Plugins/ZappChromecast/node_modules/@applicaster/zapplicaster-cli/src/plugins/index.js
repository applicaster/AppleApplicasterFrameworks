/* eslint-disable indent */
const R = require("ramda");
const camelize = require("camelize");
const {
  defaultPlugins,
  fallbackPlugins,
  mandatoryPlugins,
} = require("./plugins_list");

/**
 * module plugins
 * @module @applicaster/zapplicaster-cli/src/plugins
 */

const JS_PLUGIN_CATEGORIES = ["data_source_provider"];

function isJSPlugin(pluginConfiguration) {
  const {
    plugin: { type, react_native },
  } = pluginConfiguration;
  return JS_PLUGIN_CATEGORIES.includes(type) || react_native;
}

/**
 * maps plugin_configurations.json entries to js dependency object
 *
 * @param {any} pluginCongfiguration
 * @returns {any} dependency object
 */
function pluginConfigurationMapper(pluginCongfiguration) {
  const {
    plugin: { name, type, dependency_name, dependency_version, identifier },
    configuration_json,
  } = pluginCongfiguration;
  return dependency_name && identifier
    ? {
        name,
        identifier,
        type: [type],
        packageName: dependency_name,
        version: dependency_version,
        moduleName: camelize(identifier),
        configuration: configuration_json,
      }
    : null;
}

/**
 * formats the plugin data gathered from the plugin configurations to a format
 * which can be easily injected in a package.json
 * @param {Object} plugin
 * @param {String} plugin.packageName name of the npm package
 * @param {String} plugin.version version of the npm package
 * @returns {Object}
 */
function pluginDependencyMapper({ packageName, version }) {
  return {
    type: "dependencies",
    name: packageName,
    version,
  };
}

/**
 * maps plugins gathered from plugin configurations with the above function
 * @param {[Object]} plugins array of plugins data to map out
 * @returns {[Object]}
 */
const getPluginDependencies = R.map(pluginDependencyMapper);

/**
 * gather dependencies from plugin configurations
 * @param {array} pluginConfigurations array coming from the app's config files
 * @returns {array} formatted js dependencies
 */
const gatherDependencies = R.compose(
  R.reject(R.isNil),
  R.map(pluginConfigurationMapper),
  R.filter(isJSPlugin)
);

function getPlatform(platform, deviceTarget) {
  switch (platform) {
    case "amazon":
      return "android";

    case "ios":
      return deviceTarget === "apple_tv" ? "tvos" : "ios";

    default:
      return platform;
  }
}

function getDeviceTarget(_, deviceTarget) {
  const TV_DEVICES = ["apple_tv", "android_tv", "samsung_tv", "lg_tv"];
  if (TV_DEVICES.includes(deviceTarget)) {
    return "tv";
  }

  const MOBILE_DEVICES = ["iphone", "smartphone"];
  if (MOBILE_DEVICES.includes(deviceTarget)) {
    return "mobile";
  }

  const TABLET_DEVICES = ["ipad", "tablet"];
  if (TABLET_DEVICES.includes(deviceTarget)) {
    return "tablet";
  }

  return deviceTarget;
}

function getDefaultPlugins(platform, deviceTarget) {
  const appPlatform = getPlatform(platform, deviceTarget);
  const appDeviceTarget = getDeviceTarget(platform, deviceTarget);

  return R.uniq([
    ...defaultPlugins.all_platforms,
    ...defaultPlugins[appDeviceTarget],
    ...defaultPlugins[appPlatform],
  ]);
}

function getFallbackPlugins(platform, deviceTarget, pluginConfigurations) {
  const appPlatform = getPlatform(platform, deviceTarget);
  const appDeviceTarget = getDeviceTarget(platform, deviceTarget);

  let pluginsToAdd = [];

  const reactNativePlugins = pluginConfigurations.filter(
    R.pathEq(["plugin", "react_native"], true)
  );

  R.keys(fallbackPlugins).forEach(pluginType => {
    if (
      reactNativePlugins.filter(R.pathEq(["plugin", "type"], pluginType))
        .length === 0
    ) {
      pluginsToAdd.push(
        ...R.pathOr([], [pluginType, "all_platforms"], fallbackPlugins),
        ...R.pathOr([], [pluginType, appPlatform], fallbackPlugins),
        ...R.pathOr([], [pluginType, appDeviceTarget], fallbackPlugins)
      );
    }
  });

  return R.uniq(pluginsToAdd);
}

function addMandatoryPlugins(plugins) {
  mandatoryPlugins.forEach(mandatoryPlugin => {
    const pluginIdentifiers = R.map(R.prop("identifier"), plugins);

    if (!pluginIdentifiers.includes(mandatoryPlugin.identifier)) {
      plugins.push(mandatoryPlugin);
    }
  });
}

module.exports = {
  gatherDependencies,
  getPluginDependencies,
  getDefaultPlugins,
  getFallbackPlugins,
  addMandatoryPlugins,
};
