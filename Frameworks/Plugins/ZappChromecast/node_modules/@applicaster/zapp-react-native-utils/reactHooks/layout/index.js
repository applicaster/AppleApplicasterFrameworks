// @flow
import { useState, useEffect } from "react";
import R from "ramda";
import { Dimensions } from "react-native";

type RNDimensions = {
  width: number,
  height: number,
  scale: number,
  fontScale: number,
};
type RNDimensionsShort = {
  width: number,
  height: number,
};

type dimensionsFlag = boolean;

type Context = "window" | "screen";

/**
 * @typedef RNDimensions
 * @type {object}
 * @property {number} width
 * @property {number} height
 */

/**
 * @typedef RNDimensionsShort
 * @type {object}
 * @property {number} width
 * @property {number} height
 * @property {number} scale
 * @property {number} fontScale
 */

/**
 * Returns React-native Dimensions object and updates it on any dimension change
 * @param {('screen'|'window')} [context=window] - Dimensions context passed to Dimensions.get method
 * @param {boolean} [fullDimensions=false] - Should return full versions of Dimensions objet
 * @returns {(RNDimensions|RNDimensionsShort)} - Returns Dimensions object
 *
 */
export const useDimensions = (
  context: Context = "window",
  fullDimensions: dimensionsFlag = false
): RNDimensions | RNDimensionsShort => {
  const [dimensions, setDimensions] = useState(Dimensions.get(context));

  useEffect(() => {
    Dimensions.addEventListener("change", ({ [context]: newDimensions }) => {
      setDimensions(newDimensions);
    });
    return () => {
      Dimensions.removeEventListener("change");
    };
  }, []);

  return R.unless(
    () => fullDimensions,
    R.pick(["width", "height"])
  )(dimensions);
};
