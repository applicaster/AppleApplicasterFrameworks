import * as React from "react";
import * as R from "ramda";
import { View, StyleSheet } from "react-native";

import { Header } from "../Header";
import { Carousel } from "../Carousel";

type Props = {
  zappPipesData: {
    data: { id: string, title: string, entry: [{}] },
  },
  component: {
    styles: { header: { visible: boolean } },
    position: number,
  },
  CellRenderer: React.componentType<{ item: Object, state: string }>,
  componentIndex: number,
  focused: boolean,
  parentFocus: {
    nextFocusDown: React.Ref,
    nextFocusUp: React.Ref,
  },
  navigator: { [string]: any },
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    maxWidth: 1920,
  },
});

export function HeroComponent(props: Props) {
  const { zappPipesData, component, CellRenderer, parentFocus } = props;

  const dataSource = zappPipesData?.data?.entry;
  const title = zappPipesData?.data?.title;
  const header = component?.styles?.header;
  const headerData = R.merge(header, { title });

  const { nextFocusUp, nextFocusDown } = parentFocus;

  const data = React.useMemo(() => {
    if (!dataSource.length) {
      return [];
    }

    switch (dataSource.length) {
      case 2:
        return [...dataSource, ...dataSource, ...dataSource];
      case 3:
      case 4:
        return [...dataSource, ...dataSource];
      default:
        return dataSource;
    }
  }, [dataSource]);

  const focusableListProps = {
    focused: props.focused,
    style: styles.container,
    keyExtractor: (item, index) => `${index}-${item.id}`,
    data,
    nextFocusUp,
    nextFocusDown,
    component,
    CellRenderer,
    header,
  };

  return (
    <View style={styles.container}>
      <Header {...headerData} />
      <Carousel {...focusableListProps} />
    </View>
  );
}
