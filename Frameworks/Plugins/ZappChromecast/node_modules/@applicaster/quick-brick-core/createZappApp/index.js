// @flow

/**
 * quick-brick-core module
 * @module @applicaster/quick-brick-core/createZappApp
 * This module creates a ZappApp
 */

import * as React from "react";
import * as R from "ramda";

import type {
  ZappAppConfig,
  AppComponentProps,
} from "@applicaster/zapp-react-native-flow-types";

import {
  createZappReduxStore,
  loadAppContextData,
} from "@applicaster/zapp-react-native-redux";

import { Provider } from "react-redux";

import { EmptyZappApp } from "../defaults";
import { mergeUiComponentPlugins } from "../helpers";

/**
 * Creates a Zapp App with the provided options
 * @export
 * @param {ZappAppConfig} ZappAppConfig configuration object for the zapp app
 * @returns {React.ComponentType<any>}
 */
export function createZappApp(zappAppConfig: ZappAppConfig) {
  const {
    styles = {},
    components = {},
    cellStyles = {},
    plugins = [],
    pluginConfigurations = [],
    remoteConfigurations = {},
    rivers = {},
    reduxStoreOptions = {},
    appSettings = {},
    ZappApp = EmptyZappApp,
  } = zappAppConfig;

  function fetchPluginConfiguration(plugin) {
    const configuration = R.compose(
      R.unless(
        R.isNil,
        R.compose(
          R.tryCatch(JSON.parse, R.flip(R.identity)),
          R.prop("configuration_json")
        )
      ),
      R.defaultTo(null),
      R.find(R.pathEq(["plugin", "identifier"], plugin.identifier))
    )(pluginConfigurations);

    return {
      ...plugin,
      configuration,
    };
  }

  const pluginsWithConfigurations = R.map(fetchPluginConfiguration, plugins);

  const store = createZappReduxStore(reduxStoreOptions);

  const appComponents = mergeUiComponentPlugins(components, plugins);
  const { localizations = {} } = remoteConfigurations;

  loadAppContextData(store.dispatch, {
    styles,
    components: appComponents,
    cellStyles,
    plugins: pluginsWithConfigurations,
    rivers,
    localizations,
    pluginConfigurations,
    remoteConfigurations,
    appSettings,
  });

  const App = (props: AppComponentProps) => (
    <Provider store={store}>
      <ZappApp {...props} />
    </Provider>
  );

  App.displayName = "ZappAppRoot";

  return App;
}
