import * as React from "react";
import { BackHandler } from "react-native";
import * as R from "ramda";

import { withNavigator } from "@applicaster/zapp-react-native-ui-components/Decorators/Navigator";
import { connectToStore } from "@applicaster/zapp-react-native-redux";
import {
  sendQuickBrickEvent,
  QUICK_BRICK_EVENTS,
} from "@applicaster/zapp-react-native-bridge/QuickBrick";

type Props = {
  navigator: {
    goBack: () => void,
    canGoBack: () => boolean,
    currentRoute: () => string,
    replace: ({}) => void,
  },
  rivers: {},
};

const getHome = R.compose(R.find(R.propEq("home", true)), R.values);

export function withInteractionManager(
  Component: React.ComponentType<any>
): React.ComponentType<any> {
  class InteractionManager extends React.Component<Props> {
    constructor(props) {
      super(props);

      this.onHardwareBackPress = this.onHardwareBackPress.bind(this);
    }

    componentDidMount() {
      BackHandler.addEventListener(
        "hardwareBackPress",
        this.onHardwareBackPress
      );
    }

    componentWillUnmount() {
      BackHandler.removeEventListener(
        "hardwareBackPress",
        this.onHardwareBackPress
      );
    }

    isHomeScreen() {
      const { navigator, rivers } = this.props;

      const homeId = R.compose(R.prop("id"), getHome)(rivers);
      const homePath = `/river/${homeId}`;

      return homePath === navigator.currentRoute;
    }

    exitToBackground() {
      sendQuickBrickEvent(QUICK_BRICK_EVENTS.MOVE_APP_TO_BACKGROUND, {
        MOVE_APP_TO_BACKGROUND: true,
      });
    }

    goToHome = () => {
      const { navigator, rivers } = this.props;
      const home = getHome(rivers);
      navigator.replace(home);
    };

    /**
     * Handle back button press on Android
     * See here: https://facebook.github.io/react-native/docs/backhandler
     * the return value must be true to prevent endless loop, I am not sure why
     * (there is no "exit app as default" behavior in RN).
     */
    onHardwareBackPress = () => {
      const { navigator } = this.props;

      if (navigator && !navigator.canGoBack()) {
        if (this.isHomeScreen()) {
          this.exitToBackground();
        } else {
          this.goToHome();
        }
      } else {
        navigator.goBack();
      }

      return true; // Take care! see jsdoc above
    };

    render() {
      return <Component {...this.props} />;
    }
  }

  return R.compose(
    withNavigator,
    connectToStore(R.pick(["rivers"]))
  )(InteractionManager);
}
