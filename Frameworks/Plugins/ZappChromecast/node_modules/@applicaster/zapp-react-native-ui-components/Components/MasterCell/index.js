// @flow
import * as React from "react";
import * as R from "ramda";

import { defaultComponents } from "./DefaultComponents";
import { defaultDataAdapter } from "./dataAdapter";
import { elementMapper, mapElementWithKey } from "./elementMapper";

type Props = {
  item: { [string]: any },
  state: null | "selected" | "focused",
};

const defaultContainerStyle = { flex: 1 };

/**
 * Constructs a MasterCell with the provided options
 * @param {Object} options
 * @param {Object} options.components maps of React components to use when rendering the master cell
 * @param {Object} options.cellConfiguration master cell config coming from Zapp
 * @param {Function} options.dataAdapter optional dataAdapter to use instead of the default one.
 * See dataAdapter.js for more info
 * @param {containerStyles} options.containerStyle style to apply at the top level of the master cell
 * @returns {Function} Functional React Component to render the masterCell with the provided options
 */
export function masterCellBuilder({
  components = defaultComponents,
  cellConfiguration,
  dataAdapter = defaultDataAdapter,
  containerStyle = defaultContainerStyle,
}) {
  const componentsMap = R.merge(defaultComponents, components);
  const { View } = componentsMap;
  const elementsBuilder = dataAdapter(cellConfiguration);

  /**
   * Functional React Component to use to render the master cell
   * @param {Object} props
   * @param {Object} props.item item to be rendered. an item is the result of the master cell configuration,
   * inflated with the data coming from the data source
   * @param {"selected" | "focused" | null} props.state state of the component
   */
  return function MasterCell({ item, state }: Props) {
    const elements = elementsBuilder({ entry: item, state });

    return (
      <View style={containerStyle}>
        {elements.map(mapElementWithKey(elementMapper(componentsMap)))}
      </View>
    );
  };
}
