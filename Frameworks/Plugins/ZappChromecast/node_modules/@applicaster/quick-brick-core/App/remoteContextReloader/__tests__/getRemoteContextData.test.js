import { getRemoteContextData } from "../getRemoteContextData";
import * as ReduxModule from "@applicaster/zapp-react-native-redux";
import nock from "nock";

const styles = {
  style_key1: "style_value",
  style_key2: "style_value",
};

const rivers = [
  { id: "A123", name: "Home" },
  { id: "B456", name: "River" },
];

const newThemeConfig = {
  app_background_color: "red",
  status_theme: "light-content",
};

const pluginConfigurations = [
  {
    plugin: {
      identifier: "foo",
    },
    configuration_json: null,
  },
  {
    plugin: {
      identifier: "theme",
    },
    configuration_json: JSON.stringify(newThemeConfig),
  },
];

const runtimeConfigurationUrls = {
  styles_url: "http://zapp.com/styles.json",
  rivers_url: "http://zapp.com/rivers.json",
  plugin_configurations_url: "http://zapp.com/plugin_configurations.json",
};

const plugins = [
  {
    identifier: "dsp",
    configuration: null,
  },
  {
    identifier: "theme",
    configuration: null,
  },
];

const updatedPlugins = [
  {
    identifier: "dsp",
    configuration: null,
  },
  {
    identifier: "theme",
    configuration: newThemeConfig,
  },
];

const failingRuntimeConfigurationUrls = {
  ...runtimeConfigurationUrls,
  remote_configurations_url: "http://zapp.com/failing.json",
};

let reduxLoaderSpy;
const dispatch = jest.fn();

describe("getRemoteContextData", () => {
  beforeEach(() => {
    nock("http://zapp.com")
      .get("/styles.json")
      .reply(200, styles);

    nock("http://zapp.com")
      .get("/rivers.json")
      .reply(200, rivers);

    nock("http://zapp.com")
      .get("/plugin_configurations.json")
      .reply(200, pluginConfigurations);

    nock("http://zapp.com")
      .get("/failing.json")
      .reply(Math.floor(Math.random() * 200 + 400), 0);

    reduxLoaderSpy = jest
      .spyOn(ReduxModule, "loadAppContextData")
      .mockImplementation(() => ({}));
  });

  afterEach(() => {
    reduxLoaderSpy.mockRestore();
  });

  it("returns a map of context data with the result of the matched urls", async () => {
    await getRemoteContextData(dispatch, runtimeConfigurationUrls, plugins);

    return expect(reduxLoaderSpy).toHaveBeenCalledWith(
      dispatch,
      expect.objectContaining({
        styles,
        pluginConfigurations,
        plugins: updatedPlugins,
        rivers,
      })
    );
  });

  it("skips the context data if it cannot be retrieved", async () => {
    expect(reduxLoaderSpy).not.toHaveBeenCalled();

    return expect(
      getRemoteContextData(dispatch, failingRuntimeConfigurationUrls, plugins)
    ).rejects.toEqual(
      new Error(
        "cannot retrieve configuration data for remote_configurations_url"
      )
    );
  });
});
