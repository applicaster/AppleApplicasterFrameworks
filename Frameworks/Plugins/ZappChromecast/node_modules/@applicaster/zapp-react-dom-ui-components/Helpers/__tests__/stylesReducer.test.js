import {
  stylesReducer,
  getZappStylesColor,
  shiftHexAlpha
} from "../stylesReducer";

const zappStyles = {
  tv: {
    active: {
      color: "#fffc461b",
      palette_color: "color_6"
    },
    main_text: {
      color: "#ffefefef",
      palette_color: "color_4"
    },
    background: {
      color: "#ff2f2f2f",
      palette_color: "color_5"
    }
  }
};

const zappStylesWithMissingColors = {
  tv: {
    active: {
      color: "",
      palette_color: "color_6"
    },
    main_text: {
      palette_color: "color_4"
    },
    background: {
      color: "#ff2f2f2f",
      palette_color: "color_5"
    }
  }
};

const localStyles = {
  someClass: {
    width: "1734px",
    height: "300px",
    color: {
      key: "active",
      defaultColor: "orange"
    }
  },
  anotherClass: {
    width: "1734px",
    height: "300px",
    color: {
      key: "main_text",
      defaultColor: "black"
    },
    backgroundColorClass: {
      width: "1734px",
      height: "300px",
      backgroundColor: {
        key: "main_text",
        defaultColor: "black"
      }
    },
    borderColorClass: {
      width: "1734px",
      height: "300px",
      borderColor: {
        key: "main_text",
        defaultColor: "black"
      }
    },
    classWithMissingKey: {
      flex: 1,
      color: {
        key: "missing_key",
        defaultColor: "red"
      }
    }
  }
};

describe("stylesReducer", () => {
  it("Swap out key values from localStyles for those in cms styles", () => {
    expect(stylesReducer(localStyles, zappStyles)).toMatchSnapshot();
  });
});

describe("getZappStylesColor", () => {
  it("gets the color from ZappStyles", () => {
    expect(
      getZappStylesColor(localStyles.anotherClass.color, zappStyles.tv)
    ).toBe("#efefef");

    expect(getZappStylesColor(localStyles.someClass.color, zappStyles.tv)).toBe(
      "#fc461b"
    );
  });

  it("returns the default color if it is not defined in Zapp styles", () => {
    expect(
      getZappStylesColor(
        localStyles.anotherClass.color,
        zappStylesWithMissingColors
      )
    ).toBe(localStyles.anotherClass.color.defaultColor);

    expect(
      getZappStylesColor(
        localStyles.someClass.color,
        zappStylesWithMissingColors
      )
    ).toBe(localStyles.someClass.color.defaultColor);

    const styleWithMissingKey = {
      key: "missing_key",
      defaultColor: "red"
    };

    expect(getZappStylesColor(styleWithMissingKey, zappStyles.tv)).toBe(
      styleWithMissingKey.defaultColor
    );
  });
});

describe("shiftHexAlpha", () => {
  it("doesn't crash when the color is null", () => {
    expect(() => shiftHexAlpha(null)).not.toThrow();
  });

  it("Swap key for hex", () => {
    expect(shiftHexAlpha("#ffefefef")).toBe("#efefef");
  });
});
