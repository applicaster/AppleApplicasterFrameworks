// @flow
import * as React from "react";
import { View } from "react-native";
import * as R from "ramda";

type Props = {
  style: {
    paddingLeft: number,
    paddingRight: number,
    marginLeft: number,
    marginRight: number,
  },
  flatListParams: {
    paddingLeft: number,
    paddingRight: number,
    marginLeft: number,
    marginRight: number,
    contentInset: number,
    contentOffset: number,
  },
  parentFrame: {},
  children: ({}) => React.ComponentType<any>,
  isScreenWrappedInContainer: boolean,
};

export class ContainerWrapperViewComponent extends React.Component<Props> {
  retrieveStyle() {
    const { isScreenWrappedInContainer, style } = this.props;
    if (isScreenWrappedInContainer && R.not(R.isNil(style))) {
      const wrappedStyles = {
        ...style,
        paddingLeft: style.paddingLeft ? 0 : null,
        paddingRight: style.paddingRight ? 0 : null,
        marginLeft: style.marginLeft ? 0 : null,
        marginRight: style.marginRight ? 0 : null,
      };

      return R.reject(R.isNil, wrappedStyles);
    }
    return style;
  }

  retrieveFlatListParams() {
    const { isScreenWrappedInContainer, flatListParams } = this.props;
    if (isScreenWrappedInContainer && R.not(R.isNil(flatListParams))) {
      const wrappedFlatListParams = {
        ...flatListParams,
        paddingLeft: flatListParams.paddingLeft ? 0 : null,
        paddingRight: flatListParams.paddingRight ? 0 : null,
        marginLeft: flatListParams.marginLeft ? 0 : null,
        marginRight: flatListParams.marginRight ? 0 : null,
        contentInset: flatListParams.contentInset
          ? { top: 0, left: 0, bottom: 0, right: 0 }
          : null,
        contentOffset: flatListParams.contentOffset ? { x: 0, y: 0 } : null,
      };
      return R.reject(R.isNil, wrappedFlatListParams);
    }
    return flatListParams;
  }

  render() {
    const { children } = this.props;

    const fixedStyles = this.retrieveStyle();
    const fixedFlatListParams = this.retrieveFlatListParams();

    return (
      <View style={fixedStyles}>{children({ ...fixedFlatListParams })}</View>
    );
  }
}
