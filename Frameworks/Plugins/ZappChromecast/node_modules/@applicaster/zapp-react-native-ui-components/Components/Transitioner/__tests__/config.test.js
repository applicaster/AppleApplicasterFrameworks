import { Animated } from "react-native";

import { transitionConfig as androidConfig } from "../config.android";
import { transitionConfig as iosConfig } from "../config.ios";

const animatedValue = new Animated.Value(0.0);

describe("transitionConfig", () => {
  it("is a function", () => {
    expect(androidConfig).toBeFunction();
    expect(iosConfig).toBeFunction();
  });

  it("accepts an Animated.Value as a parameter", () => {
    expect(() => {
      androidConfig();
    }).toThrowErrorMatchingSnapshot();

    expect(() => {
      iosConfig();
    }).toThrowErrorMatchingSnapshot();

    expect(() => {
      androidConfig(animatedValue);
    }).toMatchSnapshot();

    expect(() => {
      iosConfig(animatedValue);
    }).toMatchSnapshot();
  });

  describe("returns a push object", () => {
    const { push } = androidConfig(animatedValue);

    it("is valid", () => {
      expect(push).toMatchSnapshot();
    });
    it("with duration", () => {
      expect(push.duration).toBeDefined();
    });

    it("with an easing function", () => {
      expect(push.easing).toBeFunction();
    });

    describe("with a from object", () => {
      const { from } = push;

      it("including interpolated animation in the style", () => {
        expect(from.style).toBeDefined();
        expect(from.style.opacity._interpolation).toBeFunction();
      });
    });

    describe("with a to object", () => {
      const { to } = push;

      it("including interpolated animation in the style", () => {
        expect(to.style).toBeDefined();
        expect(to.style.opacity._interpolation).toBeFunction();
      });
    });
  });

  describe("returns a back object", () => {
    const { back } = iosConfig(animatedValue);

    it("is valid", () => {
      expect(back).toMatchSnapshot();
    });

    it("has from and to objects with styles and interpolated animations", () => {
      const { from, to } = back;

      expect(from.style).toBeDefined();
      expect(from.style.transform[0].translateX._interpolation).toBeFunction();
      expect(to.style).toBeDefined();
      expect(to.style.transform[0].translateX._interpolation).toBeFunction();
    });
  });
});
