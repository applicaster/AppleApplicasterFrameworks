// @flow
import * as React from "react";

import { Focusable } from "@applicaster/zapp-react-native-ui-components/Components/Focusable";

type Props = {
  item: {
    id: string,
  },
  index: number,
  componentId: string,
  componentType: ?string,
  component: {},
  hasPreferredFocus: boolean,
  cellStyle: ?string,
  CellRenderer: React.componentType<{ item: Object, state: string }>,
  containerStyle: ?{},
  onFocus: ?(any) => void,
  onBlur: ?(any) => void,
  onPress: ?(any) => void,
  selected: boolean,
};

const cellRenderDiv = { width: "100%" };

export class ScreenSelectorCell extends React.Component<Props> {
  constructor(props) {
    super(props);
    this.onPress = this.onPress.bind(this);
    this.onFocus = this.onFocus.bind(this);
    this.onBlur = this.onBlur.bind(this);
  }

  onPress() {
    const { onPress, item, index } = this.props;
    onPress && onPress(item, index);
  }

  onFocus(e) {
    const { onFocus, item, index } = this.props;
    onFocus && onFocus(item, index, e);
  }

  onBlur(e) {
    const { onBlur, item, index } = this.props;
    onBlur && onBlur(item, index);
  }
  render() {
    const {
      item,
      index,
      componentId,
      hasPreferredFocus,
      CellRenderer,
      selected,
    } = this.props;

    const { id } = item;
    const cellState = selected ? "selected" : "default";
    return (
      <div style={cellRenderDiv}>
       
        <Focusable
          id={`${id}-${index}`}
          groupId={componentId}
          onFocus={this.onFocus}
          onBlur={this.onBlur}
          onPress={this.onPress}
          preferredFocus={hasPreferredFocus}
        >
          {focused => (
            <CellRenderer item={item} state={focused ? "focused" : cellState} />
          )}
        </Focusable>
      </div>
    );
  }
}
