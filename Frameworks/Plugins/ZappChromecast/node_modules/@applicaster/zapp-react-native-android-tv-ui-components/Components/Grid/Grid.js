// @flow
import * as React from "react";
import * as R from "ramda";
import { View, StyleSheet } from "react-native";

import { Cell } from "../Cell";

import { Header } from "../Header";
import { itemLimitForData } from "@applicaster/zapp-react-native-ui-components/Helpers/DataSourceHelper";
import { FocusableList } from "@applicaster/zapp-react-native-ui-components/Components/FocusableList";

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginLeft: 114,
    marginTop: 48,
    width: "100%",
  },
});

type Props = {
  component: { [any]: any, id: string | number },
  CellRenderer: React.componentType<{ item: Object, state: string }>,
  zappPipesData: {
    loading: ?boolean,
    data: {
      title: string,
      entry: [{}],
    },
  },
  onLoadFinished: (void) => void,
  groupId: String,
  isScreenWrappedInContainer: boolean,
  componentIndex: number,
  focused: boolean,
  scrollRiverByOffset: (number, boolean, string | number) => void,
  parentFocus: {
    nextFocusDown: React.Ref,
    nextFocusRight: React.Ref,
    nextFocusLeft: React.Ref,
    nextFocusUp: React.Ref,
  },
  navigator: {
    push: (any) => void,
  },
};

export function GridComponent(props: Props) {
  const {
    focused,
    component,
    CellRenderer,
    zappPipesData,
    onLoadFinished,
    isScreenWrappedInContainer,
    scrollRiverByOffset,
    parentFocus,
  } = props;

  const listRef = React.useRef(null);
  const [rowHeight, setRowHeight] = React.useState(0);
  const [previousRowIndex, setPreviousRowIndex] = React.useState(0);

  onLoadFinished();

  const {
    styles: { header },
  } = component;

  const title = R.path(["data", "title"], zappPipesData);
  const entry = R.path(["data", "entry"], zappPipesData);

  const dataSource = itemLimitForData(entry, component);

  const headerData = R.merge(header, { title });

  const numberOfColumns = isScreenWrappedInContainer ? 3 : 4;

  const onListElementFocus = (element, { item, index }) => {
    const currentRowIndex = Math.floor(index / numberOfColumns);

    /**
     * Don't scroll on initial focus.
     * It fixes the issue when list jumps, without transition
     */
    if (currentRowIndex === 0 && previousRowIndex === 0) {
      return null;
    }

    setPreviousRowIndex(currentRowIndex);

    scrollRiverByOffset(
      Math.round(currentRowIndex * rowHeight),
      true,
      component.id
    );
  };

  const onListElementPress = (element, { item }) => {
    const { navigator } = props;
    const screen_type =
      R.prop("screen_type", item) || R.path(["data", "target"], component);

    const newRoute = R.merge(item, { screen_type });
    navigator.push(newRoute);
  };

  const onCellLayout = ({
    nativeEvent: {
      layout: { height },
    },
  }) => {
    if (height !== rowHeight) {
      setRowHeight(height);
    }
  };

  // eslint-disable-next-line react/prop-types
  const renderItem = ({ item, index, focused, parentFocus }) => {
    return (
      <Cell
        onLayout={onCellLayout}
        focused={focused}
        CellRenderer={CellRenderer}
        item={item}
      />
    );
  };
  return (
    <View style={styles.container}>
      <Header {...headerData} />
      <FocusableList
        rowHeight={rowHeight}
        onListElementFocus={onListElementFocus}
        onListElementPress={onListElementPress}
        focused={focused}
        ref={listRef}
        numColumns={numberOfColumns}
        data={dataSource}
        renderItem={renderItem}
        keyExtractor={R.compose(String, R.prop("id"))}
        {...{ ...parentFocus }}
      />
    </View>
  );
}
