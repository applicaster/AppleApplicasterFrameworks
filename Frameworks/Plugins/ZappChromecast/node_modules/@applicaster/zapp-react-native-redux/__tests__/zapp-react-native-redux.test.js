jest.mock("../ZappPipes", () => {
  const defaultExport = jest.fn((state = {}) => state);
  defaultExport.setZappPipesAdapter = jest.fn();

  return defaultExport;
});

import * as ReactRedux from "react-redux";
import * as Redux from "redux";
import * as R from "ramda";

const {
  createZappReduxStore,
  loadAppContextData,
  connectToStore,
  getEnv,
} = require("../index");

const rivers = [
  {
    id: "A",
    home: false,
    name: "some screen",
  },
  {
    id: "B",
    home: true,
    name: "home screen",
  },
  {
    id: "C",
    home: false,
    name: "other screen",
  },
];

describe("createZappReduxStore", () => {
  const initialStoreState = {
    styles: {},
    rivers: {},
    plugins: {},
    components: {},
    cellStyles: {},
    appSettings: {},
    zappPipes: {},
  };

  it("creates a store", () => {
    const store = createZappReduxStore({});
    expect(store).toEqual(
      expect.objectContaining({
        getState: expect.any(Function),
        dispatch: expect.any(Function),
      })
    );

    const initialState = store.getState();
    expect(initialState).toEqual(expect.objectContaining(initialStoreState));
  });

  it("adds custom reducers", () => {
    const foo = (state = {}, action) => state;
    const store = createZappReduxStore({ additionalReducers: { foo } });
    const initialState = store.getState();
    expect(initialState).toEqual(
      expect.objectContaining({
        ...initialStoreState,
        foo: {},
      })
    );
  });

  it("supports custom initial state", () => {
    const customInitialState = {
      styles: { foo: "bar" },
      zappPipes: { bar: "baz" },
    };
    const store = createZappReduxStore({ initialState: customInitialState });
    const initialState = store.getState();
    expect(initialState).toEqual(
      expect.objectContaining({
        ...initialStoreState,
        ...customInitialState,
      })
    );
  });

  it("supports custom middlewares", () => {
    const fooMiddleware = jest.fn(() => () => () => ({}));
    createZappReduxStore({ additionalMiddlewares: [fooMiddleware] });

    expect(fooMiddleware).toHaveBeenCalledWith(
      expect.objectContaining({
        dispatch: expect.any(Function),
        getState: expect.any(Function),
      })
    );
  });
});

describe("loadAppContextData", () => {
  it("dispatches the loading action for each context", () => {
    const dispatch = jest.fn();
    const appContext = {
      styles: require("../AppContext/__tests__/iosStyles.json"),
      rivers,
    };
    loadAppContextData(dispatch, appContext);
    expect(dispatch).toHaveBeenCalledTimes(2);
    expect(dispatch).toHaveBeenLastCalledWith({
      meta: undefined,
      payload: R.zipObj(R.map(R.prop("id"), rivers), rivers),
      type: "LOAD_RIVERS",
    });
  });
});

describe("connectToStore", () => {
  let connectSpy;
  let bindActionCreatorsSpy;
  const dispatch = jest.fn();

  beforeAll(() => {
    connectSpy = jest
      .spyOn(ReactRedux, "connect")
      .mockImplementation((mapStateToProps, mapDispatchToProps) => () => {
        mapDispatchToProps(dispatch);
      });

    bindActionCreatorsSpy = jest.spyOn(Redux, "bindActionCreators");
  });

  afterAll(() => {
    connectSpy.mockReset();
    bindActionCreatorsSpy.mockReset();
  });

  it("invokes the react-redux connector with the option passed", () => {
    const mapStateToProps = jest.fn(() => ({}));
    const actions = {
      foo() {
        return {};
      },
    };

    const connector = connectToStore(mapStateToProps, actions);
    expect(connector).toBeFunction();

    expect(connectSpy).toHaveBeenCalledWith(
      mapStateToProps,
      expect.any(Function)
    );
    connector(jest.fn());
    expect(bindActionCreatorsSpy).toHaveBeenCalledWith(actions, dispatch);
  });
});

describe("getEnv", () => {
  it("returns test for test env", () => {
    expect(getEnv()).toBe("test");
  });

  describe("production & dev test", () => {
    beforeAll(() => {
      process.env.NODE_ENV = "production";
    });

    afterAll(() => {
      process.env.NODE_ENV = "test";
    });

    it("returns dev if __DEV__ is set", () => {
      global.__DEV__ = true;
      expect(getEnv()).toBe("development");
    });

    it("returns production otherwise", () => {
      global.__DEV__ = false;
      expect(getEnv()).toBe("production");
    });
  });
});
