import * as React from "react";
import { View } from "react-native";
import { shallow } from "enzyme";
import { shallowToJson } from "enzyme-to-json";

import { NavWrapperComponent as NavWrapper } from "../NavWrapper";

const DefaultPlugin = jest.fn(props => <View {...props} />);
const OptionalPlugin = jest.fn(props => <View {...props} />);

const mockPlugin = (name, Component, defaultFlag, type = "menu") => ({
  module: Component,
  name,
  type,
  default: defaultFlag,
});

const defaultPlugin = mockPlugin("default_nav", DefaultPlugin, true);
const optionalPlugin = mockPlugin("optional_nav", OptionalPlugin);

const getActiveRiver = navigations => ({
  id: "A1234",
  name: "foo",
  navigations,
});

const plugins = [defaultPlugin, optionalPlugin];

describe("NavWrapper", () => {
  describe("when navigation data exists and matches plugin", () => {
    const activeRiver = getActiveRiver([
      {
        category: "menu",
        navigation_type: "default_nav",
        nav_items: [{ type: "label" }],
        assets: { appLogo: "appLogo.png" },
        rules: {},
      },
    ]);

    it("renders correctly", () => {
      const wrapper = shallow(
        <NavWrapper plugins={plugins} navigator={{ activeRiver }} />
      );
      expect(shallowToJson(wrapper)).toMatchSnapshot();

      const childWrapper = wrapper.first().shallow();
      expect(shallowToJson(childWrapper)).toMatchSnapshot();
    });
  });

  describe("when navigation data doesn't exist", () => {
    const activeRiver = getActiveRiver([]);

    it("renders correctly", () => {
      const wrapper = shallow(
        <NavWrapper plugins={plugins} navigator={{ activeRiver }} />
      );
      expect(shallowToJson(wrapper)).toMatchSnapshot();
    });
  });

  describe("when navigation data exists and uses an existing plugin", () => {
    const activeRiver = getActiveRiver([
      {
        category: "menu",
        navigation_type: "optional_nav",
        nav_items: [{ type: "label" }],
        assets: { appLogo: "appLogo.png" },
        rules: {},
      },
    ]);

    it("renders correctly", () => {
      const wrapper = shallow(
        <NavWrapper plugins={plugins} navigator={{ activeRiver }} />
      );
      expect(shallowToJson(wrapper)).toMatchSnapshot();

      const childWrapper = wrapper.first().shallow();
      expect(shallowToJson(childWrapper)).toMatchSnapshot();
    });
  });

  describe("when navigation data exists and plugin isn't found", () => {
    const activeRiver = getActiveRiver([
      {
        category: "menu",
        navigation_type: "unknown_nav",
        nav_items: [{ type: "label" }],
        assets: { appLogo: "appLogo.png" },
        rules: {},
      },
    ]);

    it("renders correctly", () => {
      const wrapper = shallow(
        <NavWrapper plugins={plugins} navigator={{ activeRiver }} />
      );
      expect(shallowToJson(wrapper)).toMatchSnapshot();

      const childWrapper = wrapper.first().shallow();
      expect(shallowToJson(childWrapper)).toMatchSnapshot();
    });
  });
});
