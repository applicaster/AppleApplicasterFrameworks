// @flow
import React from "react";

type Props = {
  children: React.Node,
  onPress?: (React.Ref<any>) => void,
  onFocus?: (React.Ref<any>, {}) => void,
  onBlur?: (React.Ref<any>, {}) => void,
};

/**
  with all the pain & suffering in our hearts, we have to leave this as
  a class component, in order to be able to invoke the component instance
  methods on them.
 */

export class Touchable extends React.Component<Props> {
  onPress(focusableRef: React.Ref<any>): void {
    this?.props?.onPress?.(focusableRef);
  }

  onFocus(focusableRef: React.Ref<React.Node>, options: {}): void {
    this?.props?.onFocus?.(focusableRef, options);
  }

  onBlur(focusableRef: React.Ref<React.Node>, options: {}): void {
    this?.props?.onBlur?.(focusableRef, options);
  }

  render() {
    const { children } = this.props;
    return children;
  }
}
