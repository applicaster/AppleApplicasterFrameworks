// @flow
import * as React from "react";
import { Platform } from "react-native";
import * as R from "ramda";
import url from "url";
import { getLegacyInitialProps } from "@applicaster/zapp-react-native-bridge/QuickBrick";
import {
  filterObj,
  mapKeys,
} from "@applicaster/zapp-react-native-utils/objectUtils";

type Props = {
  screenData: any,
  screenId: string,
};

/**
 * extracts extra_props from the url scheme
 * @param {Object} ScreenData data passed in the navigation. Should match a link entry
 * @return {Object} extra_props to be passed to the plugin component
 */
function getExtraPropsFromUrlScheme(screenData) {
  const scheme = R.path(["link", "href"], screenData);

  if (!scheme) {
    return {};
  }

  const { query } = url.parse(scheme, true);

  // will extract props from the url scheme, and skip the rest
  // app://foo?bar=baz&reactProps[id]=1234 => { id: 1234 }
  return R.compose(
    mapKeys(
      R.compose(
        R.replace("reactProps[", ""),
        R.replace("]", "")
      )
    ),
    filterObj(R.test(/reactProps\[.*\]/))
  )(query);
}

/**
 * decorates Legacy Plugins by passing the expected initial Props
 * @param {Object} plugin to decorate
 * @param {String} plugin.name name of the plugin
 * @param {String} plugin.type type of the plugin
 * @param {Function} plugin.module the plugin's module
 * @param {Function} isLegacy predicate to know whether a plugin is legacy or not
 * @return {Object} decorated plugin, if needed - returns original plugin otherwise
 */
export function decorateLegacyPlugin(plugin, isLegacy = R.T) {
  if (!isLegacy(plugin)) {
    return plugin;
  }

  const { module: PluginComponent } = plugin;
  const initialProps = getLegacyInitialProps();

  function WrappedLegacyPlugin({ screenData, screenId, ...otherProps }: Props) {
    const extra_props = R.when(
      () => R.propEq("OS", "android", Platform),
      JSON.stringify
    )(getExtraPropsFromUrlScheme(screenData));

    return (
      <PluginComponent
        id={screenId}
        data={screenData}
        {...otherProps}
        {...R.merge(initialProps, { extra_props })}
      />
    );
  }

  return { ...plugin, module: WrappedLegacyPlugin };
}
