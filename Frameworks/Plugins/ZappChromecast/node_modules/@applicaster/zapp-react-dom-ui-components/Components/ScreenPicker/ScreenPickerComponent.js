// @flow
import * as React from "react";
import * as R from "ramda";
import { View } from "react-native";
import { ScreenSelector } from "./ScreenSelector";
import { ScreenContainer } from "./ScreenContainer";
import { focusableItemId } from "@applicaster/zapp-react-native-ui-components/Helpers/ComponentsHelper";
import { screenPickerStyle, screenContainerFocusableGroup } from "./styles";
import { FocusableGroup } from "@applicaster/zapp-react-native-ui-components/Components/FocusableGroup";

type Props = {
  onLoadFinished: () => void,
  zappPipesData: any,
  component: {
    id: string,
  },
  navigator: {},
  rivers: { [string]: {} },
  screenId: string,
  CellRenderer: React.componentType<{ item: Object, state: string }>,
};

type State = {
  selectedItem: {},
  initialItemId: string,
};

export class ScreenPickerComponent extends React.PureComponent<Props, State> {
  constructor(props) {
    super(props);
    this.state = {
      selectedItem: null,
      initialItemId: null,
    };
    this.selectItem = this.selectItem.bind(this);
  }

  getTargetRiverId({ screen_type }) {
    const { component } = this.props;
    const riverTargetFromComponent = R.path(["data", "target"], component);

    return screen_type || riverTargetFromComponent;
  }

  selectItem(item, index) {
    const targetRiverId = this.getTargetRiverId(item);
    const initialItemId = focusableItemId(item, index);
    this.setState({ selectedItem: item, targetRiverId, initialItemId });
  }

  componentDidMount() {
    this.setupInitialValue();
  }

  componentDidUpdate() {
    this.setupInitialValue();
  }

  setupInitialValue() {
    const entries = R.path(["zappPipesData", "data", "entry"], this.props);

    if (!this.state.selectedItem && entries) {
      const defaultIndex =
        (R.path(["component", "styles", "defaultTab"], this.props) || 1) - 1;
      const newDefaultIndex = entries.length > defaultIndex ? defaultIndex : 0;
      const defaultItem = entries[newDefaultIndex];
      this.selectItem(defaultItem, newDefaultIndex);
    }
  }

  renderMainComponent() {
    this.props.onLoadFinished();
    const entries = R.path(["zappPipesData", "data", "entry"], this.props);
    const {
      CellRenderer,
      component: { id },
    } = this.props;
    return (
      <FocusableGroup id={id} preferredFocus={true}>
        <View style={screenPickerStyle}>
          <FocusableGroup
            id={id + ".ScreenSelector"}
            groupId={id}
            preferredFocus={true}
            shouldUsePreferredFocus
          >
        
            <ScreenSelector
              {...this.state}
              style={screenContainerFocusableGroup}
              selectItem={this.selectItem}
              entry={entries}
              componentId={id + ".ScreenSelector"}
              CellRenderer={CellRenderer}
            />
          </FocusableGroup>
          <FocusableGroup
            id={id + ".ScreenContainer"}
            preferredFocus={false}
            groupId={id}
          >
            <ScreenContainer
              componentId={id + ".ScreenContainer"}
              {...this.state}
            />
          </FocusableGroup>
        </View>
      </FocusableGroup>
    );
  }

  render() {
    const { zappPipesData } = this.props;
    if (!zappPipesData) {
      return null;
    }
    const { loading, data } = zappPipesData;
    return !loading && !!data ? this.renderMainComponent(data) : null;
  }
}
