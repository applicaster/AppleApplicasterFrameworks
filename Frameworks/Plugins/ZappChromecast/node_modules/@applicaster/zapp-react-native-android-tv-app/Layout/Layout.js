// @flow
import * as React from "react";
import { View, StyleSheet } from "react-native";

import { BackgroundImage } from "@applicaster/zapp-react-native-android-tv-ui-components/Components/BackgroundImage";

import {
  resolveNavigationPlugin,
  getNavigationProps,
} from "@applicaster/zapp-react-native-utils/navigationUtils";

import { Focusable } from "@applicaster/zapp-react-native-ui-components/Components/Focusable";
import { FocusTrap } from "@applicaster/zapp-react-native-ui-components/Components/Focusable/FocusTrap";
import { useFocusManager } from "@applicaster/zapp-react-native-utils/focusManager";

import { InteractionManager } from "../InteractionManager";
import { ContentWrapper } from "./ContentWrapper";
type Props = {
  children: React.ComponentType<any>,
  plugins: [{ module: any, type: string, name: string }],
  rivers: { [string]: any },
  appState: { appReady: boolean },
  navigator: {
    activeRiver: { id: string, navigations: [{}], name: string, home: boolean },
    canGoBack: () => Boolean,
    isNavBarVisible: boolean,
    screenTitle: ?string,
  },
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 0,
    margin: 0,
    width: 1920,
    height: 1080,
  },
  menu: {
    height: 230,
    width: 1920,
  },
  screen: {
    flex: 1,
    width: 1920,
    height: 850,
    overflow: "hidden",
  },
});

export function LayoutComponent(props: Props) {
  const { appState, children, navigator, plugins } = props;
  const { activeRiver, isNavBarVisible } = navigator;
  const { navigations } = activeRiver;
  const { appReady = false } = appState;

  const navbarRef = React.useRef(null);
  const contentRef = React.useRef(null);
  const focusManager = useFocusManager();

  React.useEffect(() => {
    if (focusManager.focused === null) {
      focusManager.setFocus(contentRef);
    }
  }, [focusManager.focused]);

  const Menu = React.useMemo(
    () =>
      resolveNavigationPlugin({
        category: "menu",
        navigations,
        plugins,
      }),
    []
  );

  const isShowingNavItems = !navigator.canGoBack();

  const MenuComponent = React.useMemo(() => Menu.module, []);

  const menuProps = React.useMemo(
    () => getNavigationProps({ navigator, category: "menu" }),
    []
  );

  return (
    <InteractionManager>
      <BackgroundImage>
        {appReady && (
          <View style={styles.container}>
            <FocusTrap />
            {isNavBarVisible && (
              <View style={styles.menu}>
                <Focusable
                  id={"navbar"}
                  ref={navbarRef}
                  nextFocusDown={contentRef}
                >
                  {(focused, parentFocus) => (
                    <MenuComponent
                      {...{ ...menuProps, focused, parentFocus }}
                      focused={focused}
                      parentFocus={parentFocus}
                    />
                  )}
                </Focusable>
              </View>
            )}
            <View style={styles.screen}>
              <Focusable
                key={activeRiver.id}
                hasInitialFocus
                id={"content"}
                ref={contentRef}
                nextFocusUp={isShowingNavItems ? navbarRef : null}
              >
                {(focused, parentFocus) => (
                  <ContentWrapper {...{ focused, children, parentFocus }} />
                )}
              </Focusable>
            </View>
          </View>
        )}
      </BackgroundImage>
    </InteractionManager>
  );
}
