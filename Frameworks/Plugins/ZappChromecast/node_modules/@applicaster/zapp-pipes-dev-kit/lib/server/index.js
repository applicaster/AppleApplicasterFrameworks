"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.createZappPipesServer = createZappPipesServer;

var _chalk = require("chalk");

var _chalk2 = _interopRequireDefault(_chalk);

var _hapi = require("hapi");

var _config = require("../config");

var _config2 = _interopRequireDefault(_config);

var _router = require("../router");

var _serverUtils = require("./serverUtils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function createZappPipesServer(_ref) {
  var startServer = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return server.start();

            case 3:
              console.log(_chalk2.default.cyan("\uD83D\uDD25  server running on " + host + ":" + port));
              _context.next = 9;
              break;

            case 6:
              _context.prev = 6;
              _context.t0 = _context["catch"](0);

              console.log(_chalk2.default.red("ERROR:: %s", _context.t0.message));

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 6]]);
    }));

    return function startServer() {
      return _ref2.apply(this, arguments);
    };
  }();

  var options = _ref.options,
      providers = _ref.providers,
      nativeBridge = _ref.nativeBridge;

  var _config$options = _extends({}, _config2.default, options),
      port = _config$options.port,
      host = _config$options.host;

  var server = new _hapi.Server({ port: port, host: host });

  if (!Array.isArray(providers) || !providers.every(_serverUtils.isProviderValid)) {
    throw new Error("invalid providers ! can't start server");
  }

  var providerRoutes = (0, _router.createRouterForProviders)(providers, nativeBridge);

  server.route(providerRoutes);

  return Object.assign(server, { startServer: startServer });
}