const { prepareWorkspace } = require("../index");

const appVersionId = "e7a17c6f-4113-41ac-9450-6281d22153a1";
const options = {
  appVersionId,
  openSdk: true,
  config: "some_file",
};

jest.mock("../prerequisitesChecker.js", () => ({
  prerequisitesChecker: jest.fn(() => true),
}));

const mock_config = { appVersionId, buildParams: {} };

jest.mock("../configurator.js", () => ({
  configurator: jest.fn(() => mock_config),
}));

jest.mock("../workspaceCreator.js", () => ({
  workspaceCreator: jest.fn(),
}));

jest.mock("../configFilesRetriever.js", () => ({
  configFilesRetriever: jest.fn(),
}));

jest.mock("../runtimeConfigurationUrlsCreator.js", () => ({
  runtimeConfigurationUrlsCreator: jest.fn(),
}));

jest.mock("../appBootstrapper.js", () => ({ appBootstrapper: jest.fn() }));

jest.mock("../../../logger", () => ({
  welcome: jest.fn(),
  log: jest.fn(),
  error: jest.fn(),
  warn: jest.fn(),
  startStep: jest.fn(),
  endStep: jest.fn(),
  success: jest.fn(),
}));

const { prerequisitesChecker } = require("../prerequisitesChecker");
const { configurator } = require("../configurator");
const { workspaceCreator } = require("../workspaceCreator");
const { configFilesRetriever } = require("../configFilesRetriever");
const {
  runtimeConfigurationUrlsCreator,
} = require("../runtimeConfigurationUrlsCreator");
const { appBootstrapper } = require("../appBootstrapper");
const logger = require("../../../logger");

describe("prepareWorkspace", () => {
  it("runs the task", async () => {
    await prepareWorkspace(appVersionId, options);

    expect(logger.welcome.mock.calls).toMatchSnapshot();
    expect(logger.log.mock.calls).toMatchSnapshot();
    expect(logger.error.mock.calls).toMatchSnapshot();
    expect(logger.warn.mock.calls).toMatchSnapshot();
    expect(logger.startStep.mock.calls).toMatchSnapshot();
    expect(logger.endStep.mock.calls).toMatchSnapshot();
    expect(logger.success.mock.calls).toMatchSnapshot();
    expect(prerequisitesChecker).toHaveBeenCalledWith({
      cliArgs: [appVersionId],
      cliOptions: options,
    });
    expect(configurator).toHaveBeenCalledWith({
      cliArgs: [appVersionId],
      cliOptions: options,
    });
    expect(workspaceCreator).toHaveBeenCalledWith(mock_config);
    expect(configFilesRetriever).toHaveBeenCalledWith(mock_config);
    expect(runtimeConfigurationUrlsCreator).toHaveBeenCalledWith(mock_config);
    expect(appBootstrapper).toHaveBeenCalledWith(mock_config);
  });
});
