import * as R from "ramda";

import { subscriber } from "../../functionUtils";

function invokeMethodOnComponent(component, method, ...args) {
  if (component && component[method]) {
    return component[method].apply(component, args);
  }
}

export const playerManager = (function() {
  let player = null;

  function registerPlayer(playerComponent) {
    player = subscriber(playerComponent);
    return player;
  }

  function unregisterPlayer() {
    player = null;
  }

  function togglePlayPause() {
    invokeMethodOnComponent(player, "togglePlayPause");
  }

  function play() {
    invokeMethodOnComponent(player, "play");
  }

  function pause() {
    invokeMethodOnComponent(player, "pause");
  }

  function setSource(item) {
    const src = R.path(["content", "src"], item);
    invokeMethodOnComponent(player, "changeSrc", [{ src }]);
  }

  function rewind(rate) {
    invokeMethodOnComponent(player, "rewind", rate);
  }

  function forward(rate) {
    invokeMethodOnComponent(player, "forward", rate);
  }

  function on(event, handler) {
    if (player) {
      return player.on(event, handler);
    }
  }

  function invokeHandler(event, ...args) {
    if (player) {
      return player.invokeHandler(event, ...args);
    }
  }

  function getDuration() {
    return invokeMethodOnComponent(player, "getDuration");
  }

  function getCurrentTime() {
    return invokeMethodOnComponent(player, "getCurrentTime");
  }

  function getState() {
    return invokeMethodOnComponent(player, "getState");
  }

  return {
    registerPlayer,
    unregisterPlayer,
    setSource,
    togglePlayPause,
    play,
    pause,
    rewind,
    forward,
    getDuration,
    getCurrentTime,
    getState,
    on,
    invokeHandler,
  };
})();
