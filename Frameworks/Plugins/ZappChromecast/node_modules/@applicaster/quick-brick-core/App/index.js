// @flow

import * as React from "react";
import * as R from "ramda";

import type {
  AppComponentProps,
  ZappApp,
} from "@applicaster/zapp-react-native-flow-types";

import { ErrorBoundary } from "./ErrorBoundary";
import { RouteManager } from "./RouteManager";
import { withNavigationProvider } from "./NavigationProvider";
import { withActionsProvider } from "./ActionsProvider";
import { storeConnector } from "./StoreConnector";
import { appLifeCycleManager } from "./appLifeCycleManager";
import { URLSchemeListener } from "./DeepLinking/URLSchemeListener";
import { withAppManager } from "./AppStateDecorator";
import { ThemeManager } from "./ThemeManager";

/**
 * @typedef {Object} AppOptions
 * @param {Function} InteractionManager decorator to use for managing complex user interactions in the app
 * @param {ReactComponent} Layout Component to use as main layout for the app

 * @param {Object} QuickBrickManager QB manager module
 * @param {Function} QuickBrickManager.sendQuickBrickEvent function invoked to pass events to the native side
 * @param {[Function]} ContextProviders array of context providers to pass to the app
 */

/**
 * Creates a QuickBrick app with the provided options
 * This function is provided as a utility to increase reusability of code across platforms
 * @param {AppOptions} options
 * @returns {ReactComponent}
 */

export function createQuickBrickApp(options): ZappApp {
  const {
    InteractionManager = R.identity,
    Layout,
    QuickBrickManager,
    OfflineHandler = R.prop("children"),
    ContextProviders = [R.identity],
    appLoader = () => Promise.resolve(),
  } = options;

  const App: ZappApp = ({
    styles,
    components: { AppContainer },
    plugins,
  }: AppComponentProps) => (
    <ThemeManager plugins={plugins}>
      <AppContainer styles={styles}>
        <ErrorBoundary>
          <OfflineHandler>
            <URLSchemeListener>
              <Layout>
                <RouteManager />
              </Layout>
            </URLSchemeListener>
          </OfflineHandler>
        </ErrorBoundary>
      </AppContainer>
    </ThemeManager>
  );

  // Beware of the order of decorators !
  // It's awesome but it can break everything

  return R.compose(
    storeConnector, // storeConnector should be first, as it disregards other props
    ...ContextProviders, // contexts consumers are only working below this point
    withAppManager, // provides handlers when the app is going in the background, or comes out of it
    withNavigationProvider,
    InteractionManager,
    withActionsProvider,
    appLifeCycleManager(appLoader, QuickBrickManager)
  )(App);
}
