// @flow
import * as R from "ramda";
import * as React from "react";
import { Platform } from "react-native";
import createRef from "create-react-ref/lib/createRef";

import { addLifeCycleMethods, wrapInClass, isClassComponent } from "./helpers";

/**
 * Invokes the proper function to attach lifecycle methods to any React component (stateless or class)
 * @export
 * @param {Object} lifecycleMethods map where the key is the lifecycle hook, and the value is the method
 * @returns {Function}
 */
export function attachLifeCycleMethods(lifecycleMethods) {
  return R.compose(
    addLifeCycleMethods(lifecycleMethods),
    R.unless(isClassComponent, wrapInClass)
  );
}

/**
 * creates a React Ref. if the version of React doesn't
 * have this API, will use a polyfill instead
 */
export function createReactRef() {
  return React.createRef && typeof React.createRef === "function"
    ? React.createRef()
    : createRef();
}

/**
 * Clone the children and merge each of the cloned elements with otherProps.
 * @param {React.Children} children to clone
 * @param {React.Props} otherProps  to merge into each of the cloned children
 * @returns {React.Children}        cloned children with merged props
 */
export function mergeChildrenProps(children, otherProps) {
  return React.Children.map(children, child =>
    React.cloneElement(child, { ...child.props, ...otherProps })
  );
}

export function isTV(): boolean {
  return Platform.isTV;
}

export function getPlatform(): string {
  switch (Platform.OS) {
    case "ios":
      return isTV() ? "tvos" : "ios";

    case "android":
      return isTV() ? "android_tv" : "android";

    default:
      return Platform.OS;
  }
}

function getEnvironment(): string {
  switch (Platform.OS) {
    case "ios":
    case "android":
      return "native";

    case "web":
    case "samsung_tv":
    case "lg_tv":
      return "web";

    default:
      return "";
  }
}

export function platformSelect(properties: { [string]: any }): any {
  const platform = getPlatform();
  const environment = getEnvironment();

  return (
    properties[platform] ||
    properties[environment] ||
    properties.default ||
    undefined
  );
}
