// @flow
import * as React from "react";
import * as R from "ramda";

import { FocusableGroup } from "@applicaster/zapp-react-native-ui-components/Components/FocusableGroup";
import { ScreenSelector } from "./ScreenSelector";
import { ScreenContainer } from "./ScreenContainer";
import { focusableItemId } from "@applicaster/zapp-react-native-ui-components/Helpers/ComponentsHelper";
import { setPreferredFocus } from "@applicaster/zapp-react-native-utils/appUtils/focusManager";

import {
  screenPickerStyle,
  screenSelectorStyle,
  screenContainerFocusableGroup,
} from "./styles";

type Props = {
  onLoadFinished: () => void,
  zappPipesData: any,
  CellRenderer: React.componentType<{ item: Object, state: string }>,
  component: {
    id: string,
  },
  navigator: {},
  rivers: { [string]: {} },
  screenId: string,
  styles: {},
  remoteConfigurations: { styles: {} },
  focusableRiverData: {
    groupId: string,
    itemId: string,
    contentOffsetY: number,
    screenFocusableGroupId: string,
    componentId: string,
    itemIndex: number,
  },
  mainFocusItemUpdater: () => void,
};

type State = {
  selectedItem: {},
  initialItemId: string,
};

export class ScreenPickerComponent extends React.PureComponent<Props, State> {
  constructor(props) {
    super(props);

    this.state = {
      selectedItem: null,
      initialItemId: null,
    };
    this.selectItem = this.selectItem.bind(this);
  }

  savedDataForComponent() {
    const {
      component: { id: componentId },
      focusableRiverData,
    } = this.props;
    if (focusableRiverData && focusableRiverData.componentId === componentId) {
      const {
        groupId,
        itemId,
        contentOffsetY,
        screenFocusableGroupId,
        componentId,
        itemIndex,
      } = focusableRiverData;
      return {
        groupId,
        itemId,
        contentOffsetY,
        screenFocusableGroupId,
        componentId,
        itemIndex,
      };
    }
    return null;
  }

  getTargetRiverId({ screen_type }) {
    const { component } = this.props;
    const riverTargetFromComponent = R.path(["data", "target"], component);

    return screen_type || riverTargetFromComponent;
  }

  selectItem(item, index) {
    const {
      component: { id },
      mainFocusItemUpdater,
    } = this.props;

    const targetRiverId = this.getTargetRiverId(item);
    const initialItemId = focusableItemId(item, index);
    mainFocusItemUpdater({
      componentId: id,
      itemIndex: index,
    });
    setTimeout(() => {
      setPreferredFocus(`ScreenSelector.${id}`, this.state.initialItemId);
    }, 100);
    this.setState({ selectedItem: item, targetRiverId, initialItemId });
  }

  componentDidMount() {
    this.setupInitialValue();
  }

  componentDidUpdate() {
    this.setupInitialValue();
  }

  setupInitialValue() {
    const entries = R.path(["zappPipesData", "data", "entry"], this.props);

    if (!this.state.selectedItem && entries) {
      const focusableRiverData = this.savedDataForComponent();

      let itemIndex =
        (focusableRiverData && focusableRiverData.itemIndex) || null;
      if (itemIndex) {
        const selectedItem = entries[itemIndex];
        this.selectItem(selectedItem, itemIndex);
      } else {
        const defaultIndex =
          (R.path(["component", "styles", "defaultTab"], this.props) || 1) - 1;
        const newDefaultIndex =
          entries.length > defaultIndex ? defaultIndex : 0;
        const defaultItem = entries[newDefaultIndex];

        this.selectItem(defaultItem, newDefaultIndex);
      }
    }
  }

  renderMainComponent() {
    this.props.onLoadFinished();
    const entries = R.path(["zappPipesData", "data", "entry"], this.props);
    const {
      CellRenderer,
      component: { id },
      styles,
    } = this.props;
    return (
      <FocusableGroup
        style={screenPickerStyle}
        id={`ScreenPickerComponent.${id}`}
        initialItemId={this.state.initialItemId}
        resetFocusToInitialValue={true}
        dependantGroupIds={[`ScreenSelector.${id}`]}
      >
        <ScreenSelector
          screenPickerHeight={screenPickerStyle.height}
          {...this.state}
          CellRenderer={CellRenderer}
          style={screenSelectorStyle}
          selectItem={this.selectItem}
          entry={entries}
          componentId={id}
          styles={styles}
        />
        <FocusableGroup
          style={screenContainerFocusableGroup}
          id={`ScreenContainer.${id}`}
          isManuallyBlockingFocusValue={0.25}
        >
          <ScreenContainer
            componentId={id}
            screenPickerHeight={screenPickerStyle.height}
            {...this.state}
          />
        </FocusableGroup>
      </FocusableGroup>
    );
  }

  render() {
    const { zappPipesData } = this.props;
    if (!zappPipesData) {
      return null;
    }
    const { loading, data } = zappPipesData;
    return !loading && !!data ? this.renderMainComponent(data) : null;
  }
}
