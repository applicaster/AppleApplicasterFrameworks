// @flow
import * as React from "react";
import * as R from "ramda";
import { View, StyleSheet } from "react-native";
import { ComponentsMap } from "./ComponentsMap";
import { FeedLoader } from "@applicaster/zapp-react-native-ui-components/Components/FeedLoader";
import { ScreenResolver } from "@applicaster/zapp-react-native-ui-components/Components/ScreenResolver";
import type { ZappScreenProps } from "@applicaster/zapp-react-native-flow-types";

type Props = ZappScreenProps & {
  river: any,
  navigator: {
    setScreenSummary: (string) => void,
    setScreenSummary: (string) => void,
  },
  screenData: {
    title: string,
    summary: string,
  },
  isInsideContainer: boolean,
  feedUrl?: string,
  focused: boolean,
  parentFocus: {
    nextFocusDown: React.Ref,
    nextFocusRight: React.Ref,
    nextFocusLeft: React.Ref,
    nextFocusUp: React.Ref,
  },
};

const riverStyles = StyleSheet.create({
  container: { flex: 1 },
});

export function RiverComponent(props: Props) {
  const {
    navigator: { setScreenTitle, setScreenSummary },
    groupId,
    river,
    screenData,
    isInsideContainer,
    feedUrl,
    focused,
    parentFocus,
  } = props;
  const { ui_components, type, id } = river;

  React.useEffect(() => {
    if (!isInsideContainer) {
      setScreenTitle(screenData?.title || null);
    }
  }, []);

  const renderRiver = () => {
    if (type !== "general_content") {
      return (
        <ScreenResolver
          focused={focused}
          parentFocus={parentFocus}
          screenType={type}
          screenId={id}
          screenData={R.merge(river, { groupId })}
        />
      );
    }

    const connectedScreenUrl =
      feedUrl || R.path(["content", "src"], screenData);

    if (connectedScreenUrl) {
      return (
        <FeedLoader feedUrl={connectedScreenUrl}>
          {(feed) => {
            if (!feed) {
              return null;
            }

            setScreenTitle((feed && feed.summary) || null);
            setScreenSummary(feed?.title || screenData?.title || null);
            return (
              <ComponentsMap
                focused={focused}
                parentFocus={parentFocus}
                isScreenWrappedInContainer={isInsideContainer}
                feed={feed}
                riverComponents={ui_components}
                groupId={groupId}
              />
            );
          }}
        </FeedLoader>
      );
    }

    return (
      <ComponentsMap
        focused={focused}
        parentFocus={parentFocus}
        isScreenWrappedInContainer={isInsideContainer}
        riverComponents={ui_components}
        groupId={groupId}
      />
    );
  };

  return <View style={riverStyles.container}>{renderRiver()}</View>;
}
