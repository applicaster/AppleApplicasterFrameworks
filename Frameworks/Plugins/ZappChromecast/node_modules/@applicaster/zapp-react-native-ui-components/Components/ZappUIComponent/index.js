// @flow
import * as React from "react";

type Props = {
  zappPipesData: ?{
    loading: ?boolean,
    data: ?{},
    error: ?{},
  },
  onLoadFinished: () => void,
};

function renderComponent(Component, props) {
  return Component ? <Component {...props} /> : null;
}

/**
 * This Decorator is used to provide built-in standard behaviour for Zapp UI Components
 * It will automatically render the proper component depending on the status of
 * the zapp pipes request.
 * @param {Function} Component: React component to be decorated,
 * @param {Function} ErrorComponent: optional component to render when zapp pipes returns an error
 * @param {Function} LoadingComponent: optional component to render when zapp pipes data is loading
 * @returns {Function} wrapped component
 */
export function ZappUIComponent(
  Component: React.ComponentType<any>,
  ErrorComponent: ?React.ComponentType<any>,
  LoadingComponent: ?React.ComponentType<any>
) {
  return function WrappedWithZappComponent(props: Props) {
    const { zappPipesData, onLoadFinished } = props;

    if (!zappPipesData || zappPipesData.loading) {
      return renderComponent(LoadingComponent, props);
    }

    onLoadFinished();

    const { error } = zappPipesData;

    if (error) {
      return renderComponent(ErrorComponent, props);
    }

    return renderComponent(Component, props);
  };
}
