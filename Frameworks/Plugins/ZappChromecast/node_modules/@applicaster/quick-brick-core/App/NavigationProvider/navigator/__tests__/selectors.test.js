import * as selectors from "../selectors";

const homeRiver = {
  id: "A1234",
  type: "general_content",
  home: true,
  navigations: [],
};

const riverWithNavigationData = {
  id: "B5678",
  type: "general_content",
  home: false,
  navigations: [],
};

const riverWithoutNavigationData = {
  id: "C0987",
  type: "some_plugin",
  home: false,
};

const rivers = {
  A1234: homeRiver,
  B5678: riverWithNavigationData,
  C0987: riverWithoutNavigationData,
};

const stack = [
  { type: "REPLACE", route: "/", state: { foo: "bar" } },
  { type: "PUSH", route: "/screen/id", state: { bar: "baz" } },
];

const stackWithOneHook = [
  ...stack,
  { type: "PUSH", route: "/hooks/undefined", state: {} },
];

const stackWithSeveralHooks = [
  ...stackWithOneHook,
  { type: "PUSH", route: "/hooks/undefined", state: {} },
];

describe("homeRiverSelectors", () => {
  it("returns the home river", () => {
    expect(selectors.homeRiverSelector({ rivers })).toEqual(homeRiver);
  });
});

describe("activeRiverSelector", () => {
  describe("when path is null", () => {
    it("returns the home river", () => {
      const pathname = "/";
      const activeRiver = selectors.activeRiverSelector({ rivers, pathname });

      expect(activeRiver).toEqual(homeRiver);
    });
  });

  describe("when path is not null", () => {
    it("returns the last river in the pathname that has navigation data", () => {
      const pathname = "/river/A1234/river/B5678/some_screen/C0987";
      const activeRiver = selectors.activeRiverSelector({ rivers, pathname });

      expect(activeRiver).toEqual(riverWithNavigationData);
    });
  });
});

describe("previousStackEntriesSelector", () => {
  it("returns the next to last item in the navigation stack", () => {
    const previousEntry = selectors.previousStackEntriesSelector({ stack });
    expect(previousEntry).toEqual([stack[0]]);
  });

  it("skips hooks if any", () => {
    expect(
      selectors.previousStackEntriesSelector({ stack: stackWithOneHook })
    ).toEqual(stack);

    expect(
      selectors.previousStackEntriesSelector({ stack: stackWithSeveralHooks })
    ).toEqual(stack);
  });
});

describe("lastEntrySelector", () => {
  it("returns the action type of the last entry in the stack", () => {
    const lastEntry = selectors.lastEntrySelector({ stack });
    expect(lastEntry).toEqual(stack[stack.length - 1]);
  });
});
