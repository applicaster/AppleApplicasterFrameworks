const {
  mockZappRequests,
  cleanMocks,
} = require("../../../test_helpers/mockZappRequests");

const build_params = require("../../../test_helpers/appBuildParams.json");

const VERSION_ID = "e7a17c6f-4113-41ac-9450-6281d22153a1";
const FAILING_VERSION_ID = "09876POI";

describe("when ZAPP_TOKEN is not defined", () => {
  const ENV = process.env;

  beforeEach(() => {
    jest.resetModules();
    process.env = { ...ENV };
    delete process.env.ZAPP_TOKEN;
  });

  afterEach(() => {
    process.env = ENV;
  });

  it("throws an error", async () => {
    const { getAppVersionParams } = require("../index");

    const ERROR_MESSAGE =
      "no $ZAPP_TOKEN defined - please add it to your environment variables";

    expect(getAppVersionParams(VERSION_ID)).rejects.toEqual(ERROR_MESSAGE);
  });
});

describe("getAppVersionsParams", () => {
  const { getAppVersionParams } = require("../index");

  beforeEach(() => {
    jest.resetModules();
    mockZappRequests();
    mockZappRequests(FAILING_VERSION_ID, 404);
  });

  it("returns the app's build params", async () => {
    expect(await getAppVersionParams(VERSION_ID)).toEqual(
      build_params.build_params
    );
  });

  it("trims the app version id string before sending the request", async () => {
    // eslint-disable-next-line no-irregular-whitespace
    expect(await getAppVersionParams(` ${VERSION_ID}Â `)).toEqual(
      build_params.build_params
    );
  });

  it("throws if response is not 2xx / 3xx", async () => {
    const { getAppVersionParams } = require("../index");

    expect.assertions(1);
    try {
      await getAppVersionParams(FAILING_VERSION_ID);
    } catch (e) {
      expect(e).toEqual(new Error("Request failed with status code 404"));
    }
  });

  afterEach(() => {
    cleanMocks();
  });
});
