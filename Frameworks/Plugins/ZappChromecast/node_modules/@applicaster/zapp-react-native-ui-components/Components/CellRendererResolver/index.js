// @flow
import { findPluginByIdentifier } from "@applicaster/zapp-react-native-utils/pluginUtils";

type Props = {
  component: any,
  plugins: [{ module: any, type: string, name: string }],
  styles: any,
  cellStyles: any,
};

export const DEFAULT_CELL_RENDERER_IDENTIFIER = "default_cell_renderer";

/**
 * Returns the default cell renderer plugin, if found.
 * @param {object} plugins redux store with app's plugins
 */
const defaultRendererPlugin = plugins =>
  findPluginByIdentifier(DEFAULT_CELL_RENDERER_IDENTIFIER, plugins);

/**
 * Checks the matching cellPluginConfigurationId in the cellStyles redux store
 * and retrieves the requested renderer plugin from the plugins redux store.
 * If any of the identifiers do not match, falls back to the default renderer plugin.
 * @param {*} cellPluginConfigurationId from the "styles" section of the river component
 * @param {*} plugins from redux store
 * @param {*} cellStyles from redux store
 */
function rendererPluginFromCellStyles(
  cellPluginConfigurationId,
  plugins,
  cellStyles
) {
  const cellPluginConfiguration = cellStyles[cellPluginConfigurationId];
  if (!cellPluginConfiguration) {
    return defaultRendererPlugin(plugins);
  }

  const plugin = findPluginByIdentifier(
    cellPluginConfiguration.plugin_identifier,
    plugins
  );

  return plugin || defaultRendererPlugin(plugins);
}

/**
 * Retrieve cell renderer plugin for the component
 * @param {} component component data from rivers
 * @param {*} plugins from redux store
 * @param {*} cellStyles from redux store
 */
function getRendererPlugin(component, plugins, cellStyles) {
  if (
    component.styles &&
    component.styles.cell_plugin_configuration_id &&
    cellStyles
  ) {
    return rendererPluginFromCellStyles(
      component.styles.cell_plugin_configuration_id,
      plugins,
      cellStyles
    );
  }

  return defaultRendererPlugin(plugins);
}

/**
 * Returns a matching cell renderer for the component type.
 * Currently returns the default cell renderer if available.
 * This section will be blown out later to a full-fledged feature
 * with support of any plugins of type "cell_builder"
 * @param {*} component component data from rivers
 * @param {*} plugins from redux store
 * @param {*} styles from redux store
 * @param {*} cellStyles from redux store
 * @returns {function|undefined} React Component to be used for rendering the component's cells
 */
export function CellRendererResolver({
  component,
  plugins,
  styles,
  cellStyles,
}: Props) {
  const cellRendererPlugin = getRendererPlugin(component, plugins, cellStyles);

  if (!cellRendererPlugin) {
    return undefined;
  }

  return cellRendererPlugin.module({ component, styles, cellStyles });
}
