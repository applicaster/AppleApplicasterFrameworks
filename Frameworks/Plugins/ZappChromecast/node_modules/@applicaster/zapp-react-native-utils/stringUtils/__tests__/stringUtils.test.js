import * as R from "ramda";

import * as stringUtils from "../index";

describe("capitalize", () => {
  const { capitalize } = stringUtils;
  it("capitilzes the first letter of a string", () => {
    expect(capitalize("foo")).toBe("Foo");
  });
});

describe("toCamelCase", () => {
  const { toCamelCase } = stringUtils;

  it("transforms a string to camelCase", () => {
    const str1 = "foo_bar_baz";
    const str2 = "foo.bar.baz";
    const str3 = "foo-bar-baz";

    const result = "fooBarBaz";

    expect(toCamelCase(str1)).toBe(result);
    expect(toCamelCase(str2)).toBe(result);
    expect(toCamelCase(str3)).toBe(result);
  });
});

describe("toPascalCase", () => {
  const { toPascalCase } = stringUtils;
  it("transforms a string to a pascal case string", () => {
    const str1 = "foo_bar_baz";
    const str2 = "foo.bar.baz";
    const str3 = "foo-bar-baz";

    const result = "FooBarBaz";

    expect(toPascalCase(str1)).toBe(result);
    expect(toPascalCase(str2)).toBe(result);
    expect(toPascalCase(str3)).toBe(result);
  });
});

describe("base64", () => {
  const { to64, from64 } = stringUtils;
  const str = "foo";
  const base64str = Buffer.from(str).toString("base64");

  it("returns the original strings when both transforms are chained", () => {
    expect(
      R.compose(
        from64,
        to64
      )(str)
    ).toEqual(str);
  });

  describe("to64", () => {
    it("transforms a string to base 64", () => {
      expect(to64(str)).toEqual(base64str);
    });
  });

  describe("from64", () => {
    it("transforms a base64 string to a plain string", () => {
      expect(from64(base64str)).toEqual(str);
    });
  });
});
