function throttle(fn, threshold, context = this) {
  let locked = false;

  function clearLock() {
    locked = false;
  }

  function setLock() {
    locked = true;
  }

  return function throttled(...args) {
    if (!locked) {
      fn.apply(context, args);
      setLock();
      setTimeout(clearLock, threshold);
    }
  };
}

export function wrapInThrottlerIfNeeded(fn, threshold = 10, context) {
  return threshold
    ? throttle(fn, threshold, context)
    : (...args) => fn.apply(context, args);
}
