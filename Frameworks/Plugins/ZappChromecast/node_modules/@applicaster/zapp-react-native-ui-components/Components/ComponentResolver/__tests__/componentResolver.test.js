import * as React from "react";
import { View } from "react-native";
import { shallow } from "enzyme";
import { shallowToJson } from "enzyme-to-json";
import configureStore from "redux-mock-store";

import { ComponentResolverComponent } from "../ComponentResolver";
import { ComponentResolver } from "../index";

const SomeComponent = jest.fn(props => <View {...props} />);
const components = { SomeComponent };
const plugins = [];
const styles = {};
const cellStyles = {};
const store = configureStore()({
  components,
  plugins,
  styles,
  cellStyles,
});

const component = { component_type: "some_component" };
const decorators = jest.fn(x => x);
const renderFunction = jest.fn(Comp => <Comp rendered />);

const consoleSpy = jest.spyOn(console, "warn").mockImplementation(() => {});

function clearAllMocks() {
  SomeComponent.mockClear();
  decorators.mockClear();
  renderFunction.mockClear();
  consoleSpy.mockClear();
}

describe("ComponentResolver", () => {
  beforeEach(clearAllMocks);

  it("renders correctly", () => {
    const wrapper = shallow(
      <ComponentResolver component={component} decorators={decorators} />,
      { context: { store } }
    );

    expect(shallowToJson(wrapper)).toMatchSnapshot();
  });
});

describe("ComponentResolverComponent", () => {
  beforeEach(clearAllMocks);

  const getWrapper = (component, plugins) =>
    shallow(
      <ComponentResolverComponent
        components={components}
        component={component}
        decorators={decorators}
        plugins={plugins}
        styles={styles}
        cellStyles={cellStyles}
      >
        {renderFunction}
      </ComponentResolverComponent>
    );

  it("renders the Component if it exists", () => {
    const wrapper = getWrapper(component, plugins);

    expect(shallowToJson(wrapper)).toMatchSnapshot();
    expect(renderFunction).toHaveBeenCalledWith(SomeComponent, undefined);
  });

  it("returns null if the component doesn't exist", () => {
    const wrapper = getWrapper({ component_type: "foo" }, plugins);
    const warningMessage =
      "Component foo cannot be found - it is skipped from rendering";

    expect(shallowToJson(wrapper)).toMatchSnapshot();
    expect(wrapper.isEmptyRender()).toBe(true);
    expect(consoleSpy).toHaveBeenCalledWith(warningMessage);
  });

  it("initializes the cell renderer plugin module if matching plugin exists", () => {
    const plugins = [
      {
        module: jest.fn(x => x),
        identifier: "default_cell_renderer",
        type: "cell_builder",
      },
    ];
    const wrapper = getWrapper(component, plugins);

    expect(shallowToJson(wrapper)).toMatchSnapshot();
    expect(renderFunction).toHaveBeenCalledWith(SomeComponent, {
      cellStyles,
      component,
      styles,
    });
  });
});
