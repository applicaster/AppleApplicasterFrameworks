// @flow

import * as React from "react";
import * as R from "ramda";
import { View, ImageBackground, Text } from "react-native";

import {
  sendQuickBrickEvent,
  QUICK_BRICK_EVENTS,
} from "@applicaster/zapp-react-native-bridge/QuickBrick";

import {
  fixColorHexCode,
  getAppAsset,
  getAppStyle,
} from "@applicaster/zapp-react-native-utils/stylesUtils";
import * as ERROR_CODES from "@applicaster/zapp-react-native-utils/errors/errorCodes";

import { platformSelect } from "@applicaster/zapp-react-native-utils/reactUtils";

import { Focusable } from "../Focusable";
import { FocusableGroup } from "../FocusableGroup";

type Props = {
  error: Error,
  info: string,
  navigator: {
    goBack: () => void,
  },
  styles: {},
  remoteConfigurations: {
    assets: {
      [string]: any,
    },
  },
};

const getColor = (styleKey, styles) =>
  R.compose(
    fixColorHexCode,
    R.prop("color")
  )(getAppStyle(styleKey, styles));

export function DisplayErrorComponent({
  error,
  info,
  navigator,
  styles,
  remoteConfigurations
}: Props) {
  // eslint-disable-next-line no-console

  const activeColor = getColor("FOCUSED_TEXT_COLOR", styles);
  const textColor = getColor("MAIN_TEXT", styles);

  const backgroundImage = getAppAsset(
    "APP_BACKGROUND_IMAGE",
    remoteConfigurations
  );

  const displayStyles = getStyles(textColor, activeColor);

  return (
    <View style={displayStyles.container}>
      <FocusableGroup id="error-screen">
        <ImageBackground
          source={{ uri: backgroundImage }}
          style={displayStyles.backgroundImage}
        >
          <View style={displayStyles.textWrapper}>
            <Text style={displayStyles.textBold}>An error has occured</Text>
            <Text style={displayStyles.text}>
              Reach out to the support representative, and provide them with
              this error code: {error.code || ERROR_CODES.UNKNOWN_ERROR}
            </Text>
            {__DEV__ && (
              <Text style={displayStyles.text}>
                Open the React Dev Tools and check the console for more
                information on this error
              </Text>
            )}
            <View style={displayStyles.buttonContainer}>
              <Focusable
                groupId="error-screen"
                id="error-go-back"
                onPress={() => navigator.goBack()}
              >
                {focused => (
                  <Text style={displayStyles.buttonText(focused)}>Go Back</Text>
                )}
              </Focusable>
              <Focusable
                groupId="error-screen"
                id="error-close-app"
                onPress={() =>
                  sendQuickBrickEvent(QUICK_BRICK_EVENTS.MOVE_APP_TO_BACKGROUND)
                }
              >
                {focused => (
                  <Text style={displayStyles.buttonText(focused)}>
                    Close App
                  </Text>
                )}
              </Focusable>
            </View>
          </View>
        </ImageBackground>
      </FocusableGroup>
    </View>
  );
}

const getStyles = (textColor, activeColor) => ({
  container: {
    flex: 1,
    ...platformSelect({
      web: { width: "100vw", height: "100vh" },
      native: {},
    }),
  },
  backgroundImage: platformSelect({
    web: { width: "100vw", height: "100vh" },
    native: { width: "100%", height: "100%" },
  }),
  textWrapper: {
    flex: 1,
    padding: 112,
    alignItems: "center",
    justifyContent: "center",
  },
  text: {
    color: textColor,
    fontSize: 20,
    padding: 6,
  },
  textBold: {
    color: textColor,
    fontWeight: "600",
    fontSize: 24,
    padding: 6,
  },
  buttonContainer: {
    marginTop: 48,
    paddingHorizontal: 350,
    flexDirection: "row",
    justifyContent: "space-around",
    alignSelf: "stretch",
  },
  buttonText: focused => ({
    color: focused ? activeColor : textColor,
    fontWeight: "600",
    fontSize: 24,
    padding: 6,
  }),
});
