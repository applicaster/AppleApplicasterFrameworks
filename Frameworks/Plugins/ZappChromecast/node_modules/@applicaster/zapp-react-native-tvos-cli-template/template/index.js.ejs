import React from "react";
import { AppRegistry } from "react-native";

import components from "@applicaster/zapp-react-native-tvos-ui-components";
import { createZappApp, renderZappApp } from "@applicaster/quick-brick-core";
import { ZappApp } from "@applicaster/zapp-react-native-tvos-app";

<% plugins.forEach(function(plugin) { %>import <%= plugin.moduleName %> from "<%= plugin.packageName %>";
<%}); %>

// Wrapper for importing only the configurations matching the platform
// so both platforms can be served using the same dev packager.
import {
  rivers,
  styles,
  pluginConfigurations,
  remoteConfigurations,
  runtimeConfigurationUrls,
  <% if (configuration.buildParams.cell_styles_url) { %>cellStyles,<% } %>
} from "./config";

if (process.env.DISABLE_REACT_YELLOW_BOX) {
  // eslint-disable-next-line no-console
  console.disableYellowBox = true;
}

// Initialize plugins array with the defaults. They will be in the map with their implementation
// So that in the core, you can map out plugin configurations to all plugins, including defaults if they are relevant
const plugins = [];

<% plugins.forEach(function(plugin) { %>plugins.push({
  module: <%= plugin.moduleName %>,
  name: "<%= plugin.moduleName %>",
  identifier: "<%= plugin.identifier %>",
  type: "<%= plugin.type %>"
});
<%}); %>

const ZappAppReactNativeApp = createZappApp({
  components,
  rivers,
  styles,
  pluginConfigurations,
  remoteConfigurations,
  plugins,
  appSettings: {
    runtimeConfigurationUrls,
  },
  ZappApp,
  <% if (configuration.buildParams.cell_styles_url) { %>cellStyles,<% } %>
});

const App = props => <ZappAppReactNativeApp {...props} />;

renderZappApp({ AppRegistry, App });
