// @flow
/*   eslint-disable no-unused-vars, no-redeclare */
import * as R from "ramda";
import { useEffect, useState } from "react";
import { NetInfo } from "react-native";

const isOnline = (connectionInfo: Connection | null): ?boolean =>
  R.unless(R.isNil, R.complement(R.propEq("type", "none")))(connectionInfo);

export type Connection = {
  type:
    | "none"
    | "cellular"
    | "unknown"
    | "wifi"
    | "bluetooth"
    | "ethernet"
    | "wimax",
  effectiveType: "unknown" | "2g" | "3g" | "4g",
};
/**
 * This hook returns connection type from RN NetInfo component or boolean for iConnected if justOnlineStatus flag is set
 * @param {boolean} justOnlineStatus - flag if to return boolean for isConnected
 * @returns {boolean | null | { type: string }} - Returns connection object from NetInfo or boolean if isConnected
 */

declare function useConnectionInfo(justOnlineStatus: true): ?boolean;
declare function useConnectionInfo(justOnlineStatus: false): ?Connection;
export function useConnectionInfo(justOnlineStatus) {
  const [connectionInfo, setConnectionInfo]: [
    Connection | null,
    Function
  ] = useState(null);
  useEffect(() => {
    NetInfo.addEventListener("connectionChange", connection => {
      setConnectionInfo(connection);
    });
    return () => {
      NetInfo.removeEventListener("connectionChange");
    };
  }, []);

  return justOnlineStatus ? isOnline(connectionInfo) : connectionInfo;
}
