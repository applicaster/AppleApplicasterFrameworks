import * as React from "react";
import { View } from "react-native";
import { shallow } from "enzyme";

import {
  DEFAULT_CELL_RENDERER_IDENTIFIER,
  CellRendererResolver,
} from "../index";

const component = {
  styles: {
    cell_plugin_configuration_id: "ABCDE-123456",
  },
};

const plugins = [
  {
    identifier: "custom_renderer_plugin",
    module: jest.fn(prop => <View someProp={prop} />),
  },
];
const styles = {};

const cellStyles = {
  "ABCDE-123456": {
    plugin_identifier: "custom_renderer_plugin",
    configuration: {},
  },
};

describe("CellRendererResolver", () => {
  const getResult = ({ component, plugins, styles, cellStyles }) =>
    CellRendererResolver({
      component,
      plugins,
      styles,
      cellStyles,
    });

  it("renders correctly", () => {
    const result = shallow(
      getResult({ component, plugins, styles, cellStyles })
    );

    expect(result).toMatchSnapshot();
  });

  describe("without a default renderer plugin", () => {
    it("returns undefined if ui component has no cell_plugin_configuration_id", () => {
      expect(
        getResult({ component: {}, plugins, styles, cellStyles })
      ).toBeUndefined();
    });

    it("returns undefined if requested cell plugin configuration does not exist", () => {
      expect(
        getResult({
          component: { styles: { cell_plugin_configuration_id: "wrong-id" } },
          plugins,
          styles,
          cellStyles,
        })
      ).toBeUndefined();
    });

    it("returns undefined if cellStyles store is empty", () => {
      expect(
        getResult({ component, plugins, styles, cellStyles: {} })
      ).toBeUndefined();
    });

    it("returns undefined if requested renderer plugin does not exist", () => {
      expect(
        getResult({ component, plugins: [], styles, cellStyles })
      ).toBeUndefined();
    });
  });

  describe("with a default renderer plugin", () => {
    const pluginsWithDefault = plugins.concat([
      {
        identifier: DEFAULT_CELL_RENDERER_IDENTIFIER,
        module: jest.fn(prop => (
          <View whoAmI="default renderer" someProp={prop} />
        )),
      },
    ]);

    it("renders correctly", () => {
      const result = shallow(
        getResult({
          component,
          plugins: pluginsWithDefault,
          styles,
          cellStyles,
        })
      );
      expect(result).toMatchSnapshot();
    });

    it("returns default plugin if component has no cell_plugin_configuration_id", () => {
      const result = getResult({
        component: {},
        plugins: pluginsWithDefault,
        styles,
        cellStyles,
      });

      expect(result).toBeDefined();
      expect(result.props.whoAmI).toEqual("default renderer");
    });

    it("returns default plugin if requested cell plugin configuration does not exist", () => {
      const result = getResult({
        component: { styles: { cell_plugin_configuration_id: "wrong-id" } },
        plugins: pluginsWithDefault,
        styles,
        cellStyles,
      });

      expect(result.props.whoAmI).toEqual("default renderer");
    });

    it("returns default plugin if cellStyles store is empty", () => {
      const result = getResult({
        component,
        plugins: pluginsWithDefault,
        styles,
        cellStyles: {},
      });

      expect(result.props.whoAmI).toEqual("default renderer");
    });

    it("returns default plugin if requested renderer plugin does not exist", () => {
      const result = getResult({
        component,
        plugins: [pluginsWithDefault.pop()],
        styles,
        cellStyles,
      });

      expect(result.props.whoAmI).toEqual("default renderer");
    });
  });
});
