// @flow
import * as React from "react";
import { ActionsContext } from "@applicaster/zapp-react-native-ui-components/Contexts/ActionsContext";

/**
 * React Hook to subscribe to the custom action context
 * @param {*} plugId - subscribes to the context of that action plugin
 * @return {*} - global action provider context or context for specific action plugin
 */
export const useActions = (plugId: string): any => {
  const context = React.useContext(ActionsContext);

  if (plugId) {
    const actionContext = context?.actions?.[plugId]?.module?.context;

    if (!actionContext) {
      // eslint-disable-next-line no-console
      console.log(`useActions: Couldn't find an action for ${plugId} plugin`);
      return undefined;
    }
    // Disabling the rule as it's fine to have  a conditional hook in this use case.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return React.useContext(actionContext);
  }

  return context;
};
