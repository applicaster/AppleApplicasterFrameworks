// @flow
import * as React from "react";
import * as R from "ramda";

import { ActionsContext } from "@applicaster/zapp-react-native-ui-components/Contexts/ActionsContext";

type Props = {
  children: React.Node,
  rivers: { [string]: {} },
  plugins: [{}],
  useLocation: () => {},
  useHistory: () => {},
};

type Plugin = {
  [any]: any,
  identifier: string,
};

type PluginsIdMap = {
  [any]: Plugin,
};

const getActionPlugins = (plugins) =>
  R.filter(R.path(["module", "actionName"]))(plugins);

/**
 * this functions translates array of objects,
 * to object of keys create from original object.identifier
 * @param {Array} actionPlugins
 */

const abstractIdentifier = (actionPlugins: [Plugin]): PluginsIdMap =>
  R.compose(
    R.mergeAll,
    R.map((plugin) => ({ [plugin.identifier]: plugin }))
  )(actionPlugins);

/**
 * Component returning children.
 * Can be used to create Component from children
 * @param {React.Children} props.children
 */
const ChildrenWrapper = ({ children }: { children: React.Element<any> }) => {
  return children;
};

/**
 * It wraps children in multiple context providers
 * @param {Array} context - Array of React Context Providers
 */
const contextComposer = (contexts: [Plugin] | []): React.ComponentType<any> =>
  R.compose(...contexts)(ChildrenWrapper);

/**
 * ActionsProvider is a React Context Provider for a ActionPlugins
 * @param {*} props
 * @param {React.Children} props.children - React children
 * @param {Array} props.plugins - list of app plugins
 * @return {React.Node} - Returns Children wrapped in the Action providers
 */
export function ActionsProvider(props: Props) {
  const { children, plugins } = props;

  const actionPlugins = React.useMemo(
    () =>
      R.ifElse(
        R.anyPass([R.isNil, R.isEmpty]),
        R.always([]),
        R.compose(abstractIdentifier, getActionPlugins)
      )(plugins),
    [plugins]
  );

  const contextProviders = React.useMemo((): [Plugin] | [] => {
    try {
      const providers = R.compose(
        R.map(R.path(["module", "contextProvider"])),
        getActionPlugins
      )(plugins);

      return providers;
    } catch (err) {
      return [];
    }
  }, []);

  const Context = React.useMemo(
    () =>
      contextProviders?.length
        ? contextComposer(contextProviders)
        : React.Fragment,
    []
  );

  return (
    <ActionsContext.Provider value={{ actions: actionPlugins }}>
      <Context>{children}</Context>
    </ActionsContext.Provider>
  );
}
