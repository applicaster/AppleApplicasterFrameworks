import * as React from "react";
import { findNodeHandle } from "react-native";

import { useViewportEventsContext } from "../ViewportEvents";
import { callOnChildren } from "../utils";

export function ViewportTracker(props) {
  const viewportEvents = useViewportEventsContext();
  const { children } = props;
  const [width, setWidth] = React.useState(0);
  const [height, setHeight] = React.useState(0);
  const [offsetX, setOffsetX] = React.useState(0);
  const [offsetY, setOffsetY] = React.useState(0);
  const [nodeHandle, setNodeHandle] = React.useState(null);

  function assignRef(ref) {
    callOnChildren(children, "ref", ref);
    setNodeHandle(findNodeHandle(ref));
  }

  function onLayout(event) {
    callOnChildren(children, "onLayout", event);
    setWidth(event?.nativeEvent?.layout?.width);
    setHeight(event?.nativeEvent?.layout?.height);
    onViewportChange({
      width: event?.nativeEvent?.layout?.width,
      height: event?.nativeEvent?.layout?.height,
      offsetX,
      offsetY,
    });
  }

  function onContentSizeChange(contentWidth, contentHeight) {
    callOnChildren(
      children,
      "onContentSizeChange",
      contentWidth,
      contentHeight
    );
    onViewportChange({ width, height, offsetX, offsetY });
  }

  function onScroll(event) {
    callOnChildren(children, "onScroll", event);
    setOffsetX(event?.nativeEvent?.contentOffset?.x);
    setOffsetY(event?.nativeEvent?.contentOffset?.y);
    onViewportChange(
      {
        width,
        height,
        offsetX: event?.nativeEvent?.contentOffset?.x,
        offsetY: event?.nativeEvent?.contentOffset?.y,
      },
      false
    );
  }

  function onViewportChange(event, shouldMeasureLayout = true) {
    if (nodeHandle && event?.width > 0 && event?.height > 0) {
      viewportEvents.notify({
        parentHandle: nodeHandle,
        ...event,
        shouldMeasureLayout,
      });
    }
  }

  return React.cloneElement(React.Children.only(children), {
    ref: assignRef,
    onLayout,
    onContentSizeChange,
    onScroll,
  });
}
