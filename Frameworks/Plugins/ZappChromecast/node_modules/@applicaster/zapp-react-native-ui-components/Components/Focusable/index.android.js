// @flow
import * as React from "react";
import * as R from "ramda";
import { useFocusManager } from "@applicaster/zapp-react-native-utils/focusManager";
import { Touchable } from "./Touchable";

type Props = {
  children: React.Node,
  id: String,
  nextFocusUp: React.Ref,
  nextFocusRight: React.Ref,
  nextFocusLeft: React.Ref,
  nextFocusDown: React.Ref,
  hasInitialFocus: boolean,
  onFocus: () => void,
  onBlur: () => void,
  onPress: () => void,
};

function FocusableComponent(props: Props, ref) {
  const {
    children,
    id,
    nextFocusDown,
    nextFocusUp,
    nextFocusLeft,
    nextFocusRight,
    hasInitialFocus,
    onFocus,
    onBlur,
    onPress,
  } = props;

  if (R.isNil(id)) {
    // eslint-disable-next-line no-console
    console.error("Focusable: Id parameter is required!");
  }

  if (R.isNil(id)) {
    // eslint-disable-next-line no-console
    console.error("Focusable: Setting ref on focusable component is required");
  }

  const focusManager = useFocusManager();

  const extractCurrent = (ref) => {
    return ref?.current || ref;
  };

  React.useEffect(() => {
    hasInitialFocus && focusManager.setFocus(ref);
  }, [hasInitialFocus]);

  const isFocused = focusManager.isFocused(id);

  return (
    <Touchable
      ref={ref}
      {...{
        nextFocusDown: extractCurrent(nextFocusDown),
        nextFocusUp: extractCurrent(nextFocusUp),
        nextFocusLeft: extractCurrent(nextFocusLeft),
        nextFocusRight: extractCurrent(nextFocusRight),
        id,
        onFocus,
        onBlur,
        onPress,
      }}
    >
      {children(
        isFocused,
        {
          nextFocusDown,
          nextFocusUp,
          nextFocusLeft,
          nextFocusRight,
        },
        ref
      )}
    </Touchable>
  );
}

export const Focusable = R.compose(
  React.memo,
  React.forwardRef
)(FocusableComponent);
