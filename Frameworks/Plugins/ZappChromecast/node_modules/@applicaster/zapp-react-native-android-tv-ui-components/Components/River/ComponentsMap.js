// @flow
import * as React from "react";
import * as R from "ramda";
import { View, StyleSheet } from "react-native";

import { connectToStore } from "@applicaster/zapp-react-native-redux";
import type { ZappComponent } from "@applicaster/zapp-react-native-flow-types";
import { applyDecorators } from "@applicaster/zapp-react-native-ui-components/Decorators";
import { ComponentResolver } from "@applicaster/zapp-react-native-ui-components/Components/ComponentResolver";

import { FocusableList } from "@applicaster/zapp-react-native-ui-components/Components/FocusableList";

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});

type Props = {
  riverComponents: [any],
  feed: ?string,
  isScreenWrappedInContainer: boolean,
  components: { [string]: ZappComponent },
  groupId: string,
  parentFocus: {
    nextFocusDown: React.Ref,
    nextFocusRight: React.Ref,
    nextFocusLeft: React.Ref,
    nextFocusUp: React.Ref,
  },
  focused: boolean,
};

export function ComponentsMapComponent(props: Props) {
  const { parentFocus = {} } = props;

  const [focusedIndex, setFocusedIndex] = React.useState(null);
  const flatListRef = React.useRef(null);

  const getFeedUrl = (feed, index) => {
    try {
      const feedUrl = R.path(["entry", index, "content", "src"], feed);
      return (R.contains || R.includes)("fetchData?", feedUrl) ? feedUrl : null;
    } catch (error) {
      return null;
    }
  };

  const onRiverElementFocus = (element, { index }) => {
    setFocusedIndex(index);

    flatListRef?.current?.scrollToIndex({
      animated: true,
      index: index,
    });
  };

  const scrollByOffset = (offset) => {
    if (offset >= 0 && focusedIndex >= 0) {
      flatListRef?.current?.scrollToIndex({
        animated: true,
        index: focusedIndex,
        viewOffset: -offset,
      });
    }
  };

  const renderRiverComponent = ({
    // eslint-disable-next-line react/prop-types
    item: component,
    // eslint-disable-next-line react/prop-types
    index: key,
    focused,
    parentFocus,
  }) => {
    const { feed, isScreenWrappedInContainer, groupId } = props;

    const feedUrl = getFeedUrl(feed, key);

    return (
      <ComponentResolver
        key={key}
        component={component}
        decorators={applyDecorators}
      >
        {(Component, CellRenderer) => {
          return (
            <Component
              focused={focused}
              parentFocus={parentFocus}
              scrollRiverByOffset={scrollByOffset}
              componentIndex={key}
              isScreenWrappedInContainer={isScreenWrappedInContainer}
              component={component}
              CellRenderer={CellRenderer}
              groupId={groupId}
              feedUrl={feedUrl}
              onLoadFinished={() => null}
            />
          );
        }}
      </ComponentResolver>
    );
  };

  const hasDataSource = (component, index) => {
    const feedUrl = getFeedUrl(props?.feed, index);
    return feedUrl || component?.data?.source;
  };

  const data = props?.riverComponents?.filter(hasDataSource);

  if (props.riverComponents?.[0]?.component_type === "screen_picker") {
    return renderRiverComponent({
      item: props.riverComponents?.[0],
      focused: props.focused,
      parentFocus: props.parentFocus,
      index: 0,
    });
  }

  return (
    <View style={styles.container}>
      <FocusableList
        initialNumToRender={3}
        listKey={"components-map-list-key"}
        focused={props.focused}
        ref={flatListRef}
        style={styles.container}
        removeClippedSubviews
        renderItem={renderRiverComponent}
        showsVerticalScrollIndicator={false}
        keyExtractor={R.prop("id")}
        data={data}
        onListElementFocus={onRiverElementFocus}
        withStateMemory={false}
        {...{ ...parentFocus }}
      />
    </View>
  );
}

export const ComponentsMap = connectToStore(R.pick(["cellStyles"]))(
  ComponentsMapComponent
);
