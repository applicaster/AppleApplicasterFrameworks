import * as R from "ramda";

/**
 * shifts an array by the given offset. a negative offset will take items
 * from the end of the array and add them at the beginning, while a positive offset
 * will take an item at the beginning and shift it to the end
 * shiftArray(-1, [1,2,3,4]) => [4, 1, 2, 3]
 * shiftArray(1, [1,2,3,4]) => [2, 3, 4, 1]
 * an offset of 0 leaves the array unchanged
 * this function returns a new array and doesn't mutate the original one
 * curried function which can be invoked like offset => array => result
 * @param {Number} offset offset to shift the array
 * @param {Array<T>} array array to shift
 * @returns {Array<T>}
 */
export const shiftArray = R.curry(function(offset, array) {
  return R.concat(
    R.slice(offset, R.length(array), array),
    R.slice(0, offset, array)
  );
});

/**
 * Tries to remove an item from an array, and returns the array if the item is not found
 * @param {any} item to remove
 * @param {Array<any>} list to remove the item from
 * @returns {Array<any>}
 */
export function removeItemFromList(item, list) {
  return R.compose(
    R.ifElse(R.equals(-1), R.always(list), R.remove(R.__, 1, list)),
    R.indexOf(item)
  )(list);
}
