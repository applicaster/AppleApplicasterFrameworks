// @flow
import * as React from "react";

type Props = {
  baseStyles: {},
  saveUpdaterFunction: () => {},
  children: ({}, () => {}) => React.ComponentType<any>,
  transitionDelay: ?number,
  easing: ?string,
  initialHorizontalOffset: ?Number,
  initialVerticalOffset: ?Number,
};

export class VariableOffsetContainer extends React.Component<Props> {
  constructor(props) {
    super(props);

    const {
      baseStyles,
      initialHorizontalOffset = 0,
      initialVerticalOffset = 0,
    } = this.props;

    this.state = {
      styles: baseStyles,
      verticalOffset: initialVerticalOffset,
      horizontalOffset: initialHorizontalOffset,
    };

    this.setOffset = this.setOffset.bind(this);
  }

  componentDidMount() {
    this._mounted = true;
    const { saveUpdaterFunction } = this.props;

    if (saveUpdaterFunction) {
      saveUpdaterFunction(this.setOffset);
    }
  }

  componentWillUnmount() {
    this._mounted = false;
  }

  offsetDirectionIs(direction, match) {
    if (direction === "both") {
      return true;
    }

    return direction === match;
  }

  setOffset(direction, value, animated = true) {
    const {
      transitionDelay = 400,
      easing = "cubic-bezier(0, 1, 0.5, 1)",
    } = this.props;

    const transitionAnimation = animated ? "all" : "none";

    if (this._mounted) {
      this.setState(prevState => {
        const verticalOffset =
          prevState.verticalOffset +
          (this.offsetDirectionIs(direction, "vertical") ? value : 0);

        const horizontalOffset =
          prevState.horizontalOffset +
          (this.offsetDirectionIs(direction, "horizontal") ? value : 0);

        return {
          styles: {
            ...prevState.styles,
            transition: `${transitionAnimation} ${transitionDelay}ms ${easing}`,
            transform: `translate3d(${horizontalOffset}px, ${verticalOffset}px, 0)`,
          },
          verticalOffset,
          horizontalOffset,
        };
      });
    }
  }

  render() {
    const { styles } = this.state;
    const { children } = this.props;

    return children(styles, this.setOffset);
  }
}
