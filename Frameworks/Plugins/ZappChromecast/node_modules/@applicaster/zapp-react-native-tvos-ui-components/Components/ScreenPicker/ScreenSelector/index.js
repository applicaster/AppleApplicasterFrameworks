// @flow
import * as React from "react";
import * as R from "ramda";
import { FixedFocusScrollableList } from "../../FixedFocusScrollableList";
import { FocusableGroup } from "@applicaster/zapp-react-native-ui-components/Components/FocusableGroup";
import { BaseCell } from "../../BaseCell";
import { screenSelectorStyle } from "../styles";

type Props = {
  style: {},
  selectedItem: {},
  selectItem: any => void,
  focusItem: any => void,
  entry: [],
  cellStyle: ?Array<any>,
  screenPickerHeight: number,
  componentId: string,
  CellRenderer: React.componentType<{ item: Object, state: string }>,
  styles: {},
};

type State = {
  flatListHeight: number,
};
export class ScreenSelector extends React.Component<Props, State> {
  constructor(props) {
    super(props);
    this.state = { flatListHeight: null };
    this.viewFrame = { x: 0, y: 0, width: 0, height: 0 };
    this.contentHeight = 0;
    this.renderCell = this.renderCell.bind(this);
    this.onPress = this.onPress.bind(this);
    this.onLayout = this.onLayout.bind(this);
    this.onContentSizeChange = this.onContentSizeChange.bind(this);
    this.flatListRef = null;
  }

  onContentSizeChange(contentWidth: number, contentHeight: number) {
    this.contentHeight = contentHeight;
    this.calculateHeight();
  }

  onLayout(layoutFrame: Object) {
    this.viewFrame = layoutFrame;
  }

  calculateHeight() {
    if (this.contentHeight) {
      this.setState({
        flatListHeight:
          this.contentHeight < this.props.screenPickerHeight
            ? this.contentHeight
            : null,
      });
    }
  }

  onPress(item, index, ...args) {
    const { selectItem } = this.props;
    selectItem(item, index);
  }

  renderCell({ item, index }) {
    const { onPress } = this;
    const { CellRenderer, selectedItem, componentId } = this.props;

    return (
      <BaseCell
        index={index}
        key={index}
        item={item}
        onPress={(...args) => onPress(item, index, ...args)}
        groupId={`ScreenSelector.${componentId}`}
        isParallaxDisabled={true}
        CellRenderer={CellRenderer}
        selected={R.equals(item, selectedItem)}
      />
    );
  }

  render() {
    const { entry, selectedItem, componentId } = this.props;
    return (
      <FocusableGroup
        style={screenSelectorStyle}
        id={`ScreenSelector.${componentId}`}
      >
        <FixedFocusScrollableList
          extraData={selectedItem}
          data={entry}
          renderCell={this.renderCell}
          onContentSizeChange={this.onContentSizeChange}
          onLayout={this.onLayout}
          scrollEnabled={true}
          setFlatListRef={flatListRef => (this.flatListRef = flatListRef)}
        />
      </FocusableGroup>
    );
  }
}
