"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildProviderEngine = exports.buildProviderMap = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _nativeBridge = require("./nativeBridge");

var _nativeBridge2 = _interopRequireDefault(_nativeBridge);

var _config = require("../config");

var _config2 = _interopRequireDefault(_config);

var _ramda = require("ramda");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var errorMessages = _config2.default.errorMessages;
var buildProviderMap = exports.buildProviderMap = function buildProviderMap(providers, currentProvider) {
  return _extends({}, providers, _defineProperty({}, currentProvider.name, currentProvider));
};

var buildProviderEngine = exports.buildProviderEngine = function buildProviderEngine() {
  var customNativeBridge = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (providers) {
    return function (_ref) {
      var providerName = _ref.provider,
          command = _ref.command,
          params = _ref.params;

      var nativeBridge = (0, _ramda.merge)(_nativeBridge2.default, customNativeBridge);

      if (Object.keys(providers).indexOf(providerName) === -1) {
        return nativeBridge.sendResponse(errorMessages.unknownProvider(providerName), 404);
      }

      var provider = providers[providerName];
      var manifest = (0, _ramda.prop)("manifest", provider);

      if (command === "help") {
        return nativeBridge.sendResponse(manifest.help);
      }

      var type = params.type;

      if (manifest && manifest.handlers && manifest.handlers.indexOf(type) === -1) {
        return nativeBridge.sendResponse(errorMessages.unknownCommand(providerName, type), 404);
      }

      var handlerParams = (0, _utils.parseQueryParameters)(params);

      return provider.handler(nativeBridge)(handlerParams);
    };
  };
};