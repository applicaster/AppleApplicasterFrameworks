// @flow
import * as React from "react";
import * as R from "ramda";

import { Focusable } from "@applicaster/zapp-react-native-ui-components/Components/Focusable";
import { focusableItemId } from "@applicaster/zapp-react-native-ui-components/Helpers/ComponentsHelper";

type Props = {
  index: number,
  children: boolean => React.ComponentType<any>,
  preferredFocus: boolean,
  onPress: ?(any, number) => void,
  onFocus: ?(any, number) => void,
  onLayout: ?(any, number) => void,
  groupId: string,
  isParallaxDisabled: boolean,
  selected: boolean,
  item: {},
  CellRenderer: React.componentType<{ item: Object, state: string }>,
  focusable: boolean,
  componentPositionIndex: number,
  forceFocus: boolean,
  initialItemId: string,
};

export class BaseCellComponent extends React.PureComponent<Props> {
  constructor(props) {
    super(props);

    this.onFocus = this.onFocus.bind(this);
    this.onPress = this.onPress.bind(this);
    this.onLayout = this.onLayout.bind(this);
  }

  onFocus(e) {
    const { index, onFocus, item, groupId } = this.props;
    const itemId = R.isNil(index) ? null : focusableItemId(item, index);

    onFocus && onFocus(e, index, groupId, itemId);
  }

  onPress(e) {
    const { index, onPress } = this.props;
    onPress && onPress(e, index);
  }

  onLayout(e) {
    const { index, onLayout } = this.props;
    onLayout && onLayout(e, index);
  }

  render() {
    const {
      groupId,
      isParallaxDisabled,
      selected,
      item,
      index,
      CellRenderer,
      focusable = true,
      preferredFocus = false,
      componentPositionIndex = null,
      forceFocus = false,
      initialItemId,
    } = this.props;

    const itemId = R.isNil(index) ? null : focusableItemId(item, index);
    // Initial Focus can be added only if this a first component in river screen and cell has index 0
    const initialFocus =
      R.allPass([
        R.equals(0),
        R.compose(
          R.not,
          R.isNil
        ),
      ])(componentPositionIndex) &&
      R.allPass([
        R.equals(0),
        R.compose(
          R.not,
          R.isNil
        ),
      ])(index);

    const cellState = selected ? "selected" : "default";

    return (
      <Focusable
        onLayout={this.onLayout}
        focusable={focusable}
        isParallaxDisabled={isParallaxDisabled}
        groupId={groupId}
        id={itemId}
        onFocus={this.onFocus}
        onPress={this.onPress}
        preferredFocus={preferredFocus}
        forceFocus={forceFocus}
        initialFocus={initialItemId ? initialItemId === itemId : initialFocus}
      >
        {focused => (
          <CellRenderer item={item} state={focused ? "focused" : cellState} />
        )}
      </Focusable>
    );
  }
}
