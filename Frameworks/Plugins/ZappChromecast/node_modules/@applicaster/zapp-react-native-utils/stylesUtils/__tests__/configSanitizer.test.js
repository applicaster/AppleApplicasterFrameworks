import * as styleUtils from "../index";

describe("populateConfigurationValues", () => {
  it("transforms and returns the valid values", () => {
    const fields = [
      {
        type: "switch",
        key: "boolean_key",
        initial_value: false,
      },
      {
        type: "number_input",
        key: "number_key",
        initial_value: 30,
      },
    ];

    const configuration = {
      boolean_key: "true",
      number_key: "42",
    };

    const result = styleUtils.populateConfigurationValues(fields)(
      configuration
    );

    expect(result).toHaveProperty("boolean_key", true);
    expect(result).toHaveProperty("number_key", 42);
  });

  it("fallsback to default value of provided value is incorrect", () => {
    const fields = [
      {
        type: "switch",
        key: "boolean_key",
        initial_value: true,
      },
      {
        type: "number_input",
        key: "number_key",
        initial_value: 30,
      },
    ];

    const configuration = {
      boolean_key: null,
      number_key: null,
    };

    const result = styleUtils.populateConfigurationValues(fields)(
      configuration
    );

    expect(result).toHaveProperty("boolean_key", true);
    expect(result).toHaveProperty("number_key", 30);
  });

  it("allows number values to be 0", () => {
    const fields = [
      {
        type: "number_input",
        key: "number_key",
        initial_value: 30,
      },
    ];

    const configuration = {
      number_key: 0,
    };

    const result = styleUtils.populateConfigurationValues(fields)(
      configuration
    );

    expect(result).toHaveProperty("number_key", 0);
  });

  it("uses default value if number input is sent as string", () => {
    const fields = [
      {
        type: "number_input",
        key: "number_key",
        initial_value: 0,
      },
    ];

    const configuration = {
      number_key: "not a number",
    };

    const result = styleUtils.populateConfigurationValues(fields)(
      configuration
    );

    expect(result).toHaveProperty("number_key", 0);
  });

  it("uses default value if the value passed is an empty string", () => {
    const fields = [
      {
        type: "number_input",
        key: "number_key",
        initial_value: null,
      },
    ];

    const configuration = {
      number_key: "",
    };

    const result = styleUtils.populateConfigurationValues(fields)(
      configuration
    );

    expect(result).toHaveProperty("number_key", null);
  });
});
