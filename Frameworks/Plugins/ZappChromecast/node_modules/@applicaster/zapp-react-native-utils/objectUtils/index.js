import * as R from "ramda";

export const filterObj = R.curry((pred, obj) =>
  R.compose(R.fromPairs, R.filter(R.apply(pred)), R.toPairs)(obj)
);

export const mapKeys = R.curry((fn, obj) =>
  R.fromPairs(R.map(R.adjust(0, fn), R.toPairs(obj)))
);

export const rejectItemByPath = (path, prop, object) =>
  R.compose(R.reject(R.pathEq(path, prop)), R.values)(object);

export const objFromListWith = R.curry((fn, list) =>
  R.chain(R.zipObj, R.map(fn))(list)
);
