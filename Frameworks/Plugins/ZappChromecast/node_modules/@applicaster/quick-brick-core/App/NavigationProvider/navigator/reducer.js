import * as R from "ramda";

import { previousStackEntriesSelector } from "./selectors";

/* initial state */

export const initialState = {
  stack: [],
  location: { pathname: "/", state: {} },
  navBar: {
    visible: true,
    title: "",
    summary: "",
  },
};

/* Actions */

export const ACTIONS = {
  PUSH: "PUSH",
  REPLACE: "REPLACE",
  BACK: "POP",
  SET_NAV_BAR_VISIBILITY: "SET_NAV_BAR_VISIBILITY",
  SET_NAV_BAR_TITLE: "SET_NAV_BAR_TITLE",
  SET_NAV_BAR_SUMMARY: "SET_NAV_BAR_SUMMARY",
  SET_LOCATION: "SET_LOCATION",
};

/* Navigation Reducer */

const navigationAction = ({ type, route, state }) => ({
  type,
  payload: { route, state },
});

export const push = (route, state) =>
  navigationAction({
    type: ACTIONS.PUSH,
    route,
    state,
  });

export const replace = (route, state) =>
  navigationAction({
    type: ACTIONS.REPLACE,
    route,
    state,
  });

export const back = () => navigationAction({ type: ACTIONS.BACK });

const navigationEntry = (type, { route, state }) => ({
  action: type,
  route,
  state,
});

function navigationStackReducer(
  state = initialState.stack,
  { type, payload } = {}
) {
  switch (type) {
    case ACTIONS.PUSH:
      return [...state, navigationEntry(ACTIONS.PUSH, payload)];
    case ACTIONS.REPLACE:
      return [navigationEntry(ACTIONS.REPLACE, payload)];
    case ACTIONS.BACK:
      if (state.length > 1) {
        return R.compose(
          R.adjust(-1, R.assoc("action", ACTIONS.BACK)),
          previousStackEntriesSelector,
          R.assoc("stack", R.__, {})
        )(state);
      }
      return state;
    default:
      return state;
  }
}

function locationReducer(
  state = initialState.location,
  { type, payload, meta = {} }
) {
  const { route: pathname, state: locationState } = payload;

  const previousEntry = R.compose(R.last, previousStackEntriesSelector)(meta);

  switch (type) {
    case ACTIONS.BACK:
      if (previousEntry) {
        return { pathname: previousEntry.route, state: previousEntry.state };
      }
      return state;
    case ACTIONS.PUSH:
    case ACTIONS.REPLACE:
      return { pathname, state: locationState };
    default:
      return state;
  }
}

/* Nav Bar reducer */
export const setNavBarVisibility = (payload) => ({
  type: ACTIONS.SET_NAV_BAR_VISIBILITY,
  payload,
});

export const setNavBarTitle = (payload) => ({
  type: ACTIONS.SET_NAV_BAR_TITLE,
  payload,
});

export const setNavBarSummary = (payload) => ({
  type: ACTIONS.SET_NAV_BAR_SUMMARY,
  payload,
});

const NAV_BAR_ACTIONS_PROPERTIES = {
  [ACTIONS.SET_NAV_BAR_VISIBILITY]: "visible",
  [ACTIONS.SET_NAV_BAR_TITLE]: "title",
  [ACTIONS.SET_NAV_BAR_SUMMARY]: "summary",
};

export function navBarReducer(state = initialState.navBar, { type, payload }) {
  if (R.includes(type, R.keys(NAV_BAR_ACTIONS_PROPERTIES))) {
    return R.assoc(R.prop(type, NAV_BAR_ACTIONS_PROPERTIES), payload, state);
  }

  return state;
}

const applyReducer = (reducer, action) => (state) => reducer(state, action);

export default function navigationReducer(
  state = initialState,
  { type, payload } = {}
) {
  switch (type) {
    case ACTIONS.PUSH:
    case ACTIONS.REPLACE:
    case ACTIONS.BACK:
      return R.evolve(
        {
          stack: applyReducer(navigationStackReducer, { type, payload }),
          location: applyReducer(locationReducer, {
            type,
            payload,
            meta: state,
          }),
        },
        state
      );

    case ACTIONS.SET_NAV_BAR_VISIBILITY:
    case ACTIONS.SET_NAV_BAR_TITLE:
    case ACTIONS.SET_NAV_BAR_SUMMARY:
      return R.evolve(
        {
          navBar: applyReducer(navBarReducer, { type, payload }),
        },
        state
      );

    default:
      return state;
  }
}
