import { directionHelper } from "../../directionHelper";

const globalTizen = {
  tvinputdevice: {
    registerKeyBatch: jest.fn(),
  },
};

jest.mock("react-native", () => {
  return { Platform: { OS: "web" } };
});

describe("keyCode", () => {
  const { keyCode } = require("../index");
  const { KEYS } = require("../keys.web");
  it("returns an object for a given key event", () => {
    expect(keyCode(KEYS.Enter)).toMatchSnapshot();
  });

  it("has a matcher method for a single key", () => {
    expect(keyCode(KEYS.Enter).matches("Enter")).toBeTruthy();
    expect(keyCode(KEYS.Enter).matches(KEYS.Enter)).toBeTruthy();
    expect(keyCode(KEYS.Back).matches("Enter")).toBeFalsy();
  });

  it("has matcher for multiple keys", () => {
    expect(
      keyCode(KEYS.Enter).matchesAny("Enter", "Back", "ArrowUp")
    ).toBeTruthy();

    expect(
      keyCode(KEYS.Enter).matchesAny("Back", "ArrowUp", "ArrowDown")
    ).toBeFalsy();
  });

  it("returns the direction if it matches an arrow key", () => {
    expect(keyCode(KEYS.Enter).direction()).toBe(null);
    expect(keyCode(KEYS.ArrowDown).direction()).toEqual(
      directionHelper(KEYS.ArrowDown)
    );
  });

  describe("in web env", () => {
    it("uses the proper keyCode for the environment", () => {
      expect(keyCode({ keyCode: 8 }).matches(KEYS.Back)).toBeTruthy();
    });
  });
});

describe("in Tizen Env", () => {
  jest.mock("react-native", () => {
    return { Platform: { OS: "samsung_tv" } };
  });

  beforeEach(() => {
    global.tizen = globalTizen;
    jest.resetModules();
  });

  afterEach(() => {
    global.tizen = undefined;
  });

  it("uses the proper keyCode for the environment", () => {
    const { keyCode } = require("../index");
    const { KEYS } = require("../keys.web");

    expect(globalTizen.tvinputdevice.registerKeyBatch).toHaveBeenCalledWith([
      "MediaPlayPause",
      "MediaPlay",
      "MediaStop",
      "MediaFastForward",
      "MediaRewind",
      "3D",
      "Exit",
      "MediaPause",
    ]);
    expect(keyCode({ keyCode: 10009 }).matches(KEYS.Back)).toBeTruthy();
  });
});

describe("in WebOS Env", () => {
  jest.mock("react-native", () => {
    return { Platform: { OS: "lg_tv" } };
  });

  beforeEach(() => {
    jest.resetModules();
  });

  it("uses the proper keyCode for the environment", () => {
    const { keyCode } = require("../index");
    const { KEYS } = require("../keys.web");
    // Back is reserved on LG
    expect(keyCode({ keyCode: 417 }).matches(KEYS.Forward)).toBeTruthy();
  });
});
