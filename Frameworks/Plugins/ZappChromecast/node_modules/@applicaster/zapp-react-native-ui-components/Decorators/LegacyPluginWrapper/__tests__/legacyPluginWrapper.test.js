jest.mock("@applicaster/zapp-react-native-bridge/QuickBrick", () => ({
  getLegacyInitialProps: jest.fn(() => ({
    foo: "bar",
  })),
}));

import * as React from "react";
import { shallow } from "enzyme";
import { shallowToJson } from "enzyme-to-json";
import { View, Platform } from "react-native";
import url from "url";

const { decorateLegacyPlugin } = require("../index");

const plugin = {
  name: "legacyPlugin",
  type: "article",
  module: jest.fn(() => <View />),
};

describe("decorateLegacyPlugin", () => {
  const decoratedPlugin = decorateLegacyPlugin(plugin);
  let urlSpy;

  beforeEach(() => {
    urlSpy = jest.spyOn(url, "parse");
  });

  afterEach(() => {
    urlSpy.mockRestore();
  });
  it("returns a plugin object", () => {
    expect(decoratedPlugin).toEqual(
      expect.objectContaining({
        name: plugin.name,
        type: plugin.type,
        module: expect.any(Function),
      })
    );
  });

  it("wraps the plugin in to pass the initial props", () => {
    const wrapper = shallow(
      <decoratedPlugin.module
        screenId="A1234"
        screenData={{ screen: "data" }}
      />
    );
    expect(shallowToJson(wrapper)).toMatchSnapshot();
  });

  it("forwards other custom props", () => {
    const wrapper = shallow(
      <decoratedPlugin.module
        screenId="A1234"
        screenData={{ screen: "data" }}
        customProp="foo"
        otherCustomProp={42}
      />
    );

    expect(shallowToJson(wrapper)).toMatchSnapshot();
  });

  it("extracts extra_props from url scheme if it exsits", () => {
    const scheme = "app://presentRN?reactProps[item_id]=4567";

    const wrapper = shallow(
      <decoratedPlugin.module
        screenId="A1234"
        screenData={{ link: { href: scheme } }}
      />
    );

    expect(urlSpy).toHaveBeenCalledWith(scheme, true);
    expect(shallowToJson(wrapper)).toMatchSnapshot();
    expect(wrapper.prop("extra_props")).toEqual({ item_id: "4567" });
  });

  it("stringifies extra_props on android", () => {
    const scheme = "app://presentRN?reactProps[item_id]=4567";
    Platform.OS = "android";

    const wrapper = shallow(
      <decoratedPlugin.module
        screenId="A1234"
        screenData={{ link: { href: scheme } }}
      />
    );

    expect(urlSpy).toHaveBeenCalledWith(scheme, true);
    expect(shallowToJson(wrapper)).toMatchSnapshot();
    expect(wrapper.prop("extra_props")).toEqual(
      JSON.stringify({ item_id: "4567" })
    );

    Platform.OS = "ios";
  });

  it("returns an empty object as extra_props if url scheme is not defined", () => {
    const wrapper = shallow(
      <decoratedPlugin.module screenId="A1234" screenData={{}} />
    );

    expect(urlSpy).not.toHaveBeenCalled();
    expect(shallowToJson(wrapper)).toMatchSnapshot();
    expect(wrapper.prop("extra_props")).toEqual({});
  });

  it("returns the plugin", () => {
    expect(decorateLegacyPlugin(plugin, () => false)).toEqual(plugin);
  });
});
