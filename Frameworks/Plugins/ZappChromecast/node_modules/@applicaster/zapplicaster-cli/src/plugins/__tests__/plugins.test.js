const {
  gatherDependencies,
  getPluginDependencies,
  getDefaultPlugins,
  getFallbackPlugins,
  addMandatoryPlugins,
} = require("../index");

const camelize = require("camelize");

const name = "Applicaster";
const identifier = "applicaster";
const dependency_name = "@applicaster/zapp-pipes-provider-applicaster";
const dependency_version = "1.4.2";
const type = "data_source_provider";
const configuration_json = { foo: "bar" };

const applicasterManifest = {
  plugin: {
    name,
    identifier,
    dependency_name,
    dependency_version,
    type,
  },
  configuration_json,
};

const nonJSPlugin = {
  plugin: {
    name: "Not a JS Plugin",
    identifier: "not-a-JS-plugin",
    dependency_name: "some-pod",
    dependency_version: "~> 1.x.x",
    type: "player",
  },
  configuration_json: {},
};

const rnPlugin = {
  plugin: {
    name: "RN Plugin",
    identifier: "rn-plugin",
    dependency_name: "npm-package",
    dependency_version: "1.3.4",
    type: "general",
    react_native: true,
  },
  configuration_json: {},
};

const rnPluginWithNoDependencyName = {
  plugin: {
    ...rnPlugin.plugin,
    dependency_name: undefined, // eslint-disable-line no-undefined
  },
};

const rnPluginWithNoIdentifier = {
  plugin: {
    ...rnPlugin.plugin,
    identifier: undefined, // eslint-disable-line no-undefined
  },
};
describe("gatherDependencies", () => {
  it("parses plugin configuration correctly", () => {
    const result = gatherDependencies([applicasterManifest])[0];
    expect(result).toHaveProperty("name", name);
    expect(result).toHaveProperty("packageName", dependency_name);
    expect(result).toHaveProperty("version", dependency_version);
    expect(result).toHaveProperty("moduleName", camelize(identifier));
    expect(result).toHaveProperty("type", [type]);
    expect(result).toHaveProperty("configuration", configuration_json);
  });

  it("exclude non JS plugin", () => {
    const pluginConfigurations = [applicasterManifest, nonJSPlugin, rnPlugin];
    const result = gatherDependencies(pluginConfigurations);

    expect(result).toBeArrayOfSize(2);
    expect(result[0]).toHaveProperty("name", name);
    expect(result[1]).toHaveProperty("name", rnPlugin.plugin.name);
  });

  it("excludes plugins which don't have dependency_name or identifier", () => {
    const pluginConfigurations = [
      applicasterManifest,
      nonJSPlugin,
      rnPluginWithNoDependencyName,
      rnPluginWithNoIdentifier,
    ];

    const result = gatherDependencies(pluginConfigurations);
    expect(result).toMatchSnapshot();
  });
});

describe("getPluginDependencies", () => {
  const pluginConfigurations = [applicasterManifest, nonJSPlugin, rnPlugin];
  const plugins = gatherDependencies(pluginConfigurations);

  it("maps the plugins from plugin configurations", () => {
    expect(getPluginDependencies(plugins)).toMatchSnapshot();
  });
});

const PLATFORMS = {
  IOS: "ios",
  ANDROID: "android",
  AMAZON: "amazon",
  SAMSUNG_TV: "samsung_tv",
  LG_TV: "lg_tv",
};

const DEVICE_TARGETS = {
  APPLE_TV: "apple_tv",
  ANDROID_TV: "android_tv",
  TV: "tv",
  IPHONE: "iphone",
  IPAD: "ipad",
  SMARTPHONE: "smartphone",
  TABLET: "tablet",
  UNIVERSAL: "universal",
  SAMSUNG_TV: "samsung_tv",
  LG_TV: "lg_tv",
};

describe("getDefaultPlugins", () => {
  it("has the correct defaults", () => {
    const { defaultPlugins } = require("../plugins_list");
    expect(defaultPlugins).toMatchSnapshot();
  });

  it("adds the missing default plugins", () => {
    const scenarios = [
      ["ios_mobile", [PLATFORMS.IOS, DEVICE_TARGETS.IPHONE]],
      ["ios_tablet", [PLATFORMS.IOS, DEVICE_TARGETS.IPAD]],
      ["ios_universal", [PLATFORMS.IOS, DEVICE_TARGETS.UNIVERSAL]],
      ["tvos", [PLATFORMS.IOS, DEVICE_TARGETS.APPLE_TV]],
      ["android_mobile", [PLATFORMS.ANDROID, DEVICE_TARGETS.SMARTPHONE]],
      ["android_tablet", [PLATFORMS.ANDROID, DEVICE_TARGETS.TABLET]],
      ["android_universal", [PLATFORMS.ANDROID, DEVICE_TARGETS.UNIVERSAL]],
      ["android_tv", [PLATFORMS.ANDROID, DEVICE_TARGETS.ANDROID_TV]],
      ["amazon_fire", [PLATFORMS.AMAZON, DEVICE_TARGETS.TV]],
      ["samsung", [PLATFORMS.SAMSUNG_TV, DEVICE_TARGETS.SAMSUNG_TV]],
      ["lg", [PLATFORMS.LG_TV, DEVICE_TARGETS.LG_TV]],
    ];

    const result = scenarios.reduce((acc, [env, args]) => {
      acc[env] = getDefaultPlugins.apply(null, args);
      return acc;
    }, {});
    expect(result).toMatchSnapshot();
  });
});

describe("getFallbackPlugins", () => {
  it("has the correct fallbacks", () => {
    const { fallbackPlugins } = require("../plugins_list");
    expect(fallbackPlugins).toMatchSnapshot();
  });

  it("adds the fallback plugin if no plugin of this type exists", () => {
    const pluginConfigurations = [
      {
        plugin: {
          type: "player",
          name: "Some player plugin",
          identifier: "some_player_plugin",
          react_native: true,
        },
      },
      {
        plugin: {
          type: "menu",
          name: "native menu plugin",
        },
      },
    ];

    const pluginsToAdd = getFallbackPlugins(
      PLATFORMS.IOS,
      DEVICE_TARGETS.IPHONE,
      pluginConfigurations
    );

    expect(pluginsToAdd).toHaveProperty("length", 2);
    expect(pluginsToAdd).toMatchSnapshot();

    const pluginConfigurations2 = [
      {
        plugin: {
          type: "menu",
          name: "bottom tab bar",
          react_native: true,
        },
      },
    ];

    const pluginsToAdd2 = getFallbackPlugins(
      PLATFORMS.IOS,
      DEVICE_TARGETS.IPHONE,
      pluginConfigurations2
    );

    expect(pluginsToAdd2).toHaveProperty("length", 2);
    expect(pluginsToAdd2).toMatchSnapshot();
  });
});

describe("addMandatoryPlugins", () => {
  it("adds the plugin when it is not there", () => {
    const plugins = [{ idenitifer: "foo" }, { identifier: "bar" }];
    const pluginsCount = plugins.length;

    addMandatoryPlugins(plugins);

    expect(plugins).toMatchSnapshot();
    expect(plugins.length).toEqual(pluginsCount + 1);
  });

  it("doesn't add it if it already exists", () => {
    const plugins = [
      { idenitifer: "foo" },
      { identifier: "bar" },
      { identifier: "default_theme" },
    ];

    const pluginsCount = plugins.length;

    addMandatoryPlugins(plugins);

    expect(plugins).toMatchSnapshot();
    expect(plugins.length).toEqual(pluginsCount);
  });
});
