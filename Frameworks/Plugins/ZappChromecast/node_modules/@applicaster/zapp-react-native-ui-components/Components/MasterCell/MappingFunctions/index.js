import * as R from "ramda";
import { isDateValid } from "./Utils";

/**
 * Retrieves the value of the "src" in the first media_item
 * that has the matching key provided in args.
 * Fallbacks: "image_base" key, or first media_item that has any "src"
 * @param {Object} entry    Single entry from a feed
 * @param {Array} args      Array with a single element - the key of the media item
 *                          from which the "src" should be retrieved
 * @returns {?String}       Value of "src", usually a URI
 */
export function imageSrcFromMediaItem(entry, args) {
  const imageKey = args[0] || "image_base"; // always a single key in this function
  const mediaGroup = R.path(["media_group"], entry);
  if (!mediaGroup) {
    return undefined;
  }
  const mediaItems = R.compose(
    R.flatten,
    R.map(R.prop("media_item")),
    R.filter(R.either(R.propEq("type", "image"), R.propEq("type", "thumbnail")))
  )(mediaGroup);

  if (!mediaItems) {
    return undefined;
  }

  const src = R.compose(
    R.prop("src"),
    R.defaultTo(R.head(mediaItems)),
    R.when(R.isNil, () => R.find(R.propEq("key", "image_base"), mediaItems)),
    R.find(R.propEq("key", imageKey))
  )(mediaItems);

  // Special case for react native - uri cannot be an empty string (yellow warning).
  // R.isEmpty is tailored specifically for checks like these,
  // it returns false for undefined values.
  return R.isEmpty(src) ? undefined : src;
}

/**
 * Fetch a date object from a path, and convert to a string.
 * Returns an empty string if the resulting path has no value,
 * or if the date parsing failed.
 * @param {Object} obj Any object holding an ISO8061 date, usually a feed entry.
 * @param {Array} args Path to the value containing the date to parse.
 */
export function stringifyDateFromPath(obj, path) {
  const date = new Date(pathWithFallback(obj, path));
  return isDateValid(date) ? date.toDateString() : "";
}

/**
 * Retrieves value in an object given its path.
 * Returns an empty string if the resulting path has no value.
 * @param {Object} obj  Plain javascript object
 * @param {Array} path  Path to the value, as an array (see R.pathOr)
 * @returns {any}       Found object or empty string
 */
export function pathWithFallback(obj, path) {
  return R.pathOr("", path)(obj);
}

// prettier-ignore
const functionsNames = {
  "path": pathWithFallback,
  "image_src_from_media_item": imageSrcFromMediaItem,
  "stringify_date_from_path": stringifyDateFromPath,
};

/**
 * Returns the matching function for the funcName,
 * If not found, returns the "path" function as a default;
 * @param {String} func Name of the func
 * @returns {Function}        Function to apply, defaults to "path"
 */
export function functionForName(func) {
  return functionsNames[func] || pathWithFallback;
}
