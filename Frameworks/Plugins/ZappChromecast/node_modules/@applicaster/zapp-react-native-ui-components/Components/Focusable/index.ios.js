// @flow
import * as React from "react";
import * as R from "ramda";

import { FocusableItemNative } from "@applicaster/zapp-react-native-ui-components/Components/NativeFocusables";
import { BaseFocusable } from "@applicaster/zapp-react-native-ui-components/Components/BaseFocusable";

import { forceFocusableFocus } from "@applicaster/zapp-react-native-utils/appUtils/focusManager";

function noop() {}

type Props = {
  id: string,
  groupId: string,

  onPress: ?(any) => void,
  onFocus: ?(any) => void,
  onBlur: ?(any) => void,
  children: boolean => React.ComponentType<any>,
  isParallaxDisabled: boolean,

  preferredFocus: ?boolean,
  selected: ?boolean,
};

export class Focusable extends BaseFocusable<Props> {
  constructor(props) {
    super(props);
    this.isGroup = false;

    this.onPress = this.onPress.bind(this);
    this.onFocus = this.onFocus.bind(this);
    this.onBlur = this.onBlur.bind(this);

    this.preferredFocus = this.preferredFocus.bind(this);
    this.measureView = this.measureView.bind(this);
  }

  /**
   * indicates whether the underlying component should claim preferred focus
   * when navigating into the group of this item
   * @returns {boolean}
   */
  isPreferredFocus() {
    return this.preferredFocus();
  }
  preferredFocus() {
    return this.props.preferredFocus || false;
  }

  onPress({ nativeEvent }) {
    const { onPress = noop } = this.props;
    onPress(nativeEvent);
  }

  onFocus({ nativeEvent }) {
    const { onFocus = noop } = this.props;
    this.setState({ focused: true });
    onFocus(nativeEvent);
  }

  onBlur({ nativeEvent }) {
    const { onBlur = noop } = this.props;
    this.setState({ focused: false });

    onBlur(nativeEvent);
  }

  setFocus(direction, callback) {
    const focusMethods = [
      { method: this.willReceiveFocus },
      { method: this.focus, args: [callback] },
      { method: this.hasReceivedFocus },
    ];

    const self = this;
    return R.reduce(
      (sequence, { method, args = [] }) => {
        return sequence
          .then(() => {
            return method.apply(self, args);
          })
          .catch(e => {
            throw e;
          });
      },
      Promise.resolve(),
      focusMethods
    );
  }

  focus(callback) {
    const { groupId, id } = this.props;
    forceFocusableFocus(groupId, id, callback);
  }

  blur() {}
  render() {
    const {
      children,
      groupId,
      id,
      isParallaxDisabled,
      ...otherProps
    } = this.props;
    const { focused } = this.state;
    return (
      <FocusableItemNative
        itemId={groupId && id ? id : null}
        groupId={groupId && id ? groupId : null}
        isParallaxDisabled={isParallaxDisabled}
        onViewFocus={this.onFocus}
        onViewPress={this.onPress}
        onViewBlur={this.onBlur}
        ref={this.ref}
        onLayout={event => this.measureView(event)}
        {...otherProps}
      >
        {R.is(Function, children) ? children(focused) : children}
      </FocusableItemNative>
    );
  }
}
