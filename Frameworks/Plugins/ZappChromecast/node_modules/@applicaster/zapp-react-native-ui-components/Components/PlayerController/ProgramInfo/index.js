// @flow
import * as React from "react";
import { View, Image, Text } from "react-native";
import * as programStyles from "./styles";
import { connectToStore } from "@applicaster/zapp-react-native-redux";
import * as R from "ramda";
import { fixColorHexCode } from "@applicaster/zapp-react-native-utils/stylesUtils";

type Props = {
  logo: ?string,
  title: string,
  subtitle: string,
  isAudioContent: boolean,
  styles: {}
};

const defaultColor = "#EFEFEF";

function ProgramInfoComponent({
  logo,
  title = "",
  subtitle = "",
  isAudioContent,
  styles
}: Props) {
  const colorTitle = R.path(
    ["universal", "player_title_text", "color"],
    styles
  );
 
  const colorSubtitle = R.path(
    ["universal", "player_info_text", "color"],
    styles
  );

  const colorOverlay = R.path(
    ["universal", "player_overlay_color", "color"],
    styles
  );

  const container = {
    marginTop: 439,
    marginBottom: 60,
    marginHorizontal: 90,
    paddingHorizontal: 22,
    backgroundColor: fixColorHexCode(colorOverlay) || "transparent",
  };

  const titleText = {
    fontSize: 48,
    fontWeight: "bold",
    fontStyle: "normal",
    color: fixColorHexCode(colorTitle) || defaultColor,
    textShadowColor: "rgba(0,0,0, 0.8)",
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 5,
  };

  const subtitleText = {
    fontSize: 24,
    fontWeight: "normal",
    fontStyle: "normal",
    color: fixColorHexCode(colorSubtitle) || defaultColor,
  };

  const transportInfo = (
    <View>
      <View style={programStyles.programInfo.title}>
        <Text style={titleText}>{title}</Text>
      </View>
      <View style={programStyles.programInfo.subtitle}>
        <Text style={subtitleText}>{subtitle}</Text>
      </View>
    </View>
  );

  return (
    <View style={container}>
      <View style={programStyles.programInfo.container}>
        {logo && (
          <Image
            source={{ uri: logo }}
            style={programStyles.programInfo.logo}
          />
        )}
        {!isAudioContent && transportInfo}
      </View>
    </View>
  );
}

export const ProgramInfo = R.compose(
  connectToStore(R.pick(["remoteConfigurations", "styles"]))
)(ProgramInfoComponent);
