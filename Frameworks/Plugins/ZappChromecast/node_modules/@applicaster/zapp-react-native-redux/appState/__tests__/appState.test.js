import {
  appState,
  setAppReady,
  setAppState,
  SET_APP_READY,
  SET_APP_STATE,
} from "../index";

describe("redux actions", () => {
  it("SET_APP_READY has the proper constant value", () => {
    expect(SET_APP_READY).toMatchSnapshot();
  });

  it("SET_APP_STATE has the proper constant value", () => {
    expect(SET_APP_STATE).toMatchSnapshot();
  });

  it("setAppReady returns the proper action", () => {
    expect(setAppReady()).toMatchSnapshot();
  });

  it("setAppState returns the proper action", () => {
    expect(setAppState()).toMatchSnapshot();
  });
});

describe("appState", () => {
  const initialState = {
    appReady: false,
    appState: {
      isAvailable: null,
      currentState: null,
      nextState: null,
      eventType: null,
    },
  };

  const appStateChange = {
    appReady: true,
    appState: {
      isAvailable: "visable",
      currentState: "active",
      nextState: "background",
      eventType: "change",
    },
  };

  it("uses the default initial state if non is provided", () => {
    const newState = appState(undefined, { type: "foo" });
    expect(newState).toHaveProperty("appReady", initialState.appReady);
  });

  describe("when action is dispatched", () => {
    it("sets the appReady flag to true when setAppReady dispatched", () => {
      const newState = appState(initialState, setAppReady());
      expect(newState).toHaveProperty("appReady", true);
    });

    it("sets appState payload when setAppState dispatched", () => {
      const payload = appStateChange.appState;
      const newState = appState(initialState, setAppState(payload));

      expect(newState.appState).toHaveProperty("nextState", "background");
    });

    it("leaves the state unchanged when any other action dispatched", () => {
      const newState = appState(initialState, { type: "foo" });
      expect(newState).toHaveProperty("appReady", initialState.appReady);
    });
  });
});
