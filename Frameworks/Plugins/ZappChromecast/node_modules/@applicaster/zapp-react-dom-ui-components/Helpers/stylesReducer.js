const cssPropertiesToMatch = [
  "color",
  "borderColor",
  "backgroundColor",
  "borderBottomColor"
];

export function stylesReducer(localStyles, { tv: zappStyles }) {
  return Object.keys(localStyles).reduce(function(finalStyles, className) {
    finalStyles[className] = Object.keys(localStyles[className]).reduce(
      function(finalClass, cssProperty) {
        const initialStyle = localStyles[className][cssProperty];
        finalClass[cssProperty] = cssPropertiesToMatch.includes(cssProperty)
          ? getZappStylesColor(initialStyle, zappStyles)
          : initialStyle;

        return finalClass;
      },
      {}
    );

    return finalStyles;
  }, {});
}

export function shiftHexAlpha(hexWithAlpha) {
  if (!hexWithAlpha) {
    return "";
  }

  return `#${hexWithAlpha.slice(3, 9)}`;
}

export function getZappStylesColor({ key, defaultColor }, zappStyles) {
  if (zappStyles[key] && zappStyles[key].color) {
    return shiftHexAlpha(zappStyles[key].color);
  }

  return defaultColor;
}
