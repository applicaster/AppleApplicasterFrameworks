// @flow
import * as React from "react";
import { View } from "react-native";

import { FixedFocusScrollableList } from "../FixedFocusScrollableList";
import { BaseCell } from "../BaseCell";
import { Header } from "../Header";
import { FocusableGroup } from "@applicaster/zapp-react-native-ui-components/Components/FocusableGroup";
import { BaseFlatList } from "../BaseFlatList";
import { ContainerWrapperView } from "../ContainerWrapperView";
import { customCellStyle, flatListStyle, containerStyle } from "./styles";
import { itemLimitForData } from "@applicaster/zapp-react-native-ui-components/Helpers/DataSourceHelper";

type State = {
  containerWidth: number,
};

// There is an inherent problem when the component is based
// on inheritance. I am not sure if this props should've been
// in BaseFlatList or not.
type Props = {
  CellRenderer: React.componentType<{ item: Object, state: string }>,
};

export class GridComponent extends BaseFlatList<Props, State> {
  constructor(props) {
    super(props);

    this.state = {
      containerWidth: 0,
    };
    this.onViewLayout = this.onViewLayout.bind(this);
    this.onLayout = this.onLayout.bind(this);
    this.renderCell = this.renderCell.bind(this);
  }

  customOffsetForIndex(index) {
    const { paddingVertical = 0, marginTop = 0 } = containerStyle;
    return paddingVertical + marginTop + this.headerHeight;
  }

  onViewLayout({ nativeEvent }) {
    if (this.state.containerWidth !== nativeEvent.layout.width) {
      this.setState({ containerWidth: nativeEvent.layout.width });
    }
  }

  onLayout(e) {
    const { x, y, width, height } = e.nativeEvent.layout;
    this.viewFrame = { x, y, width, height };
  }

  flatListParams() {
    return {
      numColumns: Math.round(this.state.containerWidth / customCellStyle.width),
    };
  }

  renderCell({ item, index }) {
    const {
      CellRenderer,
      component: { id },
      componentPositionIndex,
    } = this.props;

    return (
      <BaseCell
        index={index}
        key={index}
        item={item}
        onPress={this.onPress}
        onFocus={this.onFocus}
        groupId={id}
        CellRenderer={CellRenderer}
        componentPositionIndex={componentPositionIndex}
      />
    );
  }

  render() {
    const {
      component,
      zappPipesData: { data },
      isScreenWrappedInContainer,
    } = this.props;

    const { entry } = data;

    const {
      id,
      styles: { header },
    } = component;

    this.props.onLoadFinished();
    const dataSource = itemLimitForData(entry, component);
    const shouldHideComponent = dataSource.length === 0;

    if (shouldHideComponent) {
      return null;
    }

    return (
      <View onLayout={this.onViewLayout}>
        {this.state.containerWidth ? (
          <FocusableGroup
            onLayout={this.onLayout}
            style={containerStyle}
            id={id}
          >
            {header.visible && (
              <Header
                configuration={component.styles}
                {...header}
                item={data}
                isScreenWrappedInContainer={isScreenWrappedInContainer}
              />
            )}
            <ContainerWrapperView
              style={flatListStyle}
              flatListParams={this.flatListParams()}
            >
              {args => (
                <FixedFocusScrollableList
                  {...args}
                  data={dataSource}
                  renderCell={this.renderCell}
                  onMomentumScrollEnd={this.onMomentumScrollEnd}
                  onContentSizeChange={this.onContentSizeChange}
                  setFlatListRef={flatListRef =>
                    (this.flatListRef = flatListRef)
                  }
                />
              )}
            </ContainerWrapperView>
          </FocusableGroup>
        ) : null}
      </View>
    );
  }
}
