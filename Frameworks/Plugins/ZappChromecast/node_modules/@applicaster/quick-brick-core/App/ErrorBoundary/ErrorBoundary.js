// @flow
import * as React from "react";

type Props = {
  children: React.ComponentType<any>,
  components: { [string]: React.ComponentType<any> },
  plugins: { [string]: any },
};

type DisplayErrorProps = {
  error: Error,
  info: { componentStack: string },
  sendError: () => void,
};

type State = {
  hasError: boolean,
  error: ?any,
  info: ?any,
  DisplayErrorComponent: React.ComponentType<DisplayErrorProps>,
};

function getDisplayErrorComponent(props) {
  const { components, plugins } = props;

  return plugins.DisplayError || components.DisplayError;
}

export class ErrorBoundaryComponent extends React.Component<Props, State> {
  state = {
    hasError: false,
    DisplayErrorComponent: getDisplayErrorComponent(this.props),
  };

  componentDidCatch(error, info) {
    this.setState({ hasError: true, error, info });
  }

  render() {
    const { hasError, DisplayErrorComponent } = this.state;

    if (hasError) {
      return (
        <DisplayErrorComponent
          error={this.state.error}
          info={this.state.info}
        />
      );
    }

    return this.props.children;
  }
}
