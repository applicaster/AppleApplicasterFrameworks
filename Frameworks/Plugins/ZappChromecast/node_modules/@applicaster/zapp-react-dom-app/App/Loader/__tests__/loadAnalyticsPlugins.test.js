import * as ProvidePlugins from "@applicaster/zapp-react-native-utils/analyticsUtils/manager";
import * as SendLaunchEvent from "@applicaster/zapp-react-native-utils/analyticsUtils";

import { loadAnalyticsPlugins } from "../loadAnalyticsPlugins";

const plugin1 = {
  module: jest.fn(),
  name: "Plugin 1",
  identifier: "plugin_1",
  type: "analytics",
};

const plugin2 = {
  module: jest.fn(),
  name: "Plugin 2",
  identifier: "plugin_2",
  type: "video_advertisement",
};

const plugins = [plugin1, plugin2];
const pluginConfigurations = [{}];

const providePlugins = jest
  .spyOn(ProvidePlugins, "providePlugins")
  .mockImplementation((plugins, pluginConfigurations, callback) => {
    callback();
  });

const sendLaunchEvent = jest
  .spyOn(SendLaunchEvent, "sendLaunchEvent")
  .mockImplementation(() => jest.fn());

describe("loadAnalyticsPlugins", () => {
  it("resolves", async () => {
    const resolver = jest.fn();
    const rejecter = jest.fn();
    await loadAnalyticsPlugins(plugins, pluginConfigurations)
      .then(resolver)
      .catch(rejecter);

    expect(resolver).toHaveBeenCalled();
    expect(rejecter).not.toHaveBeenCalled();
  });

  it("it calls the analytics plugin initializer", async () => {
    await loadAnalyticsPlugins(plugins, pluginConfigurations);
    expect(providePlugins).toHaveBeenCalledWith(
      plugins.filter(p => p.type === "analytics"),
      pluginConfigurations,
      expect.any(Function)
    );
  });

  it("it calls the launch event", async () => {
    await loadAnalyticsPlugins(plugins, pluginConfigurations);
    expect(sendLaunchEvent).toHaveBeenCalled();
  });
});
