import * as React from "react";
import { usePrevious } from "@applicaster/zapp-react-native-utils/reactHooks/utils";
import { useNavigation } from "@applicaster/zapp-react-native-utils/reactHooks/navigation";

export const FocusManagerContext = React.createContext(null);

export function useFocusManager() {
  return React.useContext(FocusManagerContext);
}

export function useInitialFocus(focused, initialRef, options = {}) {
  const { withStateMemory, refsList } = options;
  const [currentlyFocusedIndex, setCurrentlyFocusedIndex] = React.useState(
    null
  );

  const focusManager = useFocusManager();

  const nextFocus =
    (withStateMemory && refsList?.[currentlyFocusedIndex]) || initialRef;

  React.useLayoutEffect(() => {
    focused && nextFocus && focusManager.setFocus(nextFocus);
  }, [focused, initialRef]);

  return withStateMemory && setCurrentlyFocusedIndex;
}

export function useFocusRefs() {
  const { current } = React.useRef([]);
  return current;
}

export function useFocusEffect(onFocus, focusWatcher) {
  const [focused] = focusWatcher;

  React.useLayoutEffect(() => {
    let onBlur = () => null;

    if (focused) {
      onBlur = onFocus?.();
    } else {
      onBlur?.();
    }
  }, focusWatcher);
}

export function withFocusManagerProvider(Component) {
  return function WrappedWithFocusManagerProvider(props) {
    const [focused, setFocus] = React.useState(null);
    const { currentRoute } = useNavigation();
    const previousRoute = usePrevious(currentRoute);

    React.useEffect(() => {
      if (currentRoute !== previousRoute) {
        setFocus(null);
      }
    }, [currentRoute]);

    const isFocused = (id) => id === focused?.props?.id;

    const getCurrent = (ref) => ref?.current || ref;

    const blurPrevious = (_, options) => {
      focused?.onBlur?.(focused, options);
    };

    const setNextFocus = (nextFocus, options) => {
      if (nextFocus) {
        setFocus(nextFocus);
        nextFocus?.onFocus?.(nextFocus, options);
      }
    };

    const focusSetter = (newFocusRef, options) => {
      const current = getCurrent(newFocusRef);
      blurPrevious(current, options);
      setNextFocus(current, options);
    };

    const resetFocus = () => {
      blurPrevious(focused);
      setFocus(null);
    };

    return (
      <FocusManagerContext.Provider
        value={{
          focused,
          setFocus: focusSetter,
          resetFocus,
          isFocused,
        }}
      >
        <Component {...props} />
      </FocusManagerContext.Provider>
    );
  };
}
