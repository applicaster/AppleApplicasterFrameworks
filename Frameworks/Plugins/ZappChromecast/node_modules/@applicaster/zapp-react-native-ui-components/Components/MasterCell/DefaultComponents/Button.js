// @flow
import * as React from "react";
import * as R from "ramda";

import { TouchableOpacity } from "react-native";
// import { SvgUri } from "react-native-svg";
import { connectToStore } from "@applicaster/zapp-react-native-redux";
import { defaultComponents } from "./";
import { useActions } from "@applicaster/zapp-react-native-utils/reactHooks/actions";

type Props = {
  item: { id: string },
  asset: {
    props: {},
    src: {
      active: string,
      inactive: string,
      [string]: string,
    },
    style: {},
    type: "Image" | "Svg" | "Lottie",
  },
  initiallyActive: boolean,
  action: {
    identifier: string,
    type: string,
  },
  style: {},
  plugins: [],
};

// function Svg({
//   uri,
//   style,
//   ...props
// }: {
//   uri: {},
//   style: { width: Number, height: number },
// }) {
//   const width = style?.width;
//   const height = style?.height;

//   return <SvgUri width={width} height={height} uri={uri} />;
// }

function ButtonComponent(props: Props) {
  const additionalComponents = {}; // Svg, Lottie
  const components = R.merge(defaultComponents, additionalComponents);

  const asset = props?.asset;
  const item = props?.item;
  const action = props?.action;

  const assetType = asset?.type || "Image";

  const ButtonAsset = components[assetType];

  const actionContext = useActions(action?.identifier);

  // TODO: better handling of missing plugin
  if (!actionContext) {
    // eslint-disable-next-line no-console
    console.warn(
      `You're missing an action plugin(${action?.identifier}) required by your button.  \n Button can't be displayed`
    );
    return null;
  }
  const isSelected = R.includes(item, actionContext.state);
  // TODO: additional states / types not yet implemented
  const assetSrc = isSelected ? asset?.src?.active : asset?.src?.inactive;

  const toggleAction = () =>
    isSelected
      ? actionContext.removeFavourite(item)
      : actionContext.addFavourite(item);

  async function onPress() {
    // TODO: loading state
    await toggleAction();
  }

  return (
    <TouchableOpacity
      activeOpacity={1}
      onPress={onPress}
      testID={`${item?.id}`}
      style={props?.style}
    >
      <ButtonAsset style={asset?.style} uri={assetSrc} {...asset?.props} />
    </TouchableOpacity>
  );
}

export const Button = R.compose(connectToStore(R.pick(["plugins"])))(
  ButtonComponent
);
